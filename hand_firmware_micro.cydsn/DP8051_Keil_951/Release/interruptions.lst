C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE INTERRUPTIONS
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\interruptions.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.4\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -interruptions.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL(2) PR(.\DP8051
                    -_Keil_951\Release/interruptions.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\interruptions.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          // ----------------------------------------------------------------------------
   2          // BSD 3-Clause License
   3          
   4          // Copyright (c) 2016, qbrobotics
   5          // Copyright (c) 2017, Centro "E.Piaggio"
   6          // All rights reserved.
   7          
   8          // Redistribution and use in source and binary forms, with or without
   9          // modification, are permitted provided that the following conditions are met:
  10          
  11          // * Redistributions of source code must retain the above copyright notice, this
  12          //   list of conditions and the following disclaimer.
  13          
  14          // * Redistributions in binary form must reproduce the above copyright notice,
  15          //   this list of conditions and the following disclaimer in the documentation
  16          //   and/or other materials provided with the distribution.
  17          
  18          // * Neither the name of the copyright holder nor the names of its
  19          //   contributors may be used to endorse or promote products derived from
  20          //   this software without specific prior written permission.
  21          
  22          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25          // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26          // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27          // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28          // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29          // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30          // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32          // POSSIBILITY OF SUCH DAMAGE.
  33          // ----------------------------------------------------------------------------
  34          
  35          /**
  36          * \file         interruptions.c
  37          *
  38          * \brief        Interruption handling and firmware core functions
  39          * \date         Feb 14th, 2023
  40          * \author       _Centro "E.Piaggio"_
  41          * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42          * \copyright    (C) 2017-2023 Centro "E.Piaggio". All rights reserved.
  43          */
  44          
  45          
  46          //=================================================================     includes
  47          #include <interruptions.h>
  48          #include <command_processing.h>
  49          #include <globals.h>
  50          #include <utils.h>
  51          
  52          
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 2   

  53          //==============================================================================
  54          //                                                            RS485 RX INTERRUPT
  55          //==============================================================================
  56          // Processing RS-485 data frame:
  57          //
  58          // - 0:     Waits for beginning characters
  59          // - 1:     Waits for ID;
  60          // - 2:     Data length;
  61          // - 3:     Receive all bytes;
  62          // - 4:     Wait for another device end of transmission;
  63          //
  64          //==============================================================================
  65          
  66          CY_ISR(ISR_RS485_RX_ExInterrupt) {
  67   1      
  68   1          // Set RS485 flag
  69   1          
  70   1          interrupt_flag = TRUE;
  71   1           
  72   1      }
  73          
  74          //==============================================================================
  75          //                                                             INTERRUPT MANAGER
  76          //==============================================================================
  77          // Manage interrupt from RS485 
  78          //==============================================================================
  79          // Processing RS-485 data frame:
  80          //
  81          // - WAIT_START:    Waits for beginning characters;
  82          // - WAIT_ID:       Waits for ID;
  83          // - WAIT_LENGTH:   Data length;
  84          // - RECEIVE:       Receive all bytes;
  85          // - UNLOAD:        Wait for another device end of transmission;
  86          //
  87          //==============================================================================
  88          
  89          void interrupt_manager(){
  90   1      
  91   1          
  92   1          //===========================================     local variables definition
  93   1      
  94   1          static uint8 CYDATA state = WAIT_START;                      // state
  95   1          
  96   1          //------------------------------------------------- local data packet
  97   1          static uint8 CYDATA data_packet_index;
  98   1          static uint8 CYDATA data_packet_length;
  99   1          static uint8 data_packet_buffer[128];                     
 100   1          static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 101   1          //-------------------------------------------------
 102   1      
 103   1          uint8 CYDATA    rx_data;                            // RS485 UART rx data
 104   1          CYBIT           rx_data_type;                       // my id?
 105   1          uint8 CYDATA    package_count = 0;                     
 106   1      
 107   1          //======================================================     receive routine
 108   1          
 109   1          // Get data until buffer is not empty 
 110   1          
 111   1          while(UART_RS485_GetRxBufferSize() && (package_count < 6)){  
 112   2              // 6 - estimated maximum number of packets we can read without blocking firmware execution
 113   2              
 114   2              // Get next char
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 3   

 115   2              rx_data = UART_RS485_GetChar();
 116   2              
 117   2              switch (state) {
 118   3                  //-----     wait for frame start     -------------------------------
 119   3                  case WAIT_START:
 120   3                  
 121   3                      rx_queue[0] = rx_queue[1];
 122   3                      rx_queue[1] = rx_queue[2];
 123   3                      rx_queue[2] = rx_data;
 124   3                      
 125   3                      // Check for header configuration package
 126   3                      if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 127   4                          rx_queue[0] = 0;
 128   4                          rx_queue[1] = 0;
 129   4                          rx_queue[2] = 0;
 130   4                          state       = WAIT_ID;                    
 131   4                      }else
 132   3                          if ((rx_queue[0] == 63) &&      //ASCII - ?
 133   3                              (rx_queue[1] == 13) &&      //ASCII - CR
 134   3                              (rx_queue[2] == 10))        //ASCII - LF)
 135   3                              infoGet(INFO_ALL);
 136   3                      break;
 137   3      
 138   3                  //-----     wait for id     ----------------------------------------
 139   3                  case  WAIT_ID:
 140   3      
 141   3                      // packet is for my ID or is broadcast
 142   3                      if (rx_data == c_mem.id || rx_data == 0 || (c_mem.is_myo2_master && master_mode && rx_data
             - == c_mem.SH_ID))
 143   3                          rx_data_type = FALSE;
 144   3                      else                //packet is for others
 145   3                          rx_data_type = TRUE;
 146   3                      
 147   3                      data_packet_length = 0;
 148   3                      state = WAIT_LENGTH;
 149   3                      break;
 150   3      
 151   3                  //-----     wait for length     ------------------------------------
 152   3                  case  WAIT_LENGTH:
 153   3      
 154   3       
 155   3                      data_packet_length = rx_data;
 156   3                      // check validity of pack length
 157   3                      if (data_packet_length <= 1) {
 158   4                          data_packet_length = 0;
 159   4                          state = WAIT_START;
 160   4                      } else if (data_packet_length > 128) {
 161   4                          data_packet_length = 0;
 162   4                          state = WAIT_START;
 163   4                      } else {
 164   4                          data_packet_index = 0;
 165   4                          
 166   4                          if(rx_data_type == FALSE)
 167   4                              state = RECEIVE;          // packet for me or broadcast
 168   4                          else
 169   4                              state = UNLOAD;           // packet for others
 170   4                      }
 171   3                      break;
 172   3      
 173   3                  //-----     receiving     -------------------------------------------
 174   3                  case RECEIVE:
 175   3      
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 4   

 176   3                      data_packet_buffer[data_packet_index] = rx_data;
 177   3                      data_packet_index++;
 178   3                      
 179   3                      // check end of transmission
 180   3                      if (data_packet_index >= data_packet_length) {
 181   4                          // verify if frame ID corresponded to the device ID
 182   4                          if (rx_data_type == FALSE) {
 183   5                              // copying data from buffer to global packet
 184   5                              memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 185   5                              g_rx.length = data_packet_length;
 186   5                              g_rx.ready  = 1;
 187   5                      
 188   5                              commProcess();
 189   5                          }
 190   4                          
 191   4                          data_packet_index  = 0;
 192   4                          data_packet_length = 0;
 193   4                          state = WAIT_START;
 194   4                          package_count++;
 195   4                      
 196   4                      }
 197   3                      break;
 198   3      
 199   3                  //-----     other device is receving     ---------------------------
 200   3                  case UNLOAD:
 201   3                      if (!(--data_packet_length)) {
 202   4                          data_packet_index  = 0;
 203   4                          data_packet_length = 0;
 204   4                          RS485_CTS_Write(1);
 205   4                          RS485_CTS_Write(0);
 206   4                          state              = WAIT_START;
 207   4                          package_count++;
 208   4                      }
 209   3                      break;
 210   3              }
 211   2          }
 212   1      }
 213          //==============================================================================
 214          //                                                            FUNCTION SCHEDULER
 215          //==============================================================================
 216          // Call all the function with the right frequency
 217          //==============================================================================
 218          // Base frequency 1000 Hz
 219          //==============================================================================
 220          
 221          void function_scheduler(void) {
 222   1       
 223   1          static uint16 counter_calibration = DIV_INIT_VALUE;
 224   1      
 225   1          timer_value0 = (uint32)MY_TIMER_ReadCounter();
 226   1      
 227   1          // Start ADC Conversion, SOC = 1
 228   1      
 229   1          ADC_SOC_Write(0x01); 
 230   1          
 231   1          // Check Interrupt 
 232   1      
 233   1          if (interrupt_flag){
 234   2              interrupt_flag = FALSE;
 235   2              interrupt_manager();
 236   2          }
 237   1      
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 5   

 238   1          //---------------------------------- Control Motor
 239   1         
 240   1          motor_control();
 241   1      
 242   1          // Check Interrupt 
 243   1      
 244   1          if (interrupt_flag){
 245   2              interrupt_flag = FALSE;
 246   2              interrupt_manager();
 247   2          }
 248   1      
 249   1          //---------------------------------- Read conversion buffer - LOCK function
 250   1      
 251   1          analog_read_end();
 252   1      
 253   1          if (interrupt_flag){
 254   2              interrupt_flag = FALSE;
 255   2              interrupt_manager();
 256   2          }
 257   1          
 258   1          //---------------------------------- Master Mode
 259   1            
 260   1          if(master_mode){
 261   2              
 262   2              if (c_mem.is_myo2_master){
 263   3                  
 264   3                  // Rest position check (only if Master mode is enabled)
 265   3                  if (c_mem.rest_position_flag == TRUE){
 266   4                      if (counter_calibration == CALIBRATION_DIV) {
 267   5                          
 268   5                              // Read Measure (valid since this routine is enabled only in Master mode)
 269   5                              if (c_mem.is_force_fb_present || c_mem.is_proprio_fb_present){
 270   6                                  curr_pos_res = SH_current_position;
 271   6                              } 
 272   5                              else {
 273   6                                  curr_pos_res = (int32)commReadMeasFromSH();
 274   6                              }
 275   5                                  
 276   5      
 277   5                              check_rest_position();
 278   5                              counter_calibration = 0;
 279   5                      }
 280   4                      counter_calibration++;
 281   4      
 282   4                      // Check Interrupt     
 283   4                      if (interrupt_flag){
 284   5                          interrupt_flag = FALSE;
 285   5                          interrupt_manager();
 286   5                      }
 287   4                  }
 288   3                  
 289   3                  drive_SH();  
 290   3                  
 291   3                  // Check Interrupt     
 292   3                  if (interrupt_flag){
 293   4                      interrupt_flag = FALSE;
 294   4                      interrupt_manager();
 295   4                  }
 296   3              }
 297   2                      
 298   2              if (c_mem.is_force_fb_present){
 299   3                  
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 6   

 300   3                  if (c_mem.is_proprio_fb_present && c_mem.ForceF_ID == c_mem.ProprioF_ID){
 301   4                      drive_force_proprio_fb();
 302   4                  }
 303   3                  else {
 304   4                      drive_force_fb(); 
 305   4                  }
 306   3                  
 307   3                  // Check Interrupt     
 308   3                  if (interrupt_flag){
 309   4                      interrupt_flag = FALSE;
 310   4                      interrupt_manager();
 311   4                  }
 312   3                  
 313   3              }
 314   2              
 315   2              if (c_mem.is_proprio_fb_present){
 316   3                  
 317   3                  if (!(c_mem.is_force_fb_present && c_mem.ForceF_ID == c_mem.ProprioF_ID)) {
 318   4                      drive_proprio_fb();
 319   4                  }
 320   3                  
 321   3                  // Check Interrupt     
 322   3                  if (interrupt_flag){
 323   4                      interrupt_flag = FALSE;
 324   4                      interrupt_manager();
 325   4                  }
 326   3              }
 327   2              
 328   2              if (c_mem.is_vibrotactile_fb_present){
 329   3                  
 330   3                  drive_vibrotactile_fb();
 331   3                  
 332   3                  
 333   3                  // Check Interrupt     
 334   3                  if (interrupt_flag){
 335   4                      interrupt_flag = FALSE;
 336   4                      interrupt_manager();
 337   4                  }
 338   3              }
 339   2          }
 340   1                  
 341   1          // Check Interrupt 
 342   1          
 343   1          if (interrupt_flag){
 344   2              interrupt_flag = FALSE;
 345   2              interrupt_manager();
 346   2          }
 347   1      
 348   1          //---------------------------------- Calibration 
 349   1      
 350   1          // Divider 10, freq = 500 Hz
 351   1          if (calib.enabled == TRUE) {
 352   2              if (counter_calibration == CALIBRATION_DIV) {
 353   3                  calibration();
 354   3                  counter_calibration = 0;
 355   3              }
 356   2              counter_calibration++;
 357   2          }
 358   1      
 359   1          // Check Interrupt 
 360   1          
 361   1          if (interrupt_flag){
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 7   

 362   2              interrupt_flag = FALSE;
 363   2              interrupt_manager();
 364   2          }
 365   1          
 366   1          
 367   1          //---------------------------------- Update States
 368   1          
 369   1          // Load k-1 state
 370   1          memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 371   1          memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 372   1      
 373   1          // Load k+1 state
 374   1          memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 375   1      
 376   1          if (interrupt_flag){
 377   2              interrupt_flag = FALSE;
 378   2              interrupt_manager();
 379   2          }
 380   1      
 381   1          timer_value = (uint32)MY_TIMER_ReadCounter();
 382   1          MY_TIMER_WriteCounter(5000000);
 383   1      
 384   1      }
 385          
 386          //==============================================================================
 387          //                                                                MOTORS CONTROL
 388          //==============================================================================
 389          
 390          void motor_control() {
 391   1      
 392   1          int32 CYDATA handle_value;
 393   1      
 394   1          int32 CYDATA err_emg_1, err_emg_2;
 395   1          float CYDATA joy_perc;
 396   1      
 397   1          // Static Variables
 398   1          static uint8 current_emg = 0;   // 0 NONE
 399   1                                          // 1 EMG 1
 400   1                                          // 2 EMG 2
 401   1                                          // wait for both to get down
 402   1      
 403   1          err_emg_1 = g_meas.emg[0] - c_mem.emg_threshold[0];
 404   1          err_emg_2 = g_meas.emg[1] - c_mem.emg_threshold[1];
 405   1          
 406   1          // =========================== POSITION INPUT ==============================
 407   1          switch(c_mem.input_mode) {
 408   2      
 409   2              case INPUT_MODE_ENCODER3:
 410   2      
 411   2                  if (master_mode) {
 412   3                      // The only attached encoder is the handle lever
 413   3                      handle_value = g_meas.pos[0] * c_mem.motor_handle_ratio;
 414   3                  }
 415   2                  else {
 416   3                      // Like other firmwares working
 417   3                      // Calculate handle value based on position of handle in the
 418   3                      // sensor chain and multiplication factor between handle and motor position
 419   3                      handle_value = 0;
 420   3                  }
 421   2      
 422   2                  // Read handle and use it as reference for the motor
 423   2                  if (((handle_value - g_ref.pos[0]) > c_mem.max_step_pos) && (c_mem.max_step_pos != 0))
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 8   

 424   2                      g_ref.pos[0] += c_mem.max_step_pos;
 425   2                  else {
 426   3                      if (((handle_value - g_ref.pos[0]) < c_mem.max_step_neg) && (c_mem.max_step_neg != 0))
 427   3                          g_ref.pos[0] += c_mem.max_step_neg;
 428   3                      else
 429   3                          g_ref.pos[0] = handle_value;
 430   3                  }
 431   2                  break;
 432   2      
 433   2              case INPUT_MODE_EMG_PROPORTIONAL:
 434   2                  if (err_emg_1 > 0)
 435   2                      g_ref.pos[0] = (err_emg_1 * g_mem.pos_lim_sup[0]) / (1024 - c_mem.emg_threshold[0]);
 436   2                  else
 437   2                      g_ref.pos[0] = 0;
 438   2                  break;
 439   2      
 440   2              case INPUT_MODE_EMG_INTEGRAL:
 441   2                  g_ref.pos[0] = g_refOld.pos[0];
 442   2                  if (err_emg_1 > 0) {
 443   3                      g_ref.pos[0] = g_refOld.pos[0] + (err_emg_1 * (int)g_mem.emg_speed * 2) / (1024 - c_mem.em
             -g_threshold[0]);
 444   3                  }
 445   2                  if (err_emg_2 > 0) {
 446   3                      g_ref.pos[0] = g_refOld.pos[0] - (err_emg_2 * (int)g_mem.emg_speed * 2) / (1024 - c_mem.em
             -g_threshold[1]);
 447   3                  }
 448   2                  break;
 449   2      
 450   2              case INPUT_MODE_EMG_FCFS:
 451   2                  g_ref.pos[0] = g_refOld.pos[0];
 452   2                  switch (current_emg) {
 453   3                      case 0:
 454   3                          // Look for the first EMG passing the threshold
 455   3                          if (err_emg_1 > 0) {
 456   4                              current_emg = 1;
 457   4                              break;
 458   4                          }
 459   3                          if (err_emg_2 > 0) {
 460   4                              current_emg = 2;
 461   4                              break;
 462   4                          }
 463   3                          break;
 464   3      
 465   3                      case 1:
 466   3                          // EMG 1 is first
 467   3                          if (err_emg_1 < 0) {
 468   4                              current_emg = 0;
 469   4                              break;
 470   4                          }
 471   3                          g_ref.pos[0] = g_refOld.pos[0] + (err_emg_1 * g_mem.emg_speed * 2) / (1024 - c_mem.emg
             -_threshold[0]);
 472   3                          break;
 473   3      
 474   3                      case 2:
 475   3                          // EMG 2 is first
 476   3                          if (err_emg_2 < 0) {
 477   4                              current_emg = 0;
 478   4                              break;
 479   4                          }
 480   3                          g_ref.pos[0] = g_refOld.pos[0] - (err_emg_2 * g_mem.emg_speed * 2) / (1024 - c_mem.emg
             -_threshold[1]);
 481   3                          break;
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 9   

 482   3      
 483   3                      default:
 484   3                          break;
 485   3                  }
 486   2      
 487   2                  break;
 488   2      
 489   2              case INPUT_MODE_EMG_FCFS_ADV:
 490   2                  g_ref.pos[0] = g_refOld.pos[0];
 491   2                  switch (current_emg) {
 492   3                      // Look for the first EMG passing the threshold
 493   3                      case 0:
 494   3                          if (err_emg_1 > 0) {
 495   4                              current_emg = 1;
 496   4                              break;
 497   4                          }
 498   3                          if (err_emg_2 > 0) {
 499   4                              current_emg = 2;
 500   4                              break;
 501   4                          }
 502   3                          break;
 503   3      
 504   3                      // EMG 1 is first
 505   3                      case 1:
 506   3                          // If both signals are under threshold go back to status 0
 507   3                          if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 508   4                              current_emg = 0;
 509   4                              break;
 510   4                          }
 511   3                          // but if the current signal come back over threshold, continue using it
 512   3                          if (err_emg_1 > 0) 
 513   3                              g_ref.pos[0] = g_refOld.pos[0] + (err_emg_1 * g_mem.emg_speed << 2) / (1024 - c_me
             -m.emg_threshold[0]);
 514   3                          
 515   3                          break;
 516   3      
 517   3                      // EMG 2 is first
 518   3                      case 2:
 519   3                          // If both signals are under threshold go back to status 0
 520   3                          if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 521   4                              current_emg = 0;
 522   4                              break;
 523   4                          }
 524   3                          // but if the current signal come back over threshold, continue using it
 525   3                          if (err_emg_2 > 0) {
 526   4                              g_ref.pos[0] = g_refOld.pos[0] - (err_emg_2 * c_mem.emg_speed << 2) / (1024 - c_me
             -m.emg_threshold[1]);
 527   4                          }
 528   3                          break;
 529   3      
 530   3                      default:
 531   3                          break;
 532   3                  }
 533   2        
 534   2                  break;
 535   2                  
 536   2              case INPUT_MODE_JOYSTICK:
 537   2                  
 538   2                  joy_perc = (float)(g_meas.joystick[0])/((float)c_mem.joystick_gain/2);            
 539   2                  g_ref.pos[0] = g_refOld.pos[0] + c_mem.joystick_closure_speed * joy_perc;         
 540   2              
 541   2                  break;
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 10  

 542   2              default:
 543   2                  break;
 544   2          }
 545   1      
 546   1          // Position limit saturation
 547   1          if (c_mem.pos_lim_flag) {
 548   2              if (g_ref.pos[0] < c_mem.pos_lim_inf[0]) 
 549   2                  g_ref.pos[0] = c_mem.pos_lim_inf[0];
 550   2              if (g_ref.pos[0] > c_mem.pos_lim_sup[0]) 
 551   2                  g_ref.pos[0] = c_mem.pos_lim_sup[0];
 552   2          }
 553   1      
 554   1          if (c_mem.rest_position_flag == TRUE) {
 555   2              if (rest_enabled == 1){
 556   3                  // Change position reference to drive motor to rest position smoothly
 557   3                  g_ref.pos[0] = rest_pos_curr_ref;
 558   3              }
 559   2              
 560   2              if (forced_open == 1) {
 561   3                  // Open the SoftHand as EMG PROPORTIONAL input mode 
 562   3                  if (err_emg_2 > 0)
 563   3                      g_ref.pos[0] = g_mem.rest_pos - (err_emg_2 * g_mem.rest_pos) / (1024 - c_mem.emg_threshold
             -[1]);
 564   3                  else {
 565   4                      g_ref.pos[0] = g_mem.rest_pos;
 566   4                      forced_open = 0;
 567   4                  }
 568   3              }
 569   2          }
 570   1      }
 571          
 572          //==============================================================================
 573          //                                                           ANALOG MEASUREMENTS
 574          //==============================================================================
 575          
 576          void analog_read_end() {
 577   1      
 578   1          /* =========================================================================
 579   1          /   Ideal formulation to calculate tension and current
 580   1          /
 581   1          /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
 582   1          /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
 583   1          /
 584   1          /   Definition:
 585   1          /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
 586   1          /   offset = 2000 -> hardware amplifier bias in mV
 587   1          /   gain = 8.086 -> amplifier gain
 588   1          /   resistor = 18 -> resistor of voltage divider in KOhm 
 589   1          /
 590   1          /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
 591   1          /   and offset unit of measurment is counts, instead dev_tension and
 592   1          /   g_meas.curr[] are converted in properly unit.
 593   1          /  =========================================================================
 594   1          */
 595   1      
 596   1          int32 CYDATA i_aux;
 597   1      
 598   1          static emg_status CYDATA emg_1_status = RESET; 
 599   1          static emg_status CYDATA emg_2_status = RESET;                                             
 600   1          
 601   1          static joystick_status CYDATA UD_status = RESET;
 602   1          static joystick_status CYDATA LR_status = RESET;                                          
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 11  

 603   1      
 604   1          static uint16 CYDATA UD_counter = 0;
 605   1          static uint16 CYDATA LR_counter = 0;
 606   1          
 607   1          static int32 CYDATA UD_mean_value;
 608   1          static int32 CYDATA LR_mean_value;
 609   1              
 610   1          static uint16 emg_counter_1 = 0;
 611   1          static uint16 emg_counter_2 = 0;
 612   1          static uint8 count = 0;
 613   1          static uint32 count2 = 0;
 614   1          
 615   1        //  static uint8 first_tension_valid = TRUE;
 616   1      
 617   1          // Wait for conversion end
 618   1          
 619   1          while(!ADC_STATUS_Read()){
 620   2              if (interrupt_flag){
 621   3                  interrupt_flag = FALSE;
 622   3                  interrupt_manager();
 623   3              }
 624   2          }
 625   1          
 626   1          // Convert tension read
 627   1          dev_tension = ((int32)(ADC_buf[0] - 1638) * 1952) >> 7;
 628   1          
 629   1          if (interrupt_flag){
 630   2              interrupt_flag = FALSE;
 631   2              interrupt_manager();
 632   2          }
 633   1              
 634   1          if (first_tension_valid && tension_valid) {
 635   2              count = count + 1;
 636   2              
 637   2              if (count == 1000){
 638   3                  if (dev_tension < 9000) {   // 8 V case
 639   4                      pow_tension = 8000;
 640   4                  }
 641   3                  else {      // 12 V - 24 V cases
 642   4                      if (dev_tension < 13000) {
 643   5                          pow_tension = 12000;
 644   5                      }
 645   4                      else
 646   4                          pow_tension = 24000;
 647   4                  }
 648   3      
 649   3                  first_tension_valid = FALSE;
 650   3              }
 651   2          }
 652   1      
 653   1          // Until there is no valid input tension repeat this measurement
 654   1          
 655   1          if (dev_tension > 7000) {       //at least > 7.36 V (92% of 8 V) that is minimum charge of smallest ba
             -ttery
 656   2              // Set tension valid bit to TRUE
 657   2      
 658   2              if (count2 == 1000){
 659   3                  tension_valid = TRUE;   
 660   3              }
 661   2              else {                      // wait for battery voltage stabilization
 662   3                  count2 = count2 + 1;
 663   3                  dev_tension_f = filter_voltage(dev_tension);
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 12  

 664   3              }
 665   2      
 666   2              // Check Interrupt 
 667   2          
 668   2              if (interrupt_flag){
 669   3                  interrupt_flag = FALSE;
 670   3                  interrupt_manager();
 671   3              }
 672   2      
 673   2              // if calibration is not needed go to "normal execution"
 674   2              if (!g_mem.emg_calibration_flag){
 675   3                  emg_1_status = NORMAL; // normal execution
 676   3                  emg_2_status = NORMAL; // normal execution
 677   3              }
 678   2      
 679   2              // State machines for EMG or Joystick reading
 680   2              if (c_mem.input_mode == INPUT_MODE_JOYSTICK) {
 681   3                  // Read ADC_buf[2] and ADC_buf[3] as JOYSTICK analog inputs
 682   3                  
 683   3                  // Joystick UD    
 684   3                  switch (UD_status) {
 685   4                      case NORMAL:
 686   4                          i_aux = ADC_buf[2];
 687   4                          // Remap the analog reading from -1024 to 1024.  
 688   4                          i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * g_mem.joystick_ga
             -in); 
 689   4                          
 690   4                          if (interrupt_flag){
 691   5                              interrupt_flag = FALSE;
 692   5                              interrupt_manager();
 693   5                          }
 694   4      
 695   4                          //Saturation
 696   4                          if (i_aux < -1024) 
 697   4                              i_aux = -1024;
 698   4                          if (i_aux > 1024)
 699   4                              i_aux = 1024;
 700   4      
 701   4                          g_meas.joystick[1] = (int16) i_aux;
 702   4      
 703   4                          if (interrupt_flag){
 704   5                              interrupt_flag = FALSE;
 705   5                              interrupt_manager();
 706   5                          }
 707   4      
 708   4                      break;
 709   4      
 710   4                      case RESET: // reset variables
 711   4                          UD_counter = 0;
 712   4                          UD_mean_value = 0;
 713   4                          UD_status = WAIT; // go to waiting status
 714   4      
 715   4                      break;
 716   4      
 717   4                      case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
 718   4                          UD_counter++;
 719   4                          if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 720   5                              UD_counter = 0;                     // reset counter
 721   5      
 722   5                              if (interrupt_flag){
 723   6                                  interrupt_flag = FALSE;
 724   6                                  interrupt_manager();
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 13  

 725   6                              }
 726   5      
 727   5                              UD_status = SUM_AND_MEAN;           // sum and mean status
 728   5                          }
 729   4      
 730   4                      break;
 731   4      
 732   4                      case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
 733   4                          // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
 734   4                          UD_counter++;
 735   4                          UD_mean_value += ADC_buf[2];
 736   4      
 737   4                          if (interrupt_flag){
 738   5                              interrupt_flag = FALSE;
 739   5                              interrupt_manager();
 740   5                          }
 741   4      
 742   4                          if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 743   5                              UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 744   5      
 745   5                              if (interrupt_flag){
 746   6                                  interrupt_flag = FALSE;
 747   6                                  interrupt_manager();
 748   6                              }
 749   5      
 750   5                              UD_counter = 0;          // reset counter
 751   5                              UD_status = NORMAL;           // goto normal execution
 752   5                          }
 753   4                      break;
 754   4      
 755   4                      case WAIT: // wait for both EMG calibrations to be done
 756   4                          if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 757   4                              UD_status = DISCARD;           // goto discard sample
 758   4                      break;
 759   4                  }
 760   3                  
 761   3                  if (interrupt_flag){
 762   4                      interrupt_flag = FALSE;
 763   4                      interrupt_manager();
 764   4                  }
 765   3                  // Joystick LR
 766   3                  switch (LR_status) {
 767   4                      case NORMAL:
 768   4                          i_aux = ADC_buf[3];
 769   4      
 770   4                          i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * g_mem.joystick_ga
             -in); 
 771   4                          
 772   4                          if (interrupt_flag){
 773   5                              interrupt_flag = FALSE;
 774   5                              interrupt_manager();
 775   5                          }
 776   4      
 777   4                          //Saturation
 778   4                          if (i_aux < -1024)
 779   4                              i_aux = -1024;
 780   4                          if (i_aux > 1024)
 781   4                              i_aux = 1024;
 782   4      
 783   4                          if (interrupt_flag){
 784   5                              interrupt_flag = FALSE;
 785   5                              interrupt_manager();
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 14  

 786   5                          }
 787   4      
 788   4                          g_meas.joystick[0] = (int16) i_aux;
 789   4      
 790   4                      break;
 791   4      
 792   4                      case RESET: // reset variables
 793   4                          LR_counter = 0;
 794   4                          LR_mean_value = 0;
 795   4                          LR_status = WAIT; // goes waiting for all conversions to be done
 796   4                      break;
 797   4      
 798   4                      case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
 799   4                          LR_counter++;
 800   4                          if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 801   5                              LR_counter = 0;                     // reset counter
 802   5      
 803   5                              if (interrupt_flag){
 804   6                                  interrupt_flag = FALSE;
 805   6                                  interrupt_manager();
 806   6                              }
 807   5      
 808   5                              LR_status = SUM_AND_MEAN;           // sum and mean status
 809   5                          }
 810   4                      break;
 811   4      
 812   4                      case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
 813   4                          // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
 814   4                          LR_counter++;
 815   4                          LR_mean_value += ADC_buf[3];
 816   4                          if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 817   5                              LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 818   5                              
 819   5                              if (interrupt_flag){
 820   6                                  interrupt_flag = FALSE;
 821   6                                  interrupt_manager();
 822   6                              }
 823   5      
 824   5                              LR_counter = 0;               // reset counter
 825   5                              LR_status = NORMAL;           // goto normal execution
 826   5                          }
 827   4                      break;
 828   4      
 829   4                      case WAIT:
 830   4                          if(emg_1_status == NORMAL && emg_2_status == NORMAL && UD_status == NORMAL)
 831   4                              LR_status = DISCARD;
 832   4                      break;
 833   4                  }
 834   3      
 835   3                  if (interrupt_flag){
 836   4                      interrupt_flag = FALSE;
 837   4                      interrupt_manager();
 838   4                  }
 839   3                  
 840   3              } 
 841   2              else {
 842   3                  // Read ADC_buf[2] and ADC_buf[3] as EMGs
 843   3                  
 844   3                  // EMG 1 calibration state machine
 845   3              
 846   3                  // Calibration state machine
 847   3                  switch(emg_1_status) {
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 15  

 848   4                      case NORMAL: // normal execution
 849   4                          i_aux = (int32)ADC_buf[2];
 850   4                          if (i_aux < 0) 
 851   4                              i_aux = 0;
 852   4                          i_aux = filter_ch1(i_aux);
 853   4                          i_aux = (i_aux << 10) / g_mem.emg_max_value[0];
 854   4              
 855   4                          if (interrupt_flag){
 856   5                              interrupt_flag = FALSE;
 857   5                              interrupt_manager();
 858   5                          }
 859   4                          //Saturation
 860   4                          if (i_aux < 0)
 861   4                              i_aux = 0;
 862   4                          else
 863   4                              if (i_aux > 1024) 
 864   4                                  i_aux = 1024;
 865   4                          
 866   4                          g_meas.emg[0] = i_aux;
 867   4              
 868   4                          if (interrupt_flag){
 869   5                              interrupt_flag = FALSE;
 870   5                              interrupt_manager();
 871   5                          }
 872   4                          
 873   4                          break;
 874   4      
 875   4                      case RESET: // reset variables
 876   4                          emg_counter_1 = 0;
 877   4                          g_mem.emg_max_value[0] = 0;
 878   4                          emg_1_status = DISCARD; // goto next status
 879   4                          
 880   4                          break;
 881   4      
 882   4                      case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
 883   4                          emg_counter_1++;
 884   4                          if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 885   5                              emg_counter_1 = 0;          // reset counter
 886   5                              
 887   5                              LED_CTRL_Write(1);
 888   5                              LED_BLINK_EN_Write(0);
 889   5                                  
 890   5                              if (interrupt_flag){
 891   6                                  interrupt_flag = FALSE;
 892   6                                  interrupt_manager();
 893   6                              }
 894   5                              
 895   5                              emg_1_status = SUM_AND_MEAN;           // sum and mean status
 896   5                          }
 897   4                          break;
 898   4      
 899   4                      case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
 900   4                          // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
 901   4                          emg_counter_1++;
 902   4                          if (ADC_buf[2] < 0) 
 903   4                              ADC_buf[2] = 0;
 904   4                          g_mem.emg_max_value[0] += filter_ch1((int32)ADC_buf[2]);
 905   4                          
 906   4                          if (interrupt_flag){
 907   5                              interrupt_flag = FALSE;
 908   5                              interrupt_manager();
 909   5                          }
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 16  

 910   4                          
 911   4                          if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 912   5                              g_mem.emg_max_value[0] = g_mem.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // calc me
             -an
 913   5              
 914   5                              if (interrupt_flag){
 915   6                                  interrupt_flag = FALSE;
 916   6                                  interrupt_manager();
 917   6                              }                    
 918   5                              
 919   5                              LED_CTRL_Write(0);
 920   5                              LED_BLINK_EN_Write(0);
 921   5                              
 922   5                              emg_counter_1 = 0;          // reset counter
 923   5      
 924   5                              emg_1_status = NORMAL;           // goto normal execution
 925   5                          }
 926   4                          break;
 927   4      
 928   4                      default:
 929   4                          break;
 930   4                  }
 931   3              
 932   3                  if (interrupt_flag){
 933   4                      interrupt_flag = FALSE;
 934   4                      interrupt_manager();
 935   4                  }
 936   3                  // EMG 2 calibration state machine
 937   3                  switch(emg_2_status) {
 938   4                      case NORMAL: // normal execution
 939   4                          i_aux = (int32)ADC_buf[3];
 940   4                          if (i_aux < 0)
 941   4                              i_aux = 0;
 942   4                          i_aux = filter_ch2(i_aux);
 943   4                          i_aux = (i_aux << 10) / g_mem.emg_max_value[1];
 944   4              
 945   4                          if (interrupt_flag){
 946   5                              interrupt_flag = FALSE;
 947   5                              interrupt_manager();
 948   5                          }
 949   4                          
 950   4                          if (i_aux < 0) 
 951   4                              i_aux = 0;
 952   4                          else
 953   4                              if (i_aux > 1024)
 954   4                                  i_aux = 1024;
 955   4                          
 956   4                          g_meas.emg[1] = i_aux;
 957   4      
 958   4                          break;
 959   4      
 960   4                      case RESET: // reset variables
 961   4                          emg_counter_2 = 0;
 962   4                          g_mem.emg_max_value[1] = 0;
 963   4              
 964   4                          if (interrupt_flag){
 965   5                              interrupt_flag = FALSE;
 966   5                              interrupt_manager();
 967   5                          }
 968   4                          
 969   4                          emg_2_status = WAIT; // wait for EMG 1 calibration
 970   4                          break;
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 17  

 971   4      
 972   4                      case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
 973   4                          emg_counter_2++;
 974   4                          if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 975   5                              emg_counter_2 = 0;          // reset counter
 976   5                              
 977   5                              LED_CTRL_Write(1);
 978   5                              LED_BLINK_EN_Write(0);
 979   5              
 980   5                              if (interrupt_flag){
 981   6                                  interrupt_flag = FALSE;
 982   6                                  interrupt_manager();
 983   6                              }
 984   5                              
 985   5                              emg_2_status = SUM_AND_MEAN;           // sum and mean status
 986   5                          }
 987   4                          break;
 988   4      
 989   4                      case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
 990   4                          // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
 991   4                          emg_counter_2++;
 992   4                          if (ADC_buf[3] < 0)
 993   4                              ADC_buf[3] = 0;
 994   4                          g_mem.emg_max_value[1] += filter_ch2((int32)ADC_buf[3]);
 995   4              
 996   4                          if (interrupt_flag){
 997   5                              interrupt_flag = FALSE;
 998   5                              interrupt_manager();
 999   5                          }
1000   4                          
1001   4                          if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
1002   5                              g_mem.emg_max_value[1] = g_mem.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // calc me
             -an
1003   5                              
1004   5                              LED_CTRL_Write(0);
1005   5                              LED_BLINK_EN_Write(0);
1006   5                              
1007   5                              emg_counter_2 = 0;          // reset counter
1008   5                          
1009   5                              if (interrupt_flag){
1010   6                                  interrupt_flag = FALSE;
1011   6                                  interrupt_manager();
1012   6                              }
1013   5                              
1014   5                              emg_2_status = WAIT_EoC;           // goto end of calibration wait
1015   5                          }
1016   4                          break;
1017   4      
1018   4                      case WAIT: // wait for EMG calibration to be done
1019   4                          if (emg_1_status == NORMAL)
1020   4                              emg_2_status = DISCARD;           // goto discard sample
1021   4                          break;
1022   4      
1023   4                      case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
1024   4                          emg_counter_2++;
1025   4                          if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
1026   5                              emg_counter_2 = 0;          // reset counter
1027   5      
1028   5                              if (interrupt_flag){
1029   6                                  interrupt_flag = FALSE;
1030   6                                  interrupt_manager();
1031   6                              }
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 18  

1032   5                              
1033   5                              // if EMG control mode active, activate motors accordingly with startup value
1034   5                              if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
1035   5                                  (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
1036   5                                  (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
1037   5                                  (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
1038   6                                  g_ref.pos[0] = g_meas.pos[0];
1039   6                                  g_ref.pos[1] = g_meas.pos[1];
1040   6                              }
1041   5                                  
1042   5                              emg_2_status = NORMAL;           // goto normal execution
1043   5                          }
1044   4                          break;
1045   4                          
1046   4                      default:
1047   4                          break;
1048   4                  }
1049   3                      
1050   3                  if (interrupt_flag){
1051   4                      interrupt_flag = FALSE;
1052   4                      interrupt_manager();
1053   4                  }
1054   3              }
1055   2          }
1056   1          else {
1057   2      
1058   2              emg_1_status = RESET; 
1059   2              emg_2_status = RESET;
1060   2      
1061   2              UD_status = RESET;
1062   2              LR_status = RESET;
1063   2                      
1064   2              tension_valid = FALSE;
1065   2              
1066   2              //fixed
1067   2              LED_CTRL_Write(1);
1068   2              //PWM Blink Enable
1069   2              LED_BLINK_EN_Write(0);
1070   2                  
1071   2              if (interrupt_flag){
1072   3                  interrupt_flag = FALSE;
1073   3                  interrupt_manager();
1074   3              }
1075   2              
1076   2              if (c_mem.emg_calibration_flag) {
1077   3                  if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
1078   3                      (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
1079   3                      (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
1080   3                      (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
1081   4                  }
1082   3              }
1083   2      
1084   2              // Reset emg
1085   2              g_meas.emg[0] = 0;
1086   2              g_meas.emg[1] = 0;
1087   2              
1088   2              // Reset Joystick
1089   2              g_meas.joystick[0] = 0;
1090   2              g_meas.joystick[1] = 0;
1091   2      
1092   2          }
1093   1          
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 19  

1094   1          // The board LED blinks if attached battery is not fully charged
1095   1          if (!first_tension_valid && tension_valid == TRUE && emg_1_status == NORMAL && emg_2_status == NORMAL)
             -{
1096   2              dev_tension_f = filter_voltage(dev_tension);
1097   2              if (dev_tension_f > 0.9 * pow_tension){     //0.9*12000 mV = 10800 mV
1098   3                  //fixed
1099   3                  LED_CTRL_Write(1);
1100   3                  
1101   3                  //PWM Blink Enable
1102   3                  LED_BLINK_EN_Write(0);
1103   3              }
1104   2              else {
1105   3                  // blink
1106   3                  LED_CTRL_Write(0);
1107   3                  
1108   3                  //PWM Blink Enable
1109   3                  LED_BLINK_EN_Write(1);
1110   3                  
1111   3                  // Disable slave or motors because of not fully charged battery
1112   3                  if (master_mode) {
1113   4                      deactivate_slaves();
1114   4                      
1115   4                      // Check Interrupt 
1116   4                      if (interrupt_flag){
1117   5                          interrupt_flag = FALSE;
1118   5                          interrupt_manager();
1119   5                      }
1120   4                      
1121   4                      master_mode = 0;        // exit from master mode
1122   4                  }
1123   3              }
1124   2          }
1125   1              
1126   1          if (interrupt_flag){
1127   2              interrupt_flag = FALSE;
1128   2              interrupt_manager();
1129   2          }
1130   1      }
1131          
1132          /* [] END OF FILE */
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 20  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ISR_RS485_RX_ExInterrupt (BEGIN)
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 70
0000 D200        E     SETB    interrupt_flag
                                           ; SOURCE LINE # 72
0002 32                RETI    
             ; FUNCTION ISR_RS485_RX_ExInterrupt (END)

             ; FUNCTION interrupt_manager (BEGIN)
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 105
0000 E4                CLR     A
0001 F500        R     MOV     package_count,A
0003         ?C0002:
                                           ; SOURCE LINE # 111
0003 120000      E     LCALL   UART_RS485_GetRxBufferSize
0006 EF                MOV     A,R7
0007 7003              JNZ     $ + 5H
0009 020000      R     LJMP    ?C0025
000C E500        R     MOV     A,package_count
000E C3                CLR     C
000F 9406              SUBB    A,#06H
0011 4003              JC      $ + 5H
0013 020000      R     LJMP    ?C0025
                                           ; SOURCE LINE # 115
0016 120000      E     LCALL   UART_RS485_GetChar
0019 8F00        R     MOV     rx_data,R7
                                           ; SOURCE LINE # 117
001B E500        R     MOV     A,state
001D 14                DEC     A
001E 6049              JZ      ?C0009
0020 14                DEC     A
0021 6074              JZ      ?C0013
0023 14                DEC     A
0024 7003              JNZ     $ + 5H
0026 020000      R     LJMP    ?C0020
0029 14                DEC     A
002A 7003              JNZ     $ + 5H
002C 020000      R     LJMP    ?C0023
002F 2404              ADD     A,#04H
0031 70D0              JNZ     ?C0002
                                           ; SOURCE LINE # 119
0033         ?C0005:
                                           ; SOURCE LINE # 121
0033 850000      R     MOV     rx_queue,rx_queue+01H
                                           ; SOURCE LINE # 122
0036 850000      R     MOV     rx_queue+01H,rx_queue+02H
                                           ; SOURCE LINE # 123
0039 850000      R     MOV     rx_queue+02H,rx_data
                                           ; SOURCE LINE # 126
003C E500        R     MOV     A,rx_queue+01H
003E B43A11            CJNE    A,#03AH,?C0006
0041 E500        R     MOV     A,rx_queue+02H
0043 B43A0C            CJNE    A,#03AH,?C0006
                                           ; SOURCE LINE # 127
0046 E4                CLR     A
0047 F500        R     MOV     rx_queue,A
                                           ; SOURCE LINE # 128
0049 F500        R     MOV     rx_queue+01H,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 21  

                                           ; SOURCE LINE # 129
004B F500        R     MOV     rx_queue+02H,A
                                           ; SOURCE LINE # 130
004D 750001      R     MOV     state,#01H
                                           ; SOURCE LINE # 131
0050 80B1              SJMP    ?C0002
0052         ?C0006:
                                           ; SOURCE LINE # 132
0052 E500        R     MOV     A,rx_queue
0054 B43FAC            CJNE    A,#03FH,?C0002
0057 E500        R     MOV     A,rx_queue+01H
0059 B40DA7            CJNE    A,#0DH,?C0002
005C E500        R     MOV     A,rx_queue+02H
005E 640A              XRL     A,#0AH
0060 70A1              JNZ     ?C0002
                                           ; SOURCE LINE # 135
0062 FF                MOV     R7,A
0063 FE                MOV     R6,A
0064 120000      E     LCALL   _infoGet
                                           ; SOURCE LINE # 136
0067 809A              SJMP    ?C0002
                                           ; SOURCE LINE # 139
0069         ?C0009:
                                           ; SOURCE LINE # 142
0069 900000      E     MOV     DPTR,#c_mem+01H
006C E0                MOVX    A,@DPTR
006D 6500        R     XRL     A,rx_data
006F 6017              JZ      ?C0011
0071 E500        R     MOV     A,rx_data
0073 6013              JZ      ?C0011
0075 900000      E     MOV     DPTR,#c_mem+057H
0078 E0                MOVX    A,@DPTR
0079 6011              JZ      ?C0010
007B 900000      E     MOV     DPTR,#master_mode
007E E0                MOVX    A,@DPTR
007F 600B              JZ      ?C0010
0081 900000      E     MOV     DPTR,#c_mem+068H
0084 E0                MOVX    A,@DPTR
0085 B50004            CJNE    A,rx_data,?C0010
0088         ?C0011:
                                           ; SOURCE LINE # 143
0088 C200        R     CLR     rx_data_type
008A 8002              SJMP    ?C0012
008C         ?C0010:
                                           ; SOURCE LINE # 145
008C D200        R     SETB    rx_data_type
008E         ?C0012:
                                           ; SOURCE LINE # 147
008E E4                CLR     A
008F F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 148
0091 750002      R     MOV     state,#02H
                                           ; SOURCE LINE # 149
0094 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 152
0097         ?C0013:
                                           ; SOURCE LINE # 155
0097 850000      R     MOV     data_packet_length,rx_data
                                           ; SOURCE LINE # 157
009A E500        R     MOV     A,data_packet_length
009C D3                SETB    C
009D 9401              SUBB    A,#01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 22  

009F 5008              JNC     ?C0014
                                           ; SOURCE LINE # 158
00A1 E4                CLR     A
00A2 F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 159
00A4 F500        R     MOV     state,A
                                           ; SOURCE LINE # 160
00A6 020000      R     LJMP    ?C0002
00A9         ?C0014:
00A9 E500        R     MOV     A,data_packet_length
00AB D3                SETB    C
00AC 9480              SUBB    A,#080H
00AE 4008              JC      ?C0016
                                           ; SOURCE LINE # 161
00B0 E4                CLR     A
00B1 F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 162
00B3 F500        R     MOV     state,A
                                           ; SOURCE LINE # 163
00B5 020000      R     LJMP    ?C0002
00B8         ?C0016:
                                           ; SOURCE LINE # 164
00B8 E4                CLR     A
00B9 F500        R     MOV     data_packet_index,A
                                           ; SOURCE LINE # 166
00BB 200006            JB      rx_data_type,?C0018
                                           ; SOURCE LINE # 167
00BE 750003      R     MOV     state,#03H
00C1 020000      R     LJMP    ?C0002
00C4         ?C0018:
                                           ; SOURCE LINE # 169
00C4 750004      R     MOV     state,#04H
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
00C7 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 174
00CA         ?C0020:
                                           ; SOURCE LINE # 176
00CA 7400        R     MOV     A,#LOW data_packet_buffer
00CC 2500        R     ADD     A,data_packet_index
00CE F582              MOV     DPL,A
00D0 E4                CLR     A
00D1 3400        R     ADDC    A,#HIGH data_packet_buffer
00D3 F583              MOV     DPH,A
00D5 E500        R     MOV     A,rx_data
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
00D8 0500        R     INC     data_packet_index
                                           ; SOURCE LINE # 180
00DA E500        R     MOV     A,data_packet_index
00DC C3                CLR     C
00DD 9500        R     SUBB    A,data_packet_length
00DF 5003              JNC     $ + 5H
00E1 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 182
00E4 200025            JB      rx_data_type,?C0022
                                           ; SOURCE LINE # 184
00E7 AF00        R     MOV     R7,data_packet_length
00E9 7E00              MOV     R6,#00H
00EB 7800        E     MOV     R0,#LOW g_rx
00ED 7C00        E     MOV     R4,#HIGH g_rx
00EF 7D01              MOV     R5,#01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 23  

00F1 7B01              MOV     R3,#01H
00F3 7A00        R     MOV     R2,#HIGH data_packet_buffer
00F5 7900        R     MOV     R1,#LOW data_packet_buffer
00F7 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 185
00FA 900000      E     MOV     DPTR,#g_rx+080H
00FD E4                CLR     A
00FE F0                MOVX    @DPTR,A
00FF A3                INC     DPTR
0100 E500        R     MOV     A,data_packet_length
0102 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
0103 900000      E     MOV     DPTR,#g_rx+084H
0106 7401              MOV     A,#01H
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
0109 120000      E     LCALL   commProcess
                                           ; SOURCE LINE # 189
010C         ?C0022:
                                           ; SOURCE LINE # 191
010C E4                CLR     A
010D F500        R     MOV     data_packet_index,A
                                           ; SOURCE LINE # 192
010F F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 193
0111 F500        R     MOV     state,A
                                           ; SOURCE LINE # 194
0113 0500        R     INC     package_count
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
0115 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 200
0118         ?C0023:
                                           ; SOURCE LINE # 201
0118 1500        R     DEC     data_packet_length
011A E500        R     MOV     A,data_packet_length
011C 6003              JZ      $ + 5H
011E 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 202
0121 F500        R     MOV     data_packet_index,A
                                           ; SOURCE LINE # 203
0123 F500        R     MOV     data_packet_length,A
                                           ; SOURCE LINE # 204
0125 7F01              MOV     R7,#01H
0127 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 205
012A E4                CLR     A
012B FF                MOV     R7,A
012C 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 206
012F E4                CLR     A
0130 F500        R     MOV     state,A
                                           ; SOURCE LINE # 207
0132 0500        R     INC     package_count
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
0134 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0137 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 212
013A         ?C0025:
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 24  

013A 22                RET     
             ; FUNCTION interrupt_manager (END)

             ; FUNCTION function_scheduler (BEGIN)
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 225
0000 120000      E     LCALL   MY_TIMER_ReadCounter
0003 900000      E     MOV     DPTR,#timer_value0
0006 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 229
0009 7F01              MOV     R7,#01H
000B 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 233
000E 300005            JNB     interrupt_flag,?C0026
                                           ; SOURCE LINE # 234
0011 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 235
0013 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 236
0016         ?C0026:
                                           ; SOURCE LINE # 240
0016 120000      R     LCALL   motor_control
                                           ; SOURCE LINE # 244
0019 300005            JNB     interrupt_flag,?C0027
                                           ; SOURCE LINE # 245
001C C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 246
001E 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 247
0021         ?C0027:
                                           ; SOURCE LINE # 251
0021 120000      R     LCALL   analog_read_end
                                           ; SOURCE LINE # 253
0024 300005            JNB     interrupt_flag,?C0028
                                           ; SOURCE LINE # 254
0027 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 255
0029 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 256
002C         ?C0028:
                                           ; SOURCE LINE # 260
002C 900000      E     MOV     DPTR,#master_mode
002F E0                MOVX    A,@DPTR
0030 7003              JNZ     $ + 5H
0032 020000      R     LJMP    ?C0029
                                           ; SOURCE LINE # 262
0035 900000      E     MOV     DPTR,#c_mem+057H
0038 E0                MOVX    A,@DPTR
0039 6068              JZ      ?C0030
                                           ; SOURCE LINE # 265
003B 900000      E     MOV     DPTR,#c_mem+047H
003E E0                MOVX    A,@DPTR
003F 6401              XRL     A,#01H
0041 7055              JNZ     ?C0031
                                           ; SOURCE LINE # 266
0043 900000      R     MOV     DPTR,#counter_calibration
0046 E0                MOVX    A,@DPTR
0047 7004              JNZ     ?C0208
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B 640A              XRL     A,#0AH
004D         ?C0208:
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 25  

004D 7033              JNZ     ?C0032
                                           ; SOURCE LINE # 269
004F 900000      E     MOV     DPTR,#c_mem+054H
0052 E0                MOVX    A,@DPTR
0053 7004              JNZ     ?C0034
0055 A3                INC     DPTR
0056 E0                MOVX    A,@DPTR
0057 6016              JZ      ?C0033
0059         ?C0034:
                                           ; SOURCE LINE # 270
0059 900000      E     MOV     DPTR,#SH_current_position
005C E0                MOVX    A,@DPTR
005D FC                MOV     R4,A
005E A3                INC     DPTR
005F E0                MOVX    A,@DPTR
0060 FD                MOV     R5,A
0061 A3                INC     DPTR
0062 E0                MOVX    A,@DPTR
0063 FE                MOV     R6,A
0064 A3                INC     DPTR
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 900000      E     MOV     DPTR,#curr_pos_res
006A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 271
006D 8009              SJMP    ?C0035
006F         ?C0033:
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
006F 120000      E     LCALL   commReadMeasFromSH
0072 900000      E     MOV     DPTR,#curr_pos_res
0075 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 274
0078         ?C0035:
                                           ; SOURCE LINE # 277
0078 120000      E     LCALL   check_rest_position
                                           ; SOURCE LINE # 278
007B E4                CLR     A
007C 900000      R     MOV     DPTR,#counter_calibration
007F F0                MOVX    @DPTR,A
0080 A3                INC     DPTR
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
0082         ?C0032:
                                           ; SOURCE LINE # 280
0082 900000      R     MOV     DPTR,#counter_calibration+01H
0085 E0                MOVX    A,@DPTR
0086 04                INC     A
0087 F0                MOVX    @DPTR,A
0088 7006              JNZ     ?C0209
008A 900000      R     MOV     DPTR,#counter_calibration
008D E0                MOVX    A,@DPTR
008E 04                INC     A
008F F0                MOVX    @DPTR,A
0090         ?C0209:
                                           ; SOURCE LINE # 283
0090 300005            JNB     interrupt_flag,?C0031
                                           ; SOURCE LINE # 284
0093 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 285
0095 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 286
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 26  

                                           ; SOURCE LINE # 287
0098         ?C0031:
                                           ; SOURCE LINE # 289
0098 120000      E     LCALL   drive_SH
                                           ; SOURCE LINE # 292
009B 300005            JNB     interrupt_flag,?C0030
                                           ; SOURCE LINE # 293
009E C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 294
00A0 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 296
00A3         ?C0030:
                                           ; SOURCE LINE # 298
00A3 900000      E     MOV     DPTR,#c_mem+054H
00A6 E0                MOVX    A,@DPTR
00A7 6020              JZ      ?C0038
                                           ; SOURCE LINE # 300
00A9 A3                INC     DPTR
00AA E0                MOVX    A,@DPTR
00AB 6011              JZ      ?C0039
00AD 900000      E     MOV     DPTR,#c_mem+06AH
00B0 E0                MOVX    A,@DPTR
00B1 FF                MOV     R7,A
00B2 900000      E     MOV     DPTR,#c_mem+069H
00B5 E0                MOVX    A,@DPTR
00B6 B50705            CJNE    A,AR7,?C0039
                                           ; SOURCE LINE # 301
00B9 120000      E     LCALL   drive_force_proprio_fb
                                           ; SOURCE LINE # 302
00BC 8003              SJMP    ?C0040
00BE         ?C0039:
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 304
00BE 120000      E     LCALL   drive_force_fb
                                           ; SOURCE LINE # 305
00C1         ?C0040:
                                           ; SOURCE LINE # 308
00C1 300005            JNB     interrupt_flag,?C0038
                                           ; SOURCE LINE # 309
00C4 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 310
00C6 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 313
00C9         ?C0038:
                                           ; SOURCE LINE # 315
00C9 900000      E     MOV     DPTR,#c_mem+055H
00CC E0                MOVX    A,@DPTR
00CD 601D              JZ      ?C0042
                                           ; SOURCE LINE # 317
00CF 900000      E     MOV     DPTR,#c_mem+054H
00D2 E0                MOVX    A,@DPTR
00D3 600C              JZ      ?C0044
00D5 900000      E     MOV     DPTR,#c_mem+06AH
00D8 E0                MOVX    A,@DPTR
00D9 FF                MOV     R7,A
00DA 900000      E     MOV     DPTR,#c_mem+069H
00DD E0                MOVX    A,@DPTR
00DE 6F                XRL     A,R7
00DF 6003              JZ      ?C0043
00E1         ?C0044:
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 27  

                                           ; SOURCE LINE # 318
00E1 120000      E     LCALL   drive_proprio_fb
                                           ; SOURCE LINE # 319
00E4         ?C0043:
                                           ; SOURCE LINE # 322
00E4 300005            JNB     interrupt_flag,?C0042
                                           ; SOURCE LINE # 323
00E7 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 324
00E9 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
00EC         ?C0042:
                                           ; SOURCE LINE # 328
00EC 900000      E     MOV     DPTR,#c_mem+056H
00EF E0                MOVX    A,@DPTR
00F0 600B              JZ      ?C0029
                                           ; SOURCE LINE # 330
00F2 120000      E     LCALL   drive_vibrotactile_fb
                                           ; SOURCE LINE # 334
00F5 300005            JNB     interrupt_flag,?C0029
                                           ; SOURCE LINE # 335
00F8 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 336
00FA 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
00FD         ?C0029:
                                           ; SOURCE LINE # 343
00FD 300005            JNB     interrupt_flag,?C0048
                                           ; SOURCE LINE # 344
0100 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 345
0102 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 346
0105         ?C0048:
                                           ; SOURCE LINE # 351
0105 900000      E     MOV     DPTR,#calib
0108 E0                MOVX    A,@DPTR
0109 B40124            CJNE    A,#01H,?C0049
                                           ; SOURCE LINE # 352
010C 900000      R     MOV     DPTR,#counter_calibration
010F E0                MOVX    A,@DPTR
0110 7004              JNZ     ?C0210
0112 A3                INC     DPTR
0113 E0                MOVX    A,@DPTR
0114 640A              XRL     A,#0AH
0116         ?C0210:
0116 700A              JNZ     ?C0050
                                           ; SOURCE LINE # 353
0118 120000      E     LCALL   calibration
                                           ; SOURCE LINE # 354
011B E4                CLR     A
011C 900000      R     MOV     DPTR,#counter_calibration
011F F0                MOVX    @DPTR,A
0120 A3                INC     DPTR
0121 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
0122         ?C0050:
                                           ; SOURCE LINE # 356
0122 900000      R     MOV     DPTR,#counter_calibration+01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 28  

0125 E0                MOVX    A,@DPTR
0126 04                INC     A
0127 F0                MOVX    @DPTR,A
0128 7006              JNZ     ?C0211
012A 900000      R     MOV     DPTR,#counter_calibration
012D E0                MOVX    A,@DPTR
012E 04                INC     A
012F F0                MOVX    @DPTR,A
0130         ?C0211:
                                           ; SOURCE LINE # 357
0130         ?C0049:
                                           ; SOURCE LINE # 361
0130 300005            JNB     interrupt_flag,?C0051
                                           ; SOURCE LINE # 362
0133 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 363
0135 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 364
0138         ?C0051:
                                           ; SOURCE LINE # 370
0138 7800        E     MOV     R0,#LOW g_measOld
013A 7C00        E     MOV     R4,#HIGH g_measOld
013C 7D01              MOV     R5,#01H
013E 7B01              MOV     R3,#01H
0140 7A00        E     MOV     R2,#HIGH g_meas
0142 7900        E     MOV     R1,#LOW g_meas
0144 7E00              MOV     R6,#00H
0146 7F33              MOV     R7,#033H
0148 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 371
014B 7800        E     MOV     R0,#LOW g_refOld
014D 7C00        E     MOV     R4,#HIGH g_refOld
014F 7D01              MOV     R5,#01H
0151 7B01              MOV     R3,#01H
0153 7A00        E     MOV     R2,#HIGH g_ref
0155 7900        E     MOV     R1,#LOW g_ref
0157 7E00              MOV     R6,#00H
0159 7F08              MOV     R7,#08H
015B 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 374
015E 7800        E     MOV     R0,#LOW g_ref
0160 7C00        E     MOV     R4,#HIGH g_ref
0162 7D01              MOV     R5,#01H
0164 7B01              MOV     R3,#01H
0166 7A00        E     MOV     R2,#HIGH g_refNew
0168 7900        E     MOV     R1,#LOW g_refNew
016A 7E00              MOV     R6,#00H
016C 7F08              MOV     R7,#08H
016E 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 376
0171 300005            JNB     interrupt_flag,?C0052
                                           ; SOURCE LINE # 377
0174 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 378
0176 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 379
0179         ?C0052:
                                           ; SOURCE LINE # 381
0179 120000      E     LCALL   MY_TIMER_ReadCounter
017C 900000      E     MOV     DPTR,#timer_value
017F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 382
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 29  

0182 7F40              MOV     R7,#040H
0184 7E4B              MOV     R6,#04BH
0186 7D4C              MOV     R5,#04CH
0188 7C00              MOV     R4,#00H
018A 120000      E     LCALL   _MY_TIMER_WriteCounter
                                           ; SOURCE LINE # 384
018D 22                RET     
             ; FUNCTION function_scheduler (END)

             ; FUNCTION motor_control (BEGIN)
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 403
0000 900000      E     MOV     DPTR,#c_mem+037H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 FB                MOV     R3,A
0009 AA06              MOV     R2,AR6
000B E4                CLR     A
000C 900000      E     MOV     DPTR,#g_meas+0FH
000F E0                MOVX    A,@DPTR
0010 FC                MOV     R4,A
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
0013 FD                MOV     R5,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 C3                CLR     C
001A 9B                SUBB    A,R3
001B F500        R     MOV     err_emg_1+03H,A
001D EE                MOV     A,R6
001E 9A                SUBB    A,R2
001F F500        R     MOV     err_emg_1+02H,A
0021 ED                MOV     A,R5
0022 9400              SUBB    A,#00H
0024 F500        R     MOV     err_emg_1+01H,A
0026 EC                MOV     A,R4
0027 9400              SUBB    A,#00H
0029 F500        R     MOV     err_emg_1,A
                                           ; SOURCE LINE # 404
002B 900000      E     MOV     DPTR,#c_mem+039H
002E E0                MOVX    A,@DPTR
002F FE                MOV     R6,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 FB                MOV     R3,A
0034 AA06              MOV     R2,AR6
0036 E4                CLR     A
0037 900000      E     MOV     DPTR,#g_meas+013H
003A E0                MOVX    A,@DPTR
003B FC                MOV     R4,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E FD                MOV     R5,A
003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 30  

0041 FE                MOV     R6,A
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 C3                CLR     C
0045 9B                SUBB    A,R3
0046 F500        R     MOV     err_emg_2+03H,A
0048 EE                MOV     A,R6
0049 9A                SUBB    A,R2
004A F500        R     MOV     err_emg_2+02H,A
004C ED                MOV     A,R5
004D 9400              SUBB    A,#00H
004F F500        R     MOV     err_emg_2+01H,A
0051 EC                MOV     A,R4
0052 9400              SUBB    A,#00H
0054 F500        R     MOV     err_emg_2,A
                                           ; SOURCE LINE # 407
0056 900000      E     MOV     DPTR,#c_mem+02H
0059 E0                MOVX    A,@DPTR
005A 24FE              ADD     A,#0FEH
005C 7003              JNZ     $ + 5H
005E 020000      R     LJMP    ?C0062
0061 14                DEC     A
0062 7003              JNZ     $ + 5H
0064 020000      R     LJMP    ?C0065
0067 14                DEC     A
0068 7003              JNZ     $ + 5H
006A 020000      R     LJMP    ?C0068
006D 14                DEC     A
006E 7003              JNZ     $ + 5H
0070 020000      R     LJMP    ?C0078
0073 14                DEC     A
0074 7003              JNZ     $ + 5H
0076 020000      R     LJMP    ?C0090
0079 2405              ADD     A,#05H
007B 6003              JZ      $ + 5H
007D 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 409
0080         ?C0055:
                                           ; SOURCE LINE # 411
0080 900000      E     MOV     DPTR,#master_mode
0083 E0                MOVX    A,@DPTR
0084 6026              JZ      ?C0056
                                           ; SOURCE LINE # 413
0086 900000      E     MOV     DPTR,#c_mem+045H
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B 33                RLC     A
008C 95E0              SUBB    A,ACC
008E FE                MOV     R6,A
008F FD                MOV     R5,A
0090 FC                MOV     R4,A
0091 900000      E     MOV     DPTR,#g_meas
0094 E0                MOVX    A,@DPTR
0095 F8                MOV     R0,A
0096 A3                INC     DPTR
0097 E0                MOVX    A,@DPTR
0098 F9                MOV     R1,A
0099 A3                INC     DPTR
009A E0                MOVX    A,@DPTR
009B FA                MOV     R2,A
009C A3                INC     DPTR
009D E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 31  

009E FB                MOV     R3,A
009F 120000      E     LCALL   ?C?LMUL
00A2 8F00        R     MOV     handle_value+03H,R7
00A4 8E00        R     MOV     handle_value+02H,R6
00A6 8D00        R     MOV     handle_value+01H,R5
00A8 8C00        R     MOV     handle_value,R4
                                           ; SOURCE LINE # 414
00AA 8009              SJMP    ?C0057
00AC         ?C0056:
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 419
00AC E4                CLR     A
00AD F500        R     MOV     handle_value+03H,A
00AF F500        R     MOV     handle_value+02H,A
00B1 F500        R     MOV     handle_value+01H,A
00B3 F500        R     MOV     handle_value,A
                                           ; SOURCE LINE # 420
00B5         ?C0057:
                                           ; SOURCE LINE # 423
00B5 900000      E     MOV     DPTR,#g_ref
00B8 E0                MOVX    A,@DPTR
00B9 F8                MOV     R0,A
00BA A3                INC     DPTR
00BB E0                MOVX    A,@DPTR
00BC F9                MOV     R1,A
00BD A3                INC     DPTR
00BE E0                MOVX    A,@DPTR
00BF FA                MOV     R2,A
00C0 A3                INC     DPTR
00C1 E0                MOVX    A,@DPTR
00C2 FB                MOV     R3,A
00C3 C3                CLR     C
00C4 E500        R     MOV     A,handle_value+03H
00C6 9B                SUBB    A,R3
00C7 FF                MOV     R7,A
00C8 E500        R     MOV     A,handle_value+02H
00CA 9A                SUBB    A,R2
00CB FE                MOV     R6,A
00CC E500        R     MOV     A,handle_value+01H
00CE 99                SUBB    A,R1
00CF FD                MOV     R5,A
00D0 E500        R     MOV     A,handle_value
00D2 98                SUBB    A,R0
00D3 FC                MOV     R4,A
00D4 900000      E     MOV     DPTR,#c_mem+02FH
00D7 E0                MOVX    A,@DPTR
00D8 F8                MOV     R0,A
00D9 A3                INC     DPTR
00DA E0                MOVX    A,@DPTR
00DB F9                MOV     R1,A
00DC A3                INC     DPTR
00DD E0                MOVX    A,@DPTR
00DE FA                MOV     R2,A
00DF A3                INC     DPTR
00E0 E0                MOVX    A,@DPTR
00E1 FB                MOV     R3,A
00E2 C3                CLR     C
00E3 120000      E     LCALL   ?C?SLCMP
00E6 5044              JNC     ?C0058
00E8 E4                CLR     A
00E9 FF                MOV     R7,A
00EA FE                MOV     R6,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 32  

00EB FD                MOV     R5,A
00EC FC                MOV     R4,A
00ED 900000      E     MOV     DPTR,#c_mem+02FH
00F0 E0                MOVX    A,@DPTR
00F1 F8                MOV     R0,A
00F2 A3                INC     DPTR
00F3 E0                MOVX    A,@DPTR
00F4 A3                INC     DPTR
00F5 E0                MOVX    A,@DPTR
00F6 A3                INC     DPTR
00F7 E0                MOVX    A,@DPTR
00F8 C3                CLR     C
00F9 120000      E     LCALL   ?C?SLCMP
00FC 602E              JZ      ?C0058
                                           ; SOURCE LINE # 424
00FE 900000      E     MOV     DPTR,#g_ref
0101 E0                MOVX    A,@DPTR
0102 FC                MOV     R4,A
0103 A3                INC     DPTR
0104 E0                MOVX    A,@DPTR
0105 FD                MOV     R5,A
0106 A3                INC     DPTR
0107 E0                MOVX    A,@DPTR
0108 FE                MOV     R6,A
0109 A3                INC     DPTR
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C 900000      E     MOV     DPTR,#c_mem+02FH
010F E0                MOVX    A,@DPTR
0110 F8                MOV     R0,A
0111 A3                INC     DPTR
0112 E0                MOVX    A,@DPTR
0113 A3                INC     DPTR
0114 E0                MOVX    A,@DPTR
0115 A3                INC     DPTR
0116 E0                MOVX    A,@DPTR
0117 EF                MOV     A,R7
0118 2B                ADD     A,R3
0119 FF                MOV     R7,A
011A EE                MOV     A,R6
011B 3A                ADDC    A,R2
011C FE                MOV     R6,A
011D ED                MOV     A,R5
011E 39                ADDC    A,R1
011F FD                MOV     R5,A
0120 EC                MOV     A,R4
0121 38                ADDC    A,R0
0122 FC                MOV     R4,A
0123 900000      E     MOV     DPTR,#g_ref
0126 120000      E     LCALL   ?C?LSTXDATA
0129 020000      R     LJMP    ?C0054
012C         ?C0058:
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
012C 900000      E     MOV     DPTR,#g_ref
012F E0                MOVX    A,@DPTR
0130 F8                MOV     R0,A
0131 A3                INC     DPTR
0132 E0                MOVX    A,@DPTR
0133 F9                MOV     R1,A
0134 A3                INC     DPTR
0135 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 33  

0136 FA                MOV     R2,A
0137 A3                INC     DPTR
0138 E0                MOVX    A,@DPTR
0139 FB                MOV     R3,A
013A C3                CLR     C
013B E500        R     MOV     A,handle_value+03H
013D 9B                SUBB    A,R3
013E FF                MOV     R7,A
013F E500        R     MOV     A,handle_value+02H
0141 9A                SUBB    A,R2
0142 FE                MOV     R6,A
0143 E500        R     MOV     A,handle_value+01H
0145 99                SUBB    A,R1
0146 FD                MOV     R5,A
0147 E500        R     MOV     A,handle_value
0149 98                SUBB    A,R0
014A FC                MOV     R4,A
014B 900000      E     MOV     DPTR,#c_mem+033H
014E E0                MOVX    A,@DPTR
014F F8                MOV     R0,A
0150 A3                INC     DPTR
0151 E0                MOVX    A,@DPTR
0152 F9                MOV     R1,A
0153 A3                INC     DPTR
0154 E0                MOVX    A,@DPTR
0155 FA                MOV     R2,A
0156 A3                INC     DPTR
0157 E0                MOVX    A,@DPTR
0158 FB                MOV     R3,A
0159 D3                SETB    C
015A 120000      E     LCALL   ?C?SLCMP
015D 4043              JC      ?C0060
015F E4                CLR     A
0160 FF                MOV     R7,A
0161 FE                MOV     R6,A
0162 FD                MOV     R5,A
0163 FC                MOV     R4,A
0164 900000      E     MOV     DPTR,#c_mem+033H
0167 E0                MOVX    A,@DPTR
0168 F8                MOV     R0,A
0169 A3                INC     DPTR
016A E0                MOVX    A,@DPTR
016B A3                INC     DPTR
016C E0                MOVX    A,@DPTR
016D A3                INC     DPTR
016E E0                MOVX    A,@DPTR
016F 120000      E     LCALL   ?C?SLCMP
0172 602E              JZ      ?C0060
                                           ; SOURCE LINE # 427
0174 900000      E     MOV     DPTR,#g_ref
0177 E0                MOVX    A,@DPTR
0178 FC                MOV     R4,A
0179 A3                INC     DPTR
017A E0                MOVX    A,@DPTR
017B FD                MOV     R5,A
017C A3                INC     DPTR
017D E0                MOVX    A,@DPTR
017E FE                MOV     R6,A
017F A3                INC     DPTR
0180 E0                MOVX    A,@DPTR
0181 FF                MOV     R7,A
0182 900000      E     MOV     DPTR,#c_mem+033H
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 34  

0185 E0                MOVX    A,@DPTR
0186 F8                MOV     R0,A
0187 A3                INC     DPTR
0188 E0                MOVX    A,@DPTR
0189 A3                INC     DPTR
018A E0                MOVX    A,@DPTR
018B A3                INC     DPTR
018C E0                MOVX    A,@DPTR
018D EF                MOV     A,R7
018E 2B                ADD     A,R3
018F FF                MOV     R7,A
0190 EE                MOV     A,R6
0191 3A                ADDC    A,R2
0192 FE                MOV     R6,A
0193 ED                MOV     A,R5
0194 39                ADDC    A,R1
0195 FD                MOV     R5,A
0196 EC                MOV     A,R4
0197 38                ADDC    A,R0
0198 FC                MOV     R4,A
0199 900000      E     MOV     DPTR,#g_ref
019C 120000      E     LCALL   ?C?LSTXDATA
019F 020000      R     LJMP    ?C0054
01A2         ?C0060:
                                           ; SOURCE LINE # 429
01A2 AF00        R     MOV     R7,handle_value+03H
01A4 AE00        R     MOV     R6,handle_value+02H
01A6 AD00        R     MOV     R5,handle_value+01H
01A8 AC00        R     MOV     R4,handle_value
01AA 900000      E     MOV     DPTR,#g_ref
01AD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 431
01B0 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 433
01B3         ?C0062:
                                           ; SOURCE LINE # 434
01B3 E4                CLR     A
01B4 FF                MOV     R7,A
01B5 FE                MOV     R6,A
01B6 FD                MOV     R5,A
01B7 FC                MOV     R4,A
01B8 AB00        R     MOV     R3,err_emg_1+03H
01BA AA00        R     MOV     R2,err_emg_1+02H
01BC A900        R     MOV     R1,err_emg_1+01H
01BE A800        R     MOV     R0,err_emg_1
01C0 D3                SETB    C
01C1 120000      E     LCALL   ?C?SLCMP
01C4 403D              JC      ?C0063
                                           ; SOURCE LINE # 435
01C6 900000      E     MOV     DPTR,#g_mem+027H
01C9 E0                MOVX    A,@DPTR
01CA FC                MOV     R4,A
01CB A3                INC     DPTR
01CC E0                MOVX    A,@DPTR
01CD FD                MOV     R5,A
01CE A3                INC     DPTR
01CF E0                MOVX    A,@DPTR
01D0 FE                MOV     R6,A
01D1 A3                INC     DPTR
01D2 E0                MOVX    A,@DPTR
01D3 FF                MOV     R7,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 35  

01D4 A800        R     MOV     R0,err_emg_1
01D6 120000      E     LCALL   ?C?LMUL
01D9 C006              PUSH    AR6
01DB C007              PUSH    AR7
01DD 900000      E     MOV     DPTR,#c_mem+037H
01E0 E0                MOVX    A,@DPTR
01E1 FE                MOV     R6,A
01E2 A3                INC     DPTR
01E3 E0                MOVX    A,@DPTR
01E4 FF                MOV     R7,A
01E5 C3                CLR     C
01E6 E4                CLR     A
01E7 9F                SUBB    A,R7
01E8 FF                MOV     R7,A
01E9 7404              MOV     A,#04H
01EB 9E                SUBB    A,R6
01EC FE                MOV     R6,A
01ED AB07              MOV     R3,AR7
01EF FA                MOV     R2,A
01F0 E4                CLR     A
01F1 F9                MOV     R1,A
01F2 F8                MOV     R0,A
01F3 D007              POP     AR7
01F5 D006              POP     AR6
01F7 120000      E     LCALL   ?C?SLDIV
01FA 900000      E     MOV     DPTR,#g_ref
01FD 120000      E     LCALL   ?C?LSTXDATA
0200 020000      R     LJMP    ?C0054
0203         ?C0063:
                                           ; SOURCE LINE # 437
0203 E4                CLR     A
0204 FF                MOV     R7,A
0205 FE                MOV     R6,A
0206 FD                MOV     R5,A
0207 FC                MOV     R4,A
0208 900000      E     MOV     DPTR,#g_ref
020B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 438
020E 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 440
0211         ?C0065:
                                           ; SOURCE LINE # 441
0211 900000      E     MOV     DPTR,#g_refOld
0214 E0                MOVX    A,@DPTR
0215 FC                MOV     R4,A
0216 A3                INC     DPTR
0217 E0                MOVX    A,@DPTR
0218 FD                MOV     R5,A
0219 A3                INC     DPTR
021A E0                MOVX    A,@DPTR
021B FE                MOV     R6,A
021C A3                INC     DPTR
021D E0                MOVX    A,@DPTR
021E FF                MOV     R7,A
021F 900000      E     MOV     DPTR,#g_ref
0222 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 442
0225 E4                CLR     A
0226 FF                MOV     R7,A
0227 FE                MOV     R6,A
0228 FD                MOV     R5,A
0229 FC                MOV     R4,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 36  

022A AB00        R     MOV     R3,err_emg_1+03H
022C AA00        R     MOV     R2,err_emg_1+02H
022E A900        R     MOV     R1,err_emg_1+01H
0230 A800        R     MOV     R0,err_emg_1
0232 D3                SETB    C
0233 120000      E     LCALL   ?C?SLCMP
0236 4056              JC      ?C0066
                                           ; SOURCE LINE # 443
0238 900000      E     MOV     DPTR,#g_mem+044H
023B E0                MOVX    A,@DPTR
023C FF                MOV     R7,A
023D E4                CLR     A
023E FC                MOV     R4,A
023F FD                MOV     R5,A
0240 FE                MOV     R6,A
0241 A800        R     MOV     R0,err_emg_1
0243 120000      E     LCALL   ?C?LMUL
0246 E4                CLR     A
0247 7B02              MOV     R3,#02H
0249 FA                MOV     R2,A
024A F9                MOV     R1,A
024B F8                MOV     R0,A
024C 120000      E     LCALL   ?C?LMUL
024F C006              PUSH    AR6
0251 C007              PUSH    AR7
0253 900000      E     MOV     DPTR,#c_mem+037H
0256 E0                MOVX    A,@DPTR
0257 FE                MOV     R6,A
0258 A3                INC     DPTR
0259 E0                MOVX    A,@DPTR
025A FF                MOV     R7,A
025B C3                CLR     C
025C E4                CLR     A
025D 9F                SUBB    A,R7
025E FF                MOV     R7,A
025F 7404              MOV     A,#04H
0261 9E                SUBB    A,R6
0262 FE                MOV     R6,A
0263 AB07              MOV     R3,AR7
0265 FA                MOV     R2,A
0266 E4                CLR     A
0267 F9                MOV     R1,A
0268 F8                MOV     R0,A
0269 D007              POP     AR7
026B D006              POP     AR6
026D 120000      E     LCALL   ?C?SLDIV
0270 900000      E     MOV     DPTR,#g_refOld
0273 E0                MOVX    A,@DPTR
0274 F8                MOV     R0,A
0275 A3                INC     DPTR
0276 E0                MOVX    A,@DPTR
0277 F9                MOV     R1,A
0278 A3                INC     DPTR
0279 E0                MOVX    A,@DPTR
027A FA                MOV     R2,A
027B A3                INC     DPTR
027C E0                MOVX    A,@DPTR
027D 2F                ADD     A,R7
027E FF                MOV     R7,A
027F EA                MOV     A,R2
0280 3E                ADDC    A,R6
0281 FE                MOV     R6,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 37  

0282 E9                MOV     A,R1
0283 3D                ADDC    A,R5
0284 FD                MOV     R5,A
0285 E8                MOV     A,R0
0286 3C                ADDC    A,R4
0287 FC                MOV     R4,A
0288 900000      E     MOV     DPTR,#g_ref
028B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 444
028E         ?C0066:
                                           ; SOURCE LINE # 445
028E E4                CLR     A
028F FF                MOV     R7,A
0290 FE                MOV     R6,A
0291 FD                MOV     R5,A
0292 FC                MOV     R4,A
0293 AB00        R     MOV     R3,err_emg_2+03H
0295 AA00        R     MOV     R2,err_emg_2+02H
0297 A900        R     MOV     R1,err_emg_2+01H
0299 A800        R     MOV     R0,err_emg_2
029B D3                SETB    C
029C 120000      E     LCALL   ?C?SLCMP
029F 5003              JNC     $ + 5H
02A1 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 446
02A4 900000      E     MOV     DPTR,#g_mem+044H
02A7 E0                MOVX    A,@DPTR
02A8 FF                MOV     R7,A
02A9 E4                CLR     A
02AA FC                MOV     R4,A
02AB FD                MOV     R5,A
02AC FE                MOV     R6,A
02AD A800        R     MOV     R0,err_emg_2
02AF 120000      E     LCALL   ?C?LMUL
02B2 E4                CLR     A
02B3 7B02              MOV     R3,#02H
02B5 FA                MOV     R2,A
02B6 F9                MOV     R1,A
02B7 F8                MOV     R0,A
02B8 120000      E     LCALL   ?C?LMUL
02BB C006              PUSH    AR6
02BD C007              PUSH    AR7
02BF 900000      E     MOV     DPTR,#c_mem+039H
02C2 E0                MOVX    A,@DPTR
02C3 FE                MOV     R6,A
02C4 A3                INC     DPTR
02C5 E0                MOVX    A,@DPTR
02C6 FF                MOV     R7,A
02C7 C3                CLR     C
02C8 E4                CLR     A
02C9 9F                SUBB    A,R7
02CA FF                MOV     R7,A
02CB 7404              MOV     A,#04H
02CD 9E                SUBB    A,R6
02CE FE                MOV     R6,A
02CF AB07              MOV     R3,AR7
02D1 FA                MOV     R2,A
02D2 E4                CLR     A
02D3 F9                MOV     R1,A
02D4 F8                MOV     R0,A
02D5 D007              POP     AR7
02D7 D006              POP     AR6
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 38  

02D9 120000      E     LCALL   ?C?SLDIV
02DC A804              MOV     R0,AR4
02DE A905              MOV     R1,AR5
02E0 AA06              MOV     R2,AR6
02E2 AB07              MOV     R3,AR7
02E4 900000      E     MOV     DPTR,#g_refOld
02E7 E0                MOVX    A,@DPTR
02E8 FC                MOV     R4,A
02E9 A3                INC     DPTR
02EA E0                MOVX    A,@DPTR
02EB FD                MOV     R5,A
02EC A3                INC     DPTR
02ED E0                MOVX    A,@DPTR
02EE FE                MOV     R6,A
02EF A3                INC     DPTR
02F0 E0                MOVX    A,@DPTR
02F1 C3                CLR     C
02F2 9B                SUBB    A,R3
02F3 FF                MOV     R7,A
02F4 EE                MOV     A,R6
02F5 9A                SUBB    A,R2
02F6 FE                MOV     R6,A
02F7 ED                MOV     A,R5
02F8 99                SUBB    A,R1
02F9 FD                MOV     R5,A
02FA EC                MOV     A,R4
02FB 98                SUBB    A,R0
02FC FC                MOV     R4,A
02FD 900000      E     MOV     DPTR,#g_ref
0300 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
0303 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 450
0306         ?C0068:
                                           ; SOURCE LINE # 451
0306 900000      E     MOV     DPTR,#g_refOld
0309 E0                MOVX    A,@DPTR
030A FC                MOV     R4,A
030B A3                INC     DPTR
030C E0                MOVX    A,@DPTR
030D FD                MOV     R5,A
030E A3                INC     DPTR
030F E0                MOVX    A,@DPTR
0310 FE                MOV     R6,A
0311 A3                INC     DPTR
0312 E0                MOVX    A,@DPTR
0313 FF                MOV     R7,A
0314 900000      E     MOV     DPTR,#g_ref
0317 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 452
031A 900000      R     MOV     DPTR,#current_emg
031D E0                MOVX    A,@DPTR
031E 14                DEC     A
031F 6048              JZ      ?C0073
0321 14                DEC     A
0322 7003              JNZ     $ + 5H
0324 020000      R     LJMP    ?C0075
0327 2402              ADD     A,#02H
0329 6003              JZ      $ + 5H
032B 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 453
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 39  

032E         ?C0070:
                                           ; SOURCE LINE # 455
032E E4                CLR     A
032F FF                MOV     R7,A
0330 FE                MOV     R6,A
0331 FD                MOV     R5,A
0332 FC                MOV     R4,A
0333 AB00        R     MOV     R3,err_emg_1+03H
0335 AA00        R     MOV     R2,err_emg_1+02H
0337 A900        R     MOV     R1,err_emg_1+01H
0339 A800        R     MOV     R0,err_emg_1
033B D3                SETB    C
033C 120000      E     LCALL   ?C?SLCMP
033F 4009              JC      ?C0071
                                           ; SOURCE LINE # 456
0341 900000      R     MOV     DPTR,#current_emg
0344 7401              MOV     A,#01H
0346 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 457
0347 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 458
034A         ?C0071:
                                           ; SOURCE LINE # 459
034A E4                CLR     A
034B FF                MOV     R7,A
034C FE                MOV     R6,A
034D FD                MOV     R5,A
034E FC                MOV     R4,A
034F AB00        R     MOV     R3,err_emg_2+03H
0351 AA00        R     MOV     R2,err_emg_2+02H
0353 A900        R     MOV     R1,err_emg_2+01H
0355 A800        R     MOV     R0,err_emg_2
0357 D3                SETB    C
0358 120000      E     LCALL   ?C?SLCMP
035B 5003              JNC     $ + 5H
035D 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 460
0360 900000      R     MOV     DPTR,#current_emg
0363 7402              MOV     A,#02H
0365 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
0366 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
                                           ; SOURCE LINE # 465
0369         ?C0073:
                                           ; SOURCE LINE # 467
0369 E4                CLR     A
036A FF                MOV     R7,A
036B FE                MOV     R6,A
036C FD                MOV     R5,A
036D FC                MOV     R4,A
036E AB00        R     MOV     R3,err_emg_1+03H
0370 AA00        R     MOV     R2,err_emg_1+02H
0372 A900        R     MOV     R1,err_emg_1+01H
0374 A800        R     MOV     R0,err_emg_1
0376 C3                CLR     C
0377 120000      E     LCALL   ?C?SLCMP
037A 5008              JNC     ?C0074
                                           ; SOURCE LINE # 468
037C E4                CLR     A
037D 900000      R     MOV     DPTR,#current_emg
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 40  

0380 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
0381 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 470
0384         ?C0074:
                                           ; SOURCE LINE # 471
0384 900000      E     MOV     DPTR,#g_mem+044H
0387 E0                MOVX    A,@DPTR
0388 FF                MOV     R7,A
0389 E4                CLR     A
038A FC                MOV     R4,A
038B FD                MOV     R5,A
038C FE                MOV     R6,A
038D AB00        R     MOV     R3,err_emg_1+03H
038F AA00        R     MOV     R2,err_emg_1+02H
0391 A900        R     MOV     R1,err_emg_1+01H
0393 A800        R     MOV     R0,err_emg_1
0395 120000      E     LCALL   ?C?LMUL
0398 E4                CLR     A
0399 7B02              MOV     R3,#02H
039B FA                MOV     R2,A
039C F9                MOV     R1,A
039D F8                MOV     R0,A
039E 120000      E     LCALL   ?C?LMUL
03A1 C006              PUSH    AR6
03A3 C007              PUSH    AR7
03A5 900000      E     MOV     DPTR,#c_mem+037H
03A8 E0                MOVX    A,@DPTR
03A9 FE                MOV     R6,A
03AA A3                INC     DPTR
03AB E0                MOVX    A,@DPTR
03AC FF                MOV     R7,A
03AD C3                CLR     C
03AE E4                CLR     A
03AF 9F                SUBB    A,R7
03B0 FF                MOV     R7,A
03B1 7404              MOV     A,#04H
03B3 9E                SUBB    A,R6
03B4 FE                MOV     R6,A
03B5 AB07              MOV     R3,AR7
03B7 FA                MOV     R2,A
03B8 E4                CLR     A
03B9 F9                MOV     R1,A
03BA F8                MOV     R0,A
03BB D007              POP     AR7
03BD D006              POP     AR6
03BF 120000      E     LCALL   ?C?SLDIV
03C2 900000      E     MOV     DPTR,#g_refOld
03C5 E0                MOVX    A,@DPTR
03C6 F8                MOV     R0,A
03C7 A3                INC     DPTR
03C8 E0                MOVX    A,@DPTR
03C9 F9                MOV     R1,A
03CA A3                INC     DPTR
03CB E0                MOVX    A,@DPTR
03CC FA                MOV     R2,A
03CD A3                INC     DPTR
03CE E0                MOVX    A,@DPTR
03CF 2F                ADD     A,R7
03D0 FF                MOV     R7,A
03D1 EA                MOV     A,R2
03D2 3E                ADDC    A,R6
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 41  

03D3 FE                MOV     R6,A
03D4 E9                MOV     A,R1
03D5 3D                ADDC    A,R5
03D6 FD                MOV     R5,A
03D7 E8                MOV     A,R0
03D8 3C                ADDC    A,R4
03D9 FC                MOV     R4,A
03DA 900000      E     MOV     DPTR,#g_ref
03DD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 472
03E0 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 474
03E3         ?C0075:
                                           ; SOURCE LINE # 476
03E3 E4                CLR     A
03E4 FF                MOV     R7,A
03E5 FE                MOV     R6,A
03E6 FD                MOV     R5,A
03E7 FC                MOV     R4,A
03E8 AB00        R     MOV     R3,err_emg_2+03H
03EA AA00        R     MOV     R2,err_emg_2+02H
03EC A900        R     MOV     R1,err_emg_2+01H
03EE A800        R     MOV     R0,err_emg_2
03F0 C3                CLR     C
03F1 120000      E     LCALL   ?C?SLCMP
03F4 5008              JNC     ?C0076
                                           ; SOURCE LINE # 477
03F6 E4                CLR     A
03F7 900000      R     MOV     DPTR,#current_emg
03FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
03FB 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 479
03FE         ?C0076:
                                           ; SOURCE LINE # 480
03FE 900000      E     MOV     DPTR,#g_mem+044H
0401 E0                MOVX    A,@DPTR
0402 FF                MOV     R7,A
0403 E4                CLR     A
0404 FC                MOV     R4,A
0405 FD                MOV     R5,A
0406 FE                MOV     R6,A
0407 AB00        R     MOV     R3,err_emg_2+03H
0409 AA00        R     MOV     R2,err_emg_2+02H
040B A900        R     MOV     R1,err_emg_2+01H
040D A800        R     MOV     R0,err_emg_2
040F 120000      E     LCALL   ?C?LMUL
0412 E4                CLR     A
0413 7B02              MOV     R3,#02H
0415 FA                MOV     R2,A
0416 F9                MOV     R1,A
0417 F8                MOV     R0,A
0418 120000      E     LCALL   ?C?LMUL
041B C006              PUSH    AR6
041D C007              PUSH    AR7
041F 900000      E     MOV     DPTR,#c_mem+039H
0422 E0                MOVX    A,@DPTR
0423 FE                MOV     R6,A
0424 A3                INC     DPTR
0425 E0                MOVX    A,@DPTR
0426 FF                MOV     R7,A
0427 C3                CLR     C
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 42  

0428 E4                CLR     A
0429 9F                SUBB    A,R7
042A FF                MOV     R7,A
042B 7404              MOV     A,#04H
042D 9E                SUBB    A,R6
042E FE                MOV     R6,A
042F AB07              MOV     R3,AR7
0431 FA                MOV     R2,A
0432 E4                CLR     A
0433 F9                MOV     R1,A
0434 F8                MOV     R0,A
0435 D007              POP     AR7
0437 D006              POP     AR6
0439 120000      E     LCALL   ?C?SLDIV
043C A804              MOV     R0,AR4
043E A905              MOV     R1,AR5
0440 AA06              MOV     R2,AR6
0442 AB07              MOV     R3,AR7
0444 900000      E     MOV     DPTR,#g_refOld
0447 E0                MOVX    A,@DPTR
0448 FC                MOV     R4,A
0449 A3                INC     DPTR
044A E0                MOVX    A,@DPTR
044B FD                MOV     R5,A
044C A3                INC     DPTR
044D E0                MOVX    A,@DPTR
044E FE                MOV     R6,A
044F A3                INC     DPTR
0450 E0                MOVX    A,@DPTR
0451 C3                CLR     C
0452 9B                SUBB    A,R3
0453 FF                MOV     R7,A
0454 EE                MOV     A,R6
0455 9A                SUBB    A,R2
0456 FE                MOV     R6,A
0457 ED                MOV     A,R5
0458 99                SUBB    A,R1
0459 FD                MOV     R5,A
045A EC                MOV     A,R4
045B 98                SUBB    A,R0
045C FC                MOV     R4,A
045D 900000      E     MOV     DPTR,#g_ref
0460 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 481
0463 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 487
0466 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 489
0469         ?C0078:
                                           ; SOURCE LINE # 490
0469 900000      E     MOV     DPTR,#g_refOld
046C E0                MOVX    A,@DPTR
046D FC                MOV     R4,A
046E A3                INC     DPTR
046F E0                MOVX    A,@DPTR
0470 FD                MOV     R5,A
0471 A3                INC     DPTR
0472 E0                MOVX    A,@DPTR
0473 FE                MOV     R6,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 43  

0474 A3                INC     DPTR
0475 E0                MOVX    A,@DPTR
0476 FF                MOV     R7,A
0477 900000      E     MOV     DPTR,#g_ref
047A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 491
047D 900000      R     MOV     DPTR,#current_emg
0480 E0                MOVX    A,@DPTR
0481 14                DEC     A
0482 6048              JZ      ?C0083
0484 14                DEC     A
0485 7003              JNZ     $ + 5H
0487 020000      R     LJMP    ?C0086
048A 2402              ADD     A,#02H
048C 6003              JZ      $ + 5H
048E 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 493
0491         ?C0080:
                                           ; SOURCE LINE # 494
0491 E4                CLR     A
0492 FF                MOV     R7,A
0493 FE                MOV     R6,A
0494 FD                MOV     R5,A
0495 FC                MOV     R4,A
0496 AB00        R     MOV     R3,err_emg_1+03H
0498 AA00        R     MOV     R2,err_emg_1+02H
049A A900        R     MOV     R1,err_emg_1+01H
049C A800        R     MOV     R0,err_emg_1
049E D3                SETB    C
049F 120000      E     LCALL   ?C?SLCMP
04A2 4009              JC      ?C0081
                                           ; SOURCE LINE # 495
04A4 900000      R     MOV     DPTR,#current_emg
04A7 7401              MOV     A,#01H
04A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 496
04AA 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 497
04AD         ?C0081:
                                           ; SOURCE LINE # 498
04AD E4                CLR     A
04AE FF                MOV     R7,A
04AF FE                MOV     R6,A
04B0 FD                MOV     R5,A
04B1 FC                MOV     R4,A
04B2 AB00        R     MOV     R3,err_emg_2+03H
04B4 AA00        R     MOV     R2,err_emg_2+02H
04B6 A900        R     MOV     R1,err_emg_2+01H
04B8 A800        R     MOV     R0,err_emg_2
04BA D3                SETB    C
04BB 120000      E     LCALL   ?C?SLCMP
04BE 5003              JNC     $ + 5H
04C0 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 499
04C3 900000      R     MOV     DPTR,#current_emg
04C6 7402              MOV     A,#02H
04C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
04C9 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 505
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 44  

04CC         ?C0083:
                                           ; SOURCE LINE # 507
04CC E4                CLR     A
04CD FF                MOV     R7,A
04CE FE                MOV     R6,A
04CF FD                MOV     R5,A
04D0 FC                MOV     R4,A
04D1 AB00        R     MOV     R3,err_emg_1+03H
04D3 AA00        R     MOV     R2,err_emg_1+02H
04D5 A900        R     MOV     R1,err_emg_1+01H
04D7 A800        R     MOV     R0,err_emg_1
04D9 C3                CLR     C
04DA 120000      E     LCALL   ?C?SLCMP
04DD 501B              JNC     ?C0084
04DF E4                CLR     A
04E0 FF                MOV     R7,A
04E1 FE                MOV     R6,A
04E2 FD                MOV     R5,A
04E3 FC                MOV     R4,A
04E4 AB00        R     MOV     R3,err_emg_2+03H
04E6 AA00        R     MOV     R2,err_emg_2+02H
04E8 A900        R     MOV     R1,err_emg_2+01H
04EA A800        R     MOV     R0,err_emg_2
04EC C3                CLR     C
04ED 120000      E     LCALL   ?C?SLCMP
04F0 5008              JNC     ?C0084
                                           ; SOURCE LINE # 508
04F2 E4                CLR     A
04F3 900000      R     MOV     DPTR,#current_emg
04F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
04F7 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 510
04FA         ?C0084:
                                           ; SOURCE LINE # 512
04FA E4                CLR     A
04FB FF                MOV     R7,A
04FC FE                MOV     R6,A
04FD FD                MOV     R5,A
04FE FC                MOV     R4,A
04FF AB00        R     MOV     R3,err_emg_1+03H
0501 AA00        R     MOV     R2,err_emg_1+02H
0503 A900        R     MOV     R1,err_emg_1+01H
0505 A800        R     MOV     R0,err_emg_1
0507 D3                SETB    C
0508 120000      E     LCALL   ?C?SLCMP
050B 5003              JNC     $ + 5H
050D 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 513
0510 900000      E     MOV     DPTR,#g_mem+044H
0513 E0                MOVX    A,@DPTR
0514 FF                MOV     R7,A
0515 E4                CLR     A
0516 FC                MOV     R4,A
0517 FD                MOV     R5,A
0518 FE                MOV     R6,A
0519 A800        R     MOV     R0,err_emg_1
051B 120000      E     LCALL   ?C?LMUL
051E 7802              MOV     R0,#02H
0520 120000      E     LCALL   ?C?LSHL
0523 C006              PUSH    AR6
0525 C007              PUSH    AR7
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 45  

0527 900000      E     MOV     DPTR,#c_mem+037H
052A E0                MOVX    A,@DPTR
052B FE                MOV     R6,A
052C A3                INC     DPTR
052D E0                MOVX    A,@DPTR
052E FF                MOV     R7,A
052F C3                CLR     C
0530 E4                CLR     A
0531 9F                SUBB    A,R7
0532 FF                MOV     R7,A
0533 7404              MOV     A,#04H
0535 9E                SUBB    A,R6
0536 FE                MOV     R6,A
0537 AB07              MOV     R3,AR7
0539 FA                MOV     R2,A
053A E4                CLR     A
053B F9                MOV     R1,A
053C F8                MOV     R0,A
053D D007              POP     AR7
053F D006              POP     AR6
0541 120000      E     LCALL   ?C?SLDIV
0544 900000      E     MOV     DPTR,#g_refOld
0547 E0                MOVX    A,@DPTR
0548 F8                MOV     R0,A
0549 A3                INC     DPTR
054A E0                MOVX    A,@DPTR
054B F9                MOV     R1,A
054C A3                INC     DPTR
054D E0                MOVX    A,@DPTR
054E FA                MOV     R2,A
054F A3                INC     DPTR
0550 E0                MOVX    A,@DPTR
0551 2F                ADD     A,R7
0552 FF                MOV     R7,A
0553 EA                MOV     A,R2
0554 3E                ADDC    A,R6
0555 FE                MOV     R6,A
0556 E9                MOV     A,R1
0557 3D                ADDC    A,R5
0558 FD                MOV     R5,A
0559 E8                MOV     A,R0
055A 3C                ADDC    A,R4
055B FC                MOV     R4,A
055C 900000      E     MOV     DPTR,#g_ref
055F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 515
0562 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 518
0565         ?C0086:
                                           ; SOURCE LINE # 520
0565 E4                CLR     A
0566 FF                MOV     R7,A
0567 FE                MOV     R6,A
0568 FD                MOV     R5,A
0569 FC                MOV     R4,A
056A AB00        R     MOV     R3,err_emg_1+03H
056C AA00        R     MOV     R2,err_emg_1+02H
056E A900        R     MOV     R1,err_emg_1+01H
0570 A800        R     MOV     R0,err_emg_1
0572 C3                CLR     C
0573 120000      E     LCALL   ?C?SLCMP
0576 501B              JNC     ?C0087
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 46  

0578 E4                CLR     A
0579 FF                MOV     R7,A
057A FE                MOV     R6,A
057B FD                MOV     R5,A
057C FC                MOV     R4,A
057D AB00        R     MOV     R3,err_emg_2+03H
057F AA00        R     MOV     R2,err_emg_2+02H
0581 A900        R     MOV     R1,err_emg_2+01H
0583 A800        R     MOV     R0,err_emg_2
0585 C3                CLR     C
0586 120000      E     LCALL   ?C?SLCMP
0589 5008              JNC     ?C0087
                                           ; SOURCE LINE # 521
058B E4                CLR     A
058C 900000      R     MOV     DPTR,#current_emg
058F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 522
0590 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 523
0593         ?C0087:
                                           ; SOURCE LINE # 525
0593 E4                CLR     A
0594 FF                MOV     R7,A
0595 FE                MOV     R6,A
0596 FD                MOV     R5,A
0597 FC                MOV     R4,A
0598 AB00        R     MOV     R3,err_emg_2+03H
059A AA00        R     MOV     R2,err_emg_2+02H
059C A900        R     MOV     R1,err_emg_2+01H
059E A800        R     MOV     R0,err_emg_2
05A0 D3                SETB    C
05A1 120000      E     LCALL   ?C?SLCMP
05A4 5003              JNC     $ + 5H
05A6 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 526
05A9 900000      E     MOV     DPTR,#c_mem+044H
05AC E0                MOVX    A,@DPTR
05AD FF                MOV     R7,A
05AE E4                CLR     A
05AF FC                MOV     R4,A
05B0 FD                MOV     R5,A
05B1 FE                MOV     R6,A
05B2 A800        R     MOV     R0,err_emg_2
05B4 120000      E     LCALL   ?C?LMUL
05B7 7802              MOV     R0,#02H
05B9 120000      E     LCALL   ?C?LSHL
05BC C006              PUSH    AR6
05BE C007              PUSH    AR7
05C0 900000      E     MOV     DPTR,#c_mem+039H
05C3 E0                MOVX    A,@DPTR
05C4 FE                MOV     R6,A
05C5 A3                INC     DPTR
05C6 E0                MOVX    A,@DPTR
05C7 FF                MOV     R7,A
05C8 C3                CLR     C
05C9 E4                CLR     A
05CA 9F                SUBB    A,R7
05CB FF                MOV     R7,A
05CC 7404              MOV     A,#04H
05CE 9E                SUBB    A,R6
05CF FE                MOV     R6,A
05D0 AB07              MOV     R3,AR7
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 47  

05D2 FA                MOV     R2,A
05D3 E4                CLR     A
05D4 F9                MOV     R1,A
05D5 F8                MOV     R0,A
05D6 D007              POP     AR7
05D8 D006              POP     AR6
05DA 120000      E     LCALL   ?C?SLDIV
05DD A804              MOV     R0,AR4
05DF A905              MOV     R1,AR5
05E1 AA06              MOV     R2,AR6
05E3 AB07              MOV     R3,AR7
05E5 900000      E     MOV     DPTR,#g_refOld
05E8 E0                MOVX    A,@DPTR
05E9 FC                MOV     R4,A
05EA A3                INC     DPTR
05EB E0                MOVX    A,@DPTR
05EC FD                MOV     R5,A
05ED A3                INC     DPTR
05EE E0                MOVX    A,@DPTR
05EF FE                MOV     R6,A
05F0 A3                INC     DPTR
05F1 E0                MOVX    A,@DPTR
05F2 C3                CLR     C
05F3 9B                SUBB    A,R3
05F4 FF                MOV     R7,A
05F5 EE                MOV     A,R6
05F6 9A                SUBB    A,R2
05F7 FE                MOV     R6,A
05F8 ED                MOV     A,R5
05F9 99                SUBB    A,R1
05FA FD                MOV     R5,A
05FB EC                MOV     A,R4
05FC 98                SUBB    A,R0
05FD FC                MOV     R4,A
05FE 900000      E     MOV     DPTR,#g_ref
0601 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
0604 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 534
0607 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 536
060A         ?C0090:
                                           ; SOURCE LINE # 538
060A 900000      E     MOV     DPTR,#c_mem+06EH
060D E0                MOVX    A,@DPTR
060E FC                MOV     R4,A
060F A3                INC     DPTR
0610 E0                MOVX    A,@DPTR
0611 FD                MOV     R5,A
0612 E4                CLR     A
0613 120000      E     LCALL   ?C?FCASTI
0616 E4                CLR     A
0617 FB                MOV     R3,A
0618 FA                MOV     R2,A
0619 F9                MOV     R1,A
061A 7840              MOV     R0,#040H
061C 120000      E     LCALL   ?C?FPDIV
061F C004              PUSH    AR4
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 48  

0621 C005              PUSH    AR5
0623 C006              PUSH    AR6
0625 C007              PUSH    AR7
0627 900000      E     MOV     DPTR,#g_meas+02FH
062A E0                MOVX    A,@DPTR
062B FC                MOV     R4,A
062C A3                INC     DPTR
062D E0                MOVX    A,@DPTR
062E FD                MOV     R5,A
062F EC                MOV     A,R4
0630 120000      E     LCALL   ?C?FCASTI
0633 D003              POP     AR3
0635 D002              POP     AR2
0637 D001              POP     AR1
0639 D000              POP     AR0
063B 120000      E     LCALL   ?C?FPDIV
063E 8F00        R     MOV     joy_perc+03H,R7
0640 8E00        R     MOV     joy_perc+02H,R6
0642 8D00        R     MOV     joy_perc+01H,R5
0644 8C00        R     MOV     joy_perc,R4
                                           ; SOURCE LINE # 539
0646 900000      E     MOV     DPTR,#c_mem+06CH
0649 E0                MOVX    A,@DPTR
064A FC                MOV     R4,A
064B A3                INC     DPTR
064C E0                MOVX    A,@DPTR
064D FD                MOV     R5,A
064E E4                CLR     A
064F 120000      E     LCALL   ?C?FCASTI
0652 AB00        R     MOV     R3,joy_perc+03H
0654 AA00        R     MOV     R2,joy_perc+02H
0656 A900        R     MOV     R1,joy_perc+01H
0658 A800        R     MOV     R0,joy_perc
065A 120000      E     LCALL   ?C?FPMUL
065D C004              PUSH    AR4
065F C005              PUSH    AR5
0661 C006              PUSH    AR6
0663 C007              PUSH    AR7
0665 900000      E     MOV     DPTR,#g_refOld
0668 E0                MOVX    A,@DPTR
0669 FC                MOV     R4,A
066A A3                INC     DPTR
066B E0                MOVX    A,@DPTR
066C FD                MOV     R5,A
066D A3                INC     DPTR
066E E0                MOVX    A,@DPTR
066F FE                MOV     R6,A
0670 A3                INC     DPTR
0671 E0                MOVX    A,@DPTR
0672 FF                MOV     R7,A
0673 EC                MOV     A,R4
0674 120000      E     LCALL   ?C?FCASTL
0677 D003              POP     AR3
0679 D002              POP     AR2
067B D001              POP     AR1
067D D000              POP     AR0
067F 120000      E     LCALL   ?C?FPADD
0682 120000      E     LCALL   ?C?CASTF
0685 900000      E     MOV     DPTR,#g_ref
0688 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 542
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 49  

                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
068B         ?C0054:
                                           ; SOURCE LINE # 547
068B 900000      E     MOV     DPTR,#c_mem+01EH
068E E0                MOVX    A,@DPTR
068F 606A              JZ      ?C0092
                                           ; SOURCE LINE # 548
0691 A3                INC     DPTR
0692 E0                MOVX    A,@DPTR
0693 FC                MOV     R4,A
0694 A3                INC     DPTR
0695 E0                MOVX    A,@DPTR
0696 FD                MOV     R5,A
0697 A3                INC     DPTR
0698 E0                MOVX    A,@DPTR
0699 FE                MOV     R6,A
069A A3                INC     DPTR
069B E0                MOVX    A,@DPTR
069C FF                MOV     R7,A
069D 900000      E     MOV     DPTR,#g_ref
06A0 E0                MOVX    A,@DPTR
06A1 F8                MOV     R0,A
06A2 A3                INC     DPTR
06A3 E0                MOVX    A,@DPTR
06A4 F9                MOV     R1,A
06A5 A3                INC     DPTR
06A6 E0                MOVX    A,@DPTR
06A7 FA                MOV     R2,A
06A8 A3                INC     DPTR
06A9 E0                MOVX    A,@DPTR
06AA FB                MOV     R3,A
06AB C3                CLR     C
06AC 120000      E     LCALL   ?C?SLCMP
06AF 5014              JNC     ?C0093
                                           ; SOURCE LINE # 549
06B1 900000      E     MOV     DPTR,#c_mem+01FH
06B4 E0                MOVX    A,@DPTR
06B5 FC                MOV     R4,A
06B6 A3                INC     DPTR
06B7 E0                MOVX    A,@DPTR
06B8 FD                MOV     R5,A
06B9 A3                INC     DPTR
06BA E0                MOVX    A,@DPTR
06BB FE                MOV     R6,A
06BC A3                INC     DPTR
06BD E0                MOVX    A,@DPTR
06BE FF                MOV     R7,A
06BF 900000      E     MOV     DPTR,#g_ref
06C2 120000      E     LCALL   ?C?LSTXDATA
06C5         ?C0093:
                                           ; SOURCE LINE # 550
06C5 900000      E     MOV     DPTR,#c_mem+027H
06C8 E0                MOVX    A,@DPTR
06C9 FC                MOV     R4,A
06CA A3                INC     DPTR
06CB E0                MOVX    A,@DPTR
06CC FD                MOV     R5,A
06CD A3                INC     DPTR
06CE E0                MOVX    A,@DPTR
06CF FE                MOV     R6,A
06D0 A3                INC     DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 50  

06D1 E0                MOVX    A,@DPTR
06D2 FF                MOV     R7,A
06D3 900000      E     MOV     DPTR,#g_ref
06D6 E0                MOVX    A,@DPTR
06D7 F8                MOV     R0,A
06D8 A3                INC     DPTR
06D9 E0                MOVX    A,@DPTR
06DA F9                MOV     R1,A
06DB A3                INC     DPTR
06DC E0                MOVX    A,@DPTR
06DD FA                MOV     R2,A
06DE A3                INC     DPTR
06DF E0                MOVX    A,@DPTR
06E0 FB                MOV     R3,A
06E1 D3                SETB    C
06E2 120000      E     LCALL   ?C?SLCMP
06E5 4014              JC      ?C0092
                                           ; SOURCE LINE # 551
06E7 900000      E     MOV     DPTR,#c_mem+027H
06EA E0                MOVX    A,@DPTR
06EB FC                MOV     R4,A
06EC A3                INC     DPTR
06ED E0                MOVX    A,@DPTR
06EE FD                MOV     R5,A
06EF A3                INC     DPTR
06F0 E0                MOVX    A,@DPTR
06F1 FE                MOV     R6,A
06F2 A3                INC     DPTR
06F3 E0                MOVX    A,@DPTR
06F4 FF                MOV     R7,A
06F5 900000      E     MOV     DPTR,#g_ref
06F8 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 552
06FB         ?C0092:
                                           ; SOURCE LINE # 554
06FB 900000      E     MOV     DPTR,#c_mem+047H
06FE E0                MOVX    A,@DPTR
06FF 6401              XRL     A,#01H
0701 6003              JZ      $ + 5H
0703 020000      R     LJMP    ?C0100
                                           ; SOURCE LINE # 555
0706 900000      E     MOV     DPTR,#rest_enabled
0709 E0                MOVX    A,@DPTR
070A B40114            CJNE    A,#01H,?C0096
                                           ; SOURCE LINE # 557
070D 900000      E     MOV     DPTR,#rest_pos_curr_ref
0710 E0                MOVX    A,@DPTR
0711 FC                MOV     R4,A
0712 A3                INC     DPTR
0713 E0                MOVX    A,@DPTR
0714 FD                MOV     R5,A
0715 A3                INC     DPTR
0716 E0                MOVX    A,@DPTR
0717 FE                MOV     R6,A
0718 A3                INC     DPTR
0719 E0                MOVX    A,@DPTR
071A FF                MOV     R7,A
071B 900000      E     MOV     DPTR,#g_ref
071E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 558
0721         ?C0096:
                                           ; SOURCE LINE # 560
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 51  

0721 900000      E     MOV     DPTR,#forced_open
0724 E0                MOVX    A,@DPTR
0725 6401              XRL     A,#01H
0727 6003              JZ      $ + 5H
0729 020000      R     LJMP    ?C0100
                                           ; SOURCE LINE # 562
072C FF                MOV     R7,A
072D FE                MOV     R6,A
072E FD                MOV     R5,A
072F FC                MOV     R4,A
0730 AB00        R     MOV     R3,err_emg_2+03H
0732 AA00        R     MOV     R2,err_emg_2+02H
0734 A900        R     MOV     R1,err_emg_2+01H
0736 A800        R     MOV     R0,err_emg_2
0738 D3                SETB    C
0739 120000      E     LCALL   ?C?SLCMP
073C 405C              JC      ?C0098
                                           ; SOURCE LINE # 563
073E 900000      E     MOV     DPTR,#g_mem+048H
0741 E0                MOVX    A,@DPTR
0742 FC                MOV     R4,A
0743 A3                INC     DPTR
0744 E0                MOVX    A,@DPTR
0745 FD                MOV     R5,A
0746 A3                INC     DPTR
0747 E0                MOVX    A,@DPTR
0748 FE                MOV     R6,A
0749 A3                INC     DPTR
074A E0                MOVX    A,@DPTR
074B FF                MOV     R7,A
074C A800        R     MOV     R0,err_emg_2
074E 120000      E     LCALL   ?C?LMUL
0751 C006              PUSH    AR6
0753 C007              PUSH    AR7
0755 900000      E     MOV     DPTR,#c_mem+039H
0758 E0                MOVX    A,@DPTR
0759 FE                MOV     R6,A
075A A3                INC     DPTR
075B E0                MOVX    A,@DPTR
075C FF                MOV     R7,A
075D C3                CLR     C
075E E4                CLR     A
075F 9F                SUBB    A,R7
0760 FF                MOV     R7,A
0761 7404              MOV     A,#04H
0763 9E                SUBB    A,R6
0764 FE                MOV     R6,A
0765 AB07              MOV     R3,AR7
0767 FA                MOV     R2,A
0768 E4                CLR     A
0769 F9                MOV     R1,A
076A F8                MOV     R0,A
076B D007              POP     AR7
076D D006              POP     AR6
076F 120000      E     LCALL   ?C?SLDIV
0772 A804              MOV     R0,AR4
0774 A905              MOV     R1,AR5
0776 AA06              MOV     R2,AR6
0778 AB07              MOV     R3,AR7
077A 900000      E     MOV     DPTR,#g_mem+048H
077D E0                MOVX    A,@DPTR
077E FC                MOV     R4,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 52  

077F A3                INC     DPTR
0780 E0                MOVX    A,@DPTR
0781 FD                MOV     R5,A
0782 A3                INC     DPTR
0783 E0                MOVX    A,@DPTR
0784 FE                MOV     R6,A
0785 A3                INC     DPTR
0786 E0                MOVX    A,@DPTR
0787 C3                CLR     C
0788 9B                SUBB    A,R3
0789 FF                MOV     R7,A
078A EE                MOV     A,R6
078B 9A                SUBB    A,R2
078C FE                MOV     R6,A
078D ED                MOV     A,R5
078E 99                SUBB    A,R1
078F FD                MOV     R5,A
0790 EC                MOV     A,R4
0791 98                SUBB    A,R0
0792 FC                MOV     R4,A
0793 900000      E     MOV     DPTR,#g_ref
0796 120000      E     LCALL   ?C?LSTXDATA
0799 22                RET     
079A         ?C0098:
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
079A 900000      E     MOV     DPTR,#g_mem+048H
079D E0                MOVX    A,@DPTR
079E FC                MOV     R4,A
079F A3                INC     DPTR
07A0 E0                MOVX    A,@DPTR
07A1 FD                MOV     R5,A
07A2 A3                INC     DPTR
07A3 E0                MOVX    A,@DPTR
07A4 FE                MOV     R6,A
07A5 A3                INC     DPTR
07A6 E0                MOVX    A,@DPTR
07A7 FF                MOV     R7,A
07A8 900000      E     MOV     DPTR,#g_ref
07AB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 566
07AE E4                CLR     A
07AF 900000      E     MOV     DPTR,#forced_open
07B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 570
07B3         ?C0100:
07B3 22                RET     
             ; FUNCTION motor_control (END)

             ; FUNCTION analog_read_end (BEGIN)
                                           ; SOURCE LINE # 576
0000         ?C0101:
                                           ; SOURCE LINE # 619
0000 120000      E     LCALL   ADC_STATUS_Read
0003 EF                MOV     A,R7
0004 700A              JNZ     ?C0102
                                           ; SOURCE LINE # 620
0006 3000F7            JNB     interrupt_flag,?C0101
                                           ; SOURCE LINE # 621
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 53  

0009 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 622
000B 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 624
000E 80F0              SJMP    ?C0101
0010         ?C0102:
                                           ; SOURCE LINE # 627
0010 900000      E     MOV     DPTR,#ADC_buf+01H
0013 E0                MOVX    A,@DPTR
0014 249A              ADD     A,#09AH
0016 FF                MOV     R7,A
0017 900000      E     MOV     DPTR,#ADC_buf
001A E0                MOVX    A,@DPTR
001B 34F9              ADDC    A,#0F9H
001D FE                MOV     R6,A
001E 33                RLC     A
001F 95E0              SUBB    A,ACC
0021 FD                MOV     R5,A
0022 FC                MOV     R4,A
0023 E4                CLR     A
0024 7BA0              MOV     R3,#0A0H
0026 7A07              MOV     R2,#07H
0028 F9                MOV     R1,A
0029 F8                MOV     R0,A
002A 120000      E     LCALL   ?C?LMUL
002D 7807              MOV     R0,#07H
002F 120000      E     LCALL   ?C?SLSHR
0032 900000      E     MOV     DPTR,#dev_tension
0035 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 629
0038 300005            JNB     interrupt_flag,?C0104
                                           ; SOURCE LINE # 630
003B C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 631
003D 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 632
0040         ?C0104:
                                           ; SOURCE LINE # 634
0040 900000      E     MOV     DPTR,#first_tension_valid
0043 E0                MOVX    A,@DPTR
0044 6077              JZ      ?C0105
0046 300074            JNB     tension_valid,?C0105
                                           ; SOURCE LINE # 635
0049 900000      R     MOV     DPTR,#count
004C E0                MOVX    A,@DPTR
004D 04                INC     A
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 637
004F E0                MOVX    A,@DPTR
0050 64E8              XRL     A,#0E8H
0052 7002              JNZ     ?C0212
0054 7403              MOV     A,#03H
0056         ?C0212:
0056 7065              JNZ     ?C0105
                                           ; SOURCE LINE # 638
0058 7F28              MOV     R7,#028H
005A 7E23              MOV     R6,#023H
005C FD                MOV     R5,A
005D FC                MOV     R4,A
005E 900000      E     MOV     DPTR,#dev_tension
0061 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 54  

0062 F8                MOV     R0,A
0063 A3                INC     DPTR
0064 E0                MOVX    A,@DPTR
0065 F9                MOV     R1,A
0066 A3                INC     DPTR
0067 E0                MOVX    A,@DPTR
0068 FA                MOV     R2,A
0069 A3                INC     DPTR
006A E0                MOVX    A,@DPTR
006B FB                MOV     R3,A
006C C3                CLR     C
006D 120000      E     LCALL   ?C?SLCMP
0070 500F              JNC     ?C0107
                                           ; SOURCE LINE # 639
0072 E4                CLR     A
0073 7F40              MOV     R7,#040H
0075 7E1F              MOV     R6,#01FH
0077 FD                MOV     R5,A
0078 FC                MOV     R4,A
0079 900000      E     MOV     DPTR,#pow_tension
007C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 640
007F 8037              SJMP    ?C0108
0081         ?C0107:
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 642
0081 E4                CLR     A
0082 7FC8              MOV     R7,#0C8H
0084 7E32              MOV     R6,#032H
0086 FD                MOV     R5,A
0087 FC                MOV     R4,A
0088 900000      E     MOV     DPTR,#dev_tension
008B E0                MOVX    A,@DPTR
008C F8                MOV     R0,A
008D A3                INC     DPTR
008E E0                MOVX    A,@DPTR
008F F9                MOV     R1,A
0090 A3                INC     DPTR
0091 E0                MOVX    A,@DPTR
0092 FA                MOV     R2,A
0093 A3                INC     DPTR
0094 E0                MOVX    A,@DPTR
0095 FB                MOV     R3,A
0096 C3                CLR     C
0097 120000      E     LCALL   ?C?SLCMP
009A 500F              JNC     ?C0109
                                           ; SOURCE LINE # 643
009C E4                CLR     A
009D 7FE0              MOV     R7,#0E0H
009F 7E2E              MOV     R6,#02EH
00A1 FD                MOV     R5,A
00A2 FC                MOV     R4,A
00A3 900000      E     MOV     DPTR,#pow_tension
00A6 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 644
00A9 800D              SJMP    ?C0108
00AB         ?C0109:
                                           ; SOURCE LINE # 646
00AB E4                CLR     A
00AC 7FC0              MOV     R7,#0C0H
00AE 7E5D              MOV     R6,#05DH
00B0 FD                MOV     R5,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 55  

00B1 FC                MOV     R4,A
00B2 900000      E     MOV     DPTR,#pow_tension
00B5 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 647
00B8         ?C0108:
                                           ; SOURCE LINE # 649
00B8 E4                CLR     A
00B9 900000      E     MOV     DPTR,#first_tension_valid
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 651
00BD         ?C0105:
                                           ; SOURCE LINE # 655
00BD E4                CLR     A
00BE 7F58              MOV     R7,#058H
00C0 7E1B              MOV     R6,#01BH
00C2 FD                MOV     R5,A
00C3 FC                MOV     R4,A
00C4 900000      E     MOV     DPTR,#dev_tension
00C7 E0                MOVX    A,@DPTR
00C8 F8                MOV     R0,A
00C9 A3                INC     DPTR
00CA E0                MOVX    A,@DPTR
00CB F9                MOV     R1,A
00CC A3                INC     DPTR
00CD E0                MOVX    A,@DPTR
00CE FA                MOV     R2,A
00CF A3                INC     DPTR
00D0 E0                MOVX    A,@DPTR
00D1 FB                MOV     R3,A
00D2 D3                SETB    C
00D3 120000      E     LCALL   ?C?SLCMP
00D6 5003              JNC     $ + 5H
00D8 020000      R     LJMP    ?C0111
                                           ; SOURCE LINE # 658
00DB E4                CLR     A
00DC 7FE8              MOV     R7,#0E8H
00DE 7E03              MOV     R6,#03H
00E0 FD                MOV     R5,A
00E1 FC                MOV     R4,A
00E2 900000      R     MOV     DPTR,#count2
00E5 E0                MOVX    A,@DPTR
00E6 F8                MOV     R0,A
00E7 A3                INC     DPTR
00E8 E0                MOVX    A,@DPTR
00E9 F9                MOV     R1,A
00EA A3                INC     DPTR
00EB E0                MOVX    A,@DPTR
00EC FA                MOV     R2,A
00ED A3                INC     DPTR
00EE E0                MOVX    A,@DPTR
00EF FB                MOV     R3,A
00F0 120000      E     LCALL   ?C?ULCMP
00F3 7004              JNZ     ?C0112
                                           ; SOURCE LINE # 659
00F5 D200        E     SETB    tension_valid
                                           ; SOURCE LINE # 660
00F7 8036              SJMP    ?C0113
00F9         ?C0112:
                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 662
00F9 900000      R     MOV     DPTR,#count2
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 56  

00FC E0                MOVX    A,@DPTR
00FD FC                MOV     R4,A
00FE A3                INC     DPTR
00FF E0                MOVX    A,@DPTR
0100 FD                MOV     R5,A
0101 A3                INC     DPTR
0102 E0                MOVX    A,@DPTR
0103 FE                MOV     R6,A
0104 A3                INC     DPTR
0105 E0                MOVX    A,@DPTR
0106 2401              ADD     A,#01H
0108 FF                MOV     R7,A
0109 E4                CLR     A
010A 3E                ADDC    A,R6
010B FE                MOV     R6,A
010C E4                CLR     A
010D 3D                ADDC    A,R5
010E FD                MOV     R5,A
010F E4                CLR     A
0110 3C                ADDC    A,R4
0111 FC                MOV     R4,A
0112 900000      R     MOV     DPTR,#count2
0115 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 663
0118 900000      E     MOV     DPTR,#dev_tension
011B E0                MOVX    A,@DPTR
011C FC                MOV     R4,A
011D A3                INC     DPTR
011E E0                MOVX    A,@DPTR
011F FD                MOV     R5,A
0120 A3                INC     DPTR
0121 E0                MOVX    A,@DPTR
0122 FE                MOV     R6,A
0123 A3                INC     DPTR
0124 E0                MOVX    A,@DPTR
0125 FF                MOV     R7,A
0126 120000      E     LCALL   _filter_voltage
0129 900000      E     MOV     DPTR,#dev_tension_f
012C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 664
012F         ?C0113:
                                           ; SOURCE LINE # 668
012F 300005            JNB     interrupt_flag,?C0114
                                           ; SOURCE LINE # 669
0132 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 670
0134 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 671
0137         ?C0114:
                                           ; SOURCE LINE # 674
0137 900000      E     MOV     DPTR,#g_mem+03BH
013A E0                MOVX    A,@DPTR
013B 7004              JNZ     ?C0115
                                           ; SOURCE LINE # 675
013D F500        R     MOV     emg_1_status,A
                                           ; SOURCE LINE # 676
013F F500        R     MOV     emg_2_status,A
                                           ; SOURCE LINE # 677
0141         ?C0115:
                                           ; SOURCE LINE # 680
0141 900000      E     MOV     DPTR,#c_mem+02H
0144 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 57  

0145 6406              XRL     A,#06H
0147 6003              JZ      $ + 5H
0149 020000      R     LJMP    ?C0116
                                           ; SOURCE LINE # 684
014C E500        R     MOV     A,UD_status
014E 14                DEC     A
014F 7003              JNZ     $ + 5H
0151 020000      R     LJMP    ?C0123
0154 14                DEC     A
0155 7003              JNZ     $ + 5H
0157 020000      R     LJMP    ?C0124
015A 14                DEC     A
015B 7003              JNZ     $ + 5H
015D 020000      R     LJMP    ?C0127
0160 14                DEC     A
0161 7003              JNZ     $ + 5H
0163 020000      R     LJMP    ?C0131
0166 2404              ADD     A,#04H
0168 6003              JZ      $ + 5H
016A 020000      R     LJMP    ?C0117
                                           ; SOURCE LINE # 685
016D         ?C0118:
                                           ; SOURCE LINE # 686
016D 900000      E     MOV     DPTR,#ADC_buf+04H
0170 E0                MOVX    A,@DPTR
0171 FE                MOV     R6,A
0172 A3                INC     DPTR
0173 E0                MOVX    A,@DPTR
0174 FF                MOV     R7,A
0175 EE                MOV     A,R6
0176 33                RLC     A
0177 95E0              SUBB    A,ACC
0179 8F00        R     MOV     i_aux+03H,R7
017B 8E00        R     MOV     i_aux+02H,R6
017D F500        R     MOV     i_aux+01H,A
017F F500        R     MOV     i_aux,A
                                           ; SOURCE LINE # 688
0181 C3                CLR     C
0182 E500        R     MOV     A,i_aux+03H
0184 9500        R     SUBB    A,UD_mean_value+03H
0186 FF                MOV     R7,A
0187 E500        R     MOV     A,i_aux+02H
0189 9500        R     SUBB    A,UD_mean_value+02H
018B FE                MOV     R6,A
018C E500        R     MOV     A,i_aux+01H
018E 9500        R     SUBB    A,UD_mean_value+01H
0190 FD                MOV     R5,A
0191 E500        R     MOV     A,i_aux
0193 9500        R     SUBB    A,UD_mean_value
0195 FC                MOV     R4,A
0196 120000      E     LCALL   ?C?FCASTL
0199 C004              PUSH    AR4
019B C005              PUSH    AR5
019D C006              PUSH    AR6
019F C007              PUSH    AR7
01A1 AF00        R     MOV     R7,UD_mean_value+03H
01A3 AE00        R     MOV     R6,UD_mean_value+02H
01A5 AD00        R     MOV     R5,UD_mean_value+01H
01A7 AC00        R     MOV     R4,UD_mean_value
01A9 EC                MOV     A,R4
01AA 120000      E     LCALL   ?C?FCASTL
01AD A804              MOV     R0,AR4
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 58  

01AF A905              MOV     R1,AR5
01B1 AA06              MOV     R2,AR6
01B3 AB07              MOV     R3,AR7
01B5 D007              POP     AR7
01B7 D006              POP     AR6
01B9 D005              POP     AR5
01BB D004              POP     AR4
01BD 120000      E     LCALL   ?C?FPDIV
01C0 C004              PUSH    AR4
01C2 C005              PUSH    AR5
01C4 C006              PUSH    AR6
01C6 C007              PUSH    AR7
01C8 900000      E     MOV     DPTR,#g_mem+06EH
01CB E0                MOVX    A,@DPTR
01CC FC                MOV     R4,A
01CD A3                INC     DPTR
01CE E0                MOVX    A,@DPTR
01CF FD                MOV     R5,A
01D0 E4                CLR     A
01D1 120000      E     LCALL   ?C?FCASTI
01D4 D003              POP     AR3
01D6 D002              POP     AR2
01D8 D001              POP     AR1
01DA D000              POP     AR0
01DC 120000      E     LCALL   ?C?FPMUL
01DF 120000      E     LCALL   ?C?CASTF
01E2 8F00        R     MOV     i_aux+03H,R7
01E4 8E00        R     MOV     i_aux+02H,R6
01E6 8D00        R     MOV     i_aux+01H,R5
01E8 8C00        R     MOV     i_aux,R4
                                           ; SOURCE LINE # 690
01EA 300005            JNB     interrupt_flag,?C0119
                                           ; SOURCE LINE # 691
01ED C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 692
01EF 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 693
01F2         ?C0119:
                                           ; SOURCE LINE # 696
01F2 7F00              MOV     R7,#00H
01F4 7EFC              MOV     R6,#0FCH
01F6 7DFF              MOV     R5,#0FFH
01F8 7CFF              MOV     R4,#0FFH
01FA AB00        R     MOV     R3,i_aux+03H
01FC AA00        R     MOV     R2,i_aux+02H
01FE A900        R     MOV     R1,i_aux+01H
0200 A800        R     MOV     R0,i_aux
0202 C3                CLR     C
0203 120000      E     LCALL   ?C?SLCMP
0206 500C              JNC     ?C0120
                                           ; SOURCE LINE # 697
0208 750000      R     MOV     i_aux+03H,#00H
020B 7500FC      R     MOV     i_aux+02H,#0FCH
020E 7500FF      R     MOV     i_aux+01H,#0FFH
0211 7500FF      R     MOV     i_aux,#0FFH
0214         ?C0120:
                                           ; SOURCE LINE # 698
0214 E4                CLR     A
0215 FF                MOV     R7,A
0216 7E04              MOV     R6,#04H
0218 FD                MOV     R5,A
0219 FC                MOV     R4,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 59  

021A AB00        R     MOV     R3,i_aux+03H
021C AA00        R     MOV     R2,i_aux+02H
021E A900        R     MOV     R1,i_aux+01H
0220 A800        R     MOV     R0,i_aux
0222 D3                SETB    C
0223 120000      E     LCALL   ?C?SLCMP
0226 400A              JC      ?C0121
                                           ; SOURCE LINE # 699
0228 E4                CLR     A
0229 F500        R     MOV     i_aux+03H,A
022B 750004      R     MOV     i_aux+02H,#04H
022E F500        R     MOV     i_aux+01H,A
0230 F500        R     MOV     i_aux,A
0232         ?C0121:
                                           ; SOURCE LINE # 701
0232 900000      E     MOV     DPTR,#g_meas+031H
0235 E500        R     MOV     A,i_aux+02H
0237 F0                MOVX    @DPTR,A
0238 A3                INC     DPTR
0239 E500        R     MOV     A,i_aux+03H
023B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 703
023C 200003      E     JB      interrupt_flag,$ + 6H
023F 020000      R     LJMP    ?C0117
                                           ; SOURCE LINE # 704
0242 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 705
0244 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 708
0247 020000      R     LJMP    ?C0117
                                           ; SOURCE LINE # 710
024A         ?C0123:
                                           ; SOURCE LINE # 711
024A E4                CLR     A
024B F500        R     MOV     UD_counter,A
024D F500        R     MOV     UD_counter+01H,A
                                           ; SOURCE LINE # 712
024F F500        R     MOV     UD_mean_value+03H,A
0251 F500        R     MOV     UD_mean_value+02H,A
0253 F500        R     MOV     UD_mean_value+01H,A
0255 F500        R     MOV     UD_mean_value,A
                                           ; SOURCE LINE # 713
0257 750004      R     MOV     UD_status,#04H
                                           ; SOURCE LINE # 715
025A 020000      R     LJMP    ?C0117
                                           ; SOURCE LINE # 717
025D         ?C0124:
                                           ; SOURCE LINE # 718
025D 0500        R     INC     UD_counter+01H
025F E500        R     MOV     A,UD_counter+01H
0261 7002              JNZ     ?C0213
0263 0500        R     INC     UD_counter
0265         ?C0213:
                                           ; SOURCE LINE # 719
0265 6464              XRL     A,#064H
0267 4500        R     ORL     A,UD_counter
0269 707F              JNZ     ?C0117
                                           ; SOURCE LINE # 720
026B F500        R     MOV     UD_counter,A
026D F500        R     MOV     UD_counter+01H,A
                                           ; SOURCE LINE # 722
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 60  

026F 300005            JNB     interrupt_flag,?C0126
                                           ; SOURCE LINE # 723
0272 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 724
0274 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 725
0277         ?C0126:
                                           ; SOURCE LINE # 727
0277 750003      R     MOV     UD_status,#03H
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 730
027A 806E              SJMP    ?C0117
                                           ; SOURCE LINE # 732
027C         ?C0127:
                                           ; SOURCE LINE # 734
027C 0500        R     INC     UD_counter+01H
027E E500        R     MOV     A,UD_counter+01H
0280 7002              JNZ     ?C0214
0282 0500        R     INC     UD_counter
0284         ?C0214:
                                           ; SOURCE LINE # 735
0284 900000      E     MOV     DPTR,#ADC_buf+04H
0287 E0                MOVX    A,@DPTR
0288 FE                MOV     R6,A
0289 A3                INC     DPTR
028A E0                MOVX    A,@DPTR
028B FF                MOV     R7,A
028C EE                MOV     A,R6
028D 33                RLC     A
028E 95E0              SUBB    A,ACC
0290 FD                MOV     R5,A
0291 FC                MOV     R4,A
0292 E500        R     MOV     A,UD_mean_value+03H
0294 2F                ADD     A,R7
0295 F500        R     MOV     UD_mean_value+03H,A
0297 E500        R     MOV     A,UD_mean_value+02H
0299 3E                ADDC    A,R6
029A F500        R     MOV     UD_mean_value+02H,A
029C E500        R     MOV     A,UD_mean_value+01H
029E 3D                ADDC    A,R5
029F F500        R     MOV     UD_mean_value+01H,A
02A1 E500        R     MOV     A,UD_mean_value
02A3 3C                ADDC    A,R4
02A4 F500        R     MOV     UD_mean_value,A
                                           ; SOURCE LINE # 737
02A6 300005            JNB     interrupt_flag,?C0128
                                           ; SOURCE LINE # 738
02A9 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 739
02AB 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 740
02AE         ?C0128:
                                           ; SOURCE LINE # 742
02AE E500        R     MOV     A,UD_counter+01H
02B0 64C8              XRL     A,#0C8H
02B2 4500        R     ORL     A,UD_counter
02B4 7034              JNZ     ?C0117
                                           ; SOURCE LINE # 743
02B6 AF00        R     MOV     R7,UD_mean_value+03H
02B8 AE00        R     MOV     R6,UD_mean_value+02H
02BA AD00        R     MOV     R5,UD_mean_value+01H
02BC AC00        R     MOV     R4,UD_mean_value
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 61  

02BE 7BC8              MOV     R3,#0C8H
02C0 FA                MOV     R2,A
02C1 F9                MOV     R1,A
02C2 F8                MOV     R0,A
02C3 120000      E     LCALL   ?C?SLDIV
02C6 8F00        R     MOV     UD_mean_value+03H,R7
02C8 8E00        R     MOV     UD_mean_value+02H,R6
02CA 8D00        R     MOV     UD_mean_value+01H,R5
02CC 8C00        R     MOV     UD_mean_value,R4
                                           ; SOURCE LINE # 745
02CE 300005            JNB     interrupt_flag,?C0130
                                           ; SOURCE LINE # 746
02D1 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 747
02D3 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 748
02D6         ?C0130:
                                           ; SOURCE LINE # 750
02D6 E4                CLR     A
02D7 F500        R     MOV     UD_counter,A
02D9 F500        R     MOV     UD_counter+01H,A
                                           ; SOURCE LINE # 751
02DB F500        R     MOV     UD_status,A
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 753
02DD 800B              SJMP    ?C0117
                                           ; SOURCE LINE # 755
02DF         ?C0131:
                                           ; SOURCE LINE # 756
02DF E500        R     MOV     A,emg_1_status
02E1 7007              JNZ     ?C0117
02E3 E500        R     MOV     A,emg_2_status
02E5 7003              JNZ     ?C0117
                                           ; SOURCE LINE # 757
02E7 750002      R     MOV     UD_status,#02H
                                           ; SOURCE LINE # 758
                                           ; SOURCE LINE # 759
02EA         ?C0117:
                                           ; SOURCE LINE # 761
02EA 300005            JNB     interrupt_flag,?C0133
                                           ; SOURCE LINE # 762
02ED C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 763
02EF 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 764
02F2         ?C0133:
                                           ; SOURCE LINE # 766
02F2 E500        R     MOV     A,LR_status
02F4 14                DEC     A
02F5 7003              JNZ     $ + 5H
02F7 020000      R     LJMP    ?C0140
02FA 14                DEC     A
02FB 7003              JNZ     $ + 5H
02FD 020000      R     LJMP    ?C0141
0300 14                DEC     A
0301 7003              JNZ     $ + 5H
0303 020000      R     LJMP    ?C0144
0306 14                DEC     A
0307 7003              JNZ     $ + 5H
0309 020000      R     LJMP    ?C0147
030C 2404              ADD     A,#04H
030E 6003              JZ      $ + 5H
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 62  

0310 020000      R     LJMP    ?C0134
                                           ; SOURCE LINE # 767
0313         ?C0135:
                                           ; SOURCE LINE # 768
0313 900000      E     MOV     DPTR,#ADC_buf+06H
0316 E0                MOVX    A,@DPTR
0317 FE                MOV     R6,A
0318 A3                INC     DPTR
0319 E0                MOVX    A,@DPTR
031A FF                MOV     R7,A
031B EE                MOV     A,R6
031C 33                RLC     A
031D 95E0              SUBB    A,ACC
031F 8F00        R     MOV     i_aux+03H,R7
0321 8E00        R     MOV     i_aux+02H,R6
0323 F500        R     MOV     i_aux+01H,A
0325 F500        R     MOV     i_aux,A
                                           ; SOURCE LINE # 770
0327 C3                CLR     C
0328 E500        R     MOV     A,i_aux+03H
032A 9500        R     SUBB    A,LR_mean_value+03H
032C FF                MOV     R7,A
032D E500        R     MOV     A,i_aux+02H
032F 9500        R     SUBB    A,LR_mean_value+02H
0331 FE                MOV     R6,A
0332 E500        R     MOV     A,i_aux+01H
0334 9500        R     SUBB    A,LR_mean_value+01H
0336 FD                MOV     R5,A
0337 E500        R     MOV     A,i_aux
0339 9500        R     SUBB    A,LR_mean_value
033B FC                MOV     R4,A
033C 120000      E     LCALL   ?C?FCASTL
033F C004              PUSH    AR4
0341 C005              PUSH    AR5
0343 C006              PUSH    AR6
0345 C007              PUSH    AR7
0347 AF00        R     MOV     R7,LR_mean_value+03H
0349 AE00        R     MOV     R6,LR_mean_value+02H
034B AD00        R     MOV     R5,LR_mean_value+01H
034D AC00        R     MOV     R4,LR_mean_value
034F EC                MOV     A,R4
0350 120000      E     LCALL   ?C?FCASTL
0353 A804              MOV     R0,AR4
0355 A905              MOV     R1,AR5
0357 AA06              MOV     R2,AR6
0359 AB07              MOV     R3,AR7
035B D007              POP     AR7
035D D006              POP     AR6
035F D005              POP     AR5
0361 D004              POP     AR4
0363 120000      E     LCALL   ?C?FPDIV
0366 C004              PUSH    AR4
0368 C005              PUSH    AR5
036A C006              PUSH    AR6
036C C007              PUSH    AR7
036E 900000      E     MOV     DPTR,#g_mem+06EH
0371 E0                MOVX    A,@DPTR
0372 FC                MOV     R4,A
0373 A3                INC     DPTR
0374 E0                MOVX    A,@DPTR
0375 FD                MOV     R5,A
0376 E4                CLR     A
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 63  

0377 120000      E     LCALL   ?C?FCASTI
037A D003              POP     AR3
037C D002              POP     AR2
037E D001              POP     AR1
0380 D000              POP     AR0
0382 120000      E     LCALL   ?C?FPMUL
0385 120000      E     LCALL   ?C?CASTF
0388 8F00        R     MOV     i_aux+03H,R7
038A 8E00        R     MOV     i_aux+02H,R6
038C 8D00        R     MOV     i_aux+01H,R5
038E 8C00        R     MOV     i_aux,R4
                                           ; SOURCE LINE # 772
0390 300005            JNB     interrupt_flag,?C0136
                                           ; SOURCE LINE # 773
0393 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 774
0395 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 775
0398         ?C0136:
                                           ; SOURCE LINE # 778
0398 7F00              MOV     R7,#00H
039A 7EFC              MOV     R6,#0FCH
039C 7DFF              MOV     R5,#0FFH
039E 7CFF              MOV     R4,#0FFH
03A0 AB00        R     MOV     R3,i_aux+03H
03A2 AA00        R     MOV     R2,i_aux+02H
03A4 A900        R     MOV     R1,i_aux+01H
03A6 A800        R     MOV     R0,i_aux
03A8 C3                CLR     C
03A9 120000      E     LCALL   ?C?SLCMP
03AC 500C              JNC     ?C0137
                                           ; SOURCE LINE # 779
03AE 750000      R     MOV     i_aux+03H,#00H
03B1 7500FC      R     MOV     i_aux+02H,#0FCH
03B4 7500FF      R     MOV     i_aux+01H,#0FFH
03B7 7500FF      R     MOV     i_aux,#0FFH
03BA         ?C0137:
                                           ; SOURCE LINE # 780
03BA E4                CLR     A
03BB FF                MOV     R7,A
03BC 7E04              MOV     R6,#04H
03BE FD                MOV     R5,A
03BF FC                MOV     R4,A
03C0 AB00        R     MOV     R3,i_aux+03H
03C2 AA00        R     MOV     R2,i_aux+02H
03C4 A900        R     MOV     R1,i_aux+01H
03C6 A800        R     MOV     R0,i_aux
03C8 D3                SETB    C
03C9 120000      E     LCALL   ?C?SLCMP
03CC 400A              JC      ?C0138
                                           ; SOURCE LINE # 781
03CE E4                CLR     A
03CF F500        R     MOV     i_aux+03H,A
03D1 750004      R     MOV     i_aux+02H,#04H
03D4 F500        R     MOV     i_aux+01H,A
03D6 F500        R     MOV     i_aux,A
03D8         ?C0138:
                                           ; SOURCE LINE # 783
03D8 300005            JNB     interrupt_flag,?C0139
                                           ; SOURCE LINE # 784
03DB C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 785
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 64  

03DD 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 786
03E0         ?C0139:
                                           ; SOURCE LINE # 788
03E0 900000      E     MOV     DPTR,#g_meas+02FH
03E3 E500        R     MOV     A,i_aux+02H
03E5 F0                MOVX    @DPTR,A
03E6 A3                INC     DPTR
03E7 E500        R     MOV     A,i_aux+03H
03E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 790
03EA 020000      R     LJMP    ?C0134
                                           ; SOURCE LINE # 792
03ED         ?C0140:
                                           ; SOURCE LINE # 793
03ED E4                CLR     A
03EE F500        R     MOV     LR_counter,A
03F0 F500        R     MOV     LR_counter+01H,A
                                           ; SOURCE LINE # 794
03F2 F500        R     MOV     LR_mean_value+03H,A
03F4 F500        R     MOV     LR_mean_value+02H,A
03F6 F500        R     MOV     LR_mean_value+01H,A
03F8 F500        R     MOV     LR_mean_value,A
                                           ; SOURCE LINE # 795
03FA 750004      R     MOV     LR_status,#04H
                                           ; SOURCE LINE # 796
03FD 020000      R     LJMP    ?C0134
                                           ; SOURCE LINE # 798
0400         ?C0141:
                                           ; SOURCE LINE # 799
0400 0500        R     INC     LR_counter+01H
0402 E500        R     MOV     A,LR_counter+01H
0404 7002              JNZ     ?C0215
0406 0500        R     INC     LR_counter
0408         ?C0215:
                                           ; SOURCE LINE # 800
0408 6464              XRL     A,#064H
040A 4500        R     ORL     A,LR_counter
040C 707B              JNZ     ?C0134
                                           ; SOURCE LINE # 801
040E F500        R     MOV     LR_counter,A
0410 F500        R     MOV     LR_counter+01H,A
                                           ; SOURCE LINE # 803
0412 300005            JNB     interrupt_flag,?C0143
                                           ; SOURCE LINE # 804
0415 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 805
0417 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 806
041A         ?C0143:
                                           ; SOURCE LINE # 808
041A 750003      R     MOV     LR_status,#03H
                                           ; SOURCE LINE # 809
                                           ; SOURCE LINE # 810
041D 806A              SJMP    ?C0134
                                           ; SOURCE LINE # 812
041F         ?C0144:
                                           ; SOURCE LINE # 814
041F 0500        R     INC     LR_counter+01H
0421 E500        R     MOV     A,LR_counter+01H
0423 7002              JNZ     ?C0216
0425 0500        R     INC     LR_counter
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 65  

0427         ?C0216:
                                           ; SOURCE LINE # 815
0427 900000      E     MOV     DPTR,#ADC_buf+06H
042A E0                MOVX    A,@DPTR
042B FE                MOV     R6,A
042C A3                INC     DPTR
042D E0                MOVX    A,@DPTR
042E FF                MOV     R7,A
042F EE                MOV     A,R6
0430 33                RLC     A
0431 95E0              SUBB    A,ACC
0433 FD                MOV     R5,A
0434 FC                MOV     R4,A
0435 E500        R     MOV     A,LR_mean_value+03H
0437 2F                ADD     A,R7
0438 F500        R     MOV     LR_mean_value+03H,A
043A E500        R     MOV     A,LR_mean_value+02H
043C 3E                ADDC    A,R6
043D F500        R     MOV     LR_mean_value+02H,A
043F E500        R     MOV     A,LR_mean_value+01H
0441 3D                ADDC    A,R5
0442 F500        R     MOV     LR_mean_value+01H,A
0444 E500        R     MOV     A,LR_mean_value
0446 3C                ADDC    A,R4
0447 F500        R     MOV     LR_mean_value,A
                                           ; SOURCE LINE # 816
0449 E500        R     MOV     A,LR_counter+01H
044B 64C8              XRL     A,#0C8H
044D 4500        R     ORL     A,LR_counter
044F 7038              JNZ     ?C0134
                                           ; SOURCE LINE # 817
0451 AF00        R     MOV     R7,LR_mean_value+03H
0453 AE00        R     MOV     R6,LR_mean_value+02H
0455 AD00        R     MOV     R5,LR_mean_value+01H
0457 AC00        R     MOV     R4,LR_mean_value
0459 7BC8              MOV     R3,#0C8H
045B FA                MOV     R2,A
045C F9                MOV     R1,A
045D F8                MOV     R0,A
045E 120000      E     LCALL   ?C?SLDIV
0461 8F00        R     MOV     LR_mean_value+03H,R7
0463 8E00        R     MOV     LR_mean_value+02H,R6
0465 8D00        R     MOV     LR_mean_value+01H,R5
0467 8C00        R     MOV     LR_mean_value,R4
                                           ; SOURCE LINE # 819
0469 300005            JNB     interrupt_flag,?C0146
                                           ; SOURCE LINE # 820
046C C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 821
046E 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 822
0471         ?C0146:
                                           ; SOURCE LINE # 824
0471 E4                CLR     A
0472 F500        R     MOV     LR_counter,A
0474 F500        R     MOV     LR_counter+01H,A
                                           ; SOURCE LINE # 825
0476 F500        R     MOV     LR_status,A
                                           ; SOURCE LINE # 826
                                           ; SOURCE LINE # 827
0478 800F              SJMP    ?C0134
                                           ; SOURCE LINE # 829
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 66  

047A         ?C0147:
                                           ; SOURCE LINE # 830
047A E500        R     MOV     A,emg_1_status
047C 700B              JNZ     ?C0134
047E E500        R     MOV     A,emg_2_status
0480 7007              JNZ     ?C0134
0482 E500        R     MOV     A,UD_status
0484 7003              JNZ     ?C0134
                                           ; SOURCE LINE # 831
0486 750002      R     MOV     LR_status,#02H
                                           ; SOURCE LINE # 832
                                           ; SOURCE LINE # 833
0489         ?C0134:
                                           ; SOURCE LINE # 835
0489 200003      E     JB      interrupt_flag,$ + 6H
048C 020000      R     LJMP    ?C0196
                                           ; SOURCE LINE # 836
048F C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 837
0491 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 838
                                           ; SOURCE LINE # 840
0494 020000      R     LJMP    ?C0196
0497         ?C0116:
                                           ; SOURCE LINE # 841
                                           ; SOURCE LINE # 847
0497 E500        R     MOV     A,emg_1_status
0499 14                DEC     A
049A 7003              JNZ     $ + 5H
049C 020000      R     LJMP    ?C0159
049F 14                DEC     A
04A0 7003              JNZ     $ + 5H
04A2 020000      R     LJMP    ?C0160
04A5 14                DEC     A
04A6 7003              JNZ     $ + 5H
04A8 020000      R     LJMP    ?C0163
04AB 2403              ADD     A,#03H
04AD 6003              JZ      $ + 5H
04AF 020000      R     LJMP    ?C0151
                                           ; SOURCE LINE # 848
04B2         ?C0152:
                                           ; SOURCE LINE # 849
04B2 900000      E     MOV     DPTR,#ADC_buf+04H
04B5 E0                MOVX    A,@DPTR
04B6 FE                MOV     R6,A
04B7 A3                INC     DPTR
04B8 E0                MOVX    A,@DPTR
04B9 FF                MOV     R7,A
04BA EE                MOV     A,R6
04BB 33                RLC     A
04BC 95E0              SUBB    A,ACC
04BE 8F00        R     MOV     i_aux+03H,R7
04C0 8E00        R     MOV     i_aux+02H,R6
04C2 F500        R     MOV     i_aux+01H,A
04C4 F500        R     MOV     i_aux,A
                                           ; SOURCE LINE # 850
04C6 E4                CLR     A
04C7 FF                MOV     R7,A
04C8 FE                MOV     R6,A
04C9 FD                MOV     R5,A
04CA FC                MOV     R4,A
04CB AB00        R     MOV     R3,i_aux+03H
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 67  

04CD AA00        R     MOV     R2,i_aux+02H
04CF A900        R     MOV     R1,i_aux+01H
04D1 A800        R     MOV     R0,i_aux
04D3 C3                CLR     C
04D4 120000      E     LCALL   ?C?SLCMP
04D7 5009              JNC     ?C0153
                                           ; SOURCE LINE # 851
04D9 E4                CLR     A
04DA F500        R     MOV     i_aux+03H,A
04DC F500        R     MOV     i_aux+02H,A
04DE F500        R     MOV     i_aux+01H,A
04E0 F500        R     MOV     i_aux,A
04E2         ?C0153:
                                           ; SOURCE LINE # 852
04E2 AF00        R     MOV     R7,i_aux+03H
04E4 AE00        R     MOV     R6,i_aux+02H
04E6 AD00        R     MOV     R5,i_aux+01H
04E8 AC00        R     MOV     R4,i_aux
04EA 120000      E     LCALL   _filter_ch1
04ED 8F00        R     MOV     i_aux+03H,R7
04EF 8E00        R     MOV     i_aux+02H,R6
04F1 8D00        R     MOV     i_aux+01H,R5
04F3 8C00        R     MOV     i_aux,R4
                                           ; SOURCE LINE # 853
04F5 780A              MOV     R0,#0AH
04F7 120000      E     LCALL   ?C?LSHL
04FA 900000      E     MOV     DPTR,#g_mem+03CH
04FD E0                MOVX    A,@DPTR
04FE F8                MOV     R0,A
04FF A3                INC     DPTR
0500 E0                MOVX    A,@DPTR
0501 F9                MOV     R1,A
0502 A3                INC     DPTR
0503 E0                MOVX    A,@DPTR
0504 FA                MOV     R2,A
0505 A3                INC     DPTR
0506 E0                MOVX    A,@DPTR
0507 FB                MOV     R3,A
0508 120000      E     LCALL   ?C?ULDIV
050B 8F00        R     MOV     i_aux+03H,R7
050D 8E00        R     MOV     i_aux+02H,R6
050F 8D00        R     MOV     i_aux+01H,R5
0511 8C00        R     MOV     i_aux,R4
                                           ; SOURCE LINE # 855
0513 300005            JNB     interrupt_flag,?C0154
                                           ; SOURCE LINE # 856
0516 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 857
0518 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 858
051B         ?C0154:
                                           ; SOURCE LINE # 860
051B E4                CLR     A
051C FF                MOV     R7,A
051D FE                MOV     R6,A
051E FD                MOV     R5,A
051F FC                MOV     R4,A
0520 AB00        R     MOV     R3,i_aux+03H
0522 AA00        R     MOV     R2,i_aux+02H
0524 A900        R     MOV     R1,i_aux+01H
0526 A800        R     MOV     R0,i_aux
0528 C3                CLR     C
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 68  

0529 120000      E     LCALL   ?C?SLCMP
052C 500B              JNC     ?C0155
                                           ; SOURCE LINE # 861
052E E4                CLR     A
052F F500        R     MOV     i_aux+03H,A
0531 F500        R     MOV     i_aux+02H,A
0533 F500        R     MOV     i_aux+01H,A
0535 F500        R     MOV     i_aux,A
0537 801E              SJMP    ?C0156
0539         ?C0155:
                                           ; SOURCE LINE # 863
0539 E4                CLR     A
053A FF                MOV     R7,A
053B 7E04              MOV     R6,#04H
053D FD                MOV     R5,A
053E FC                MOV     R4,A
053F AB00        R     MOV     R3,i_aux+03H
0541 AA00        R     MOV     R2,i_aux+02H
0543 A900        R     MOV     R1,i_aux+01H
0545 A800        R     MOV     R0,i_aux
0547 D3                SETB    C
0548 120000      E     LCALL   ?C?SLCMP
054B 400A              JC      ?C0156
                                           ; SOURCE LINE # 864
054D E4                CLR     A
054E F500        R     MOV     i_aux+03H,A
0550 750004      R     MOV     i_aux+02H,#04H
0553 F500        R     MOV     i_aux+01H,A
0555 F500        R     MOV     i_aux,A
0557         ?C0156:
                                           ; SOURCE LINE # 866
0557 AF00        R     MOV     R7,i_aux+03H
0559 AE00        R     MOV     R6,i_aux+02H
055B AD00        R     MOV     R5,i_aux+01H
055D AC00        R     MOV     R4,i_aux
055F 900000      E     MOV     DPTR,#g_meas+0FH
0562 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 868
0565 200003      E     JB      interrupt_flag,$ + 6H
0568 020000      R     LJMP    ?C0151
                                           ; SOURCE LINE # 869
056B C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 870
056D 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 871
                                           ; SOURCE LINE # 873
0570 020000      R     LJMP    ?C0151
                                           ; SOURCE LINE # 875
0573         ?C0159:
                                           ; SOURCE LINE # 876
0573 E4                CLR     A
0574 900000      R     MOV     DPTR,#emg_counter_1
0577 F0                MOVX    @DPTR,A
0578 A3                INC     DPTR
0579 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 877
057A FF                MOV     R7,A
057B FE                MOV     R6,A
057C FD                MOV     R5,A
057D FC                MOV     R4,A
057E 900000      E     MOV     DPTR,#g_mem+03CH
0581 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 69  

                                           ; SOURCE LINE # 878
0584 750002      R     MOV     emg_1_status,#02H
                                           ; SOURCE LINE # 880
0587 020000      R     LJMP    ?C0151
                                           ; SOURCE LINE # 882
058A         ?C0160:
                                           ; SOURCE LINE # 883
058A 900000      R     MOV     DPTR,#emg_counter_1+01H
058D E0                MOVX    A,@DPTR
058E 04                INC     A
058F F0                MOVX    @DPTR,A
0590 7006              JNZ     ?C0217
0592 900000      R     MOV     DPTR,#emg_counter_1
0595 E0                MOVX    A,@DPTR
0596 04                INC     A
0597 F0                MOVX    @DPTR,A
0598         ?C0217:
                                           ; SOURCE LINE # 884
0598 900000      R     MOV     DPTR,#emg_counter_1
059B E0                MOVX    A,@DPTR
059C 6401              XRL     A,#01H
059E 7004              JNZ     ?C0218
05A0 A3                INC     DPTR
05A1 E0                MOVX    A,@DPTR
05A2 64F4              XRL     A,#0F4H
05A4         ?C0218:
05A4 6003              JZ      $ + 5H
05A6 020000      R     LJMP    ?C0151
                                           ; SOURCE LINE # 885
05A9 900000      R     MOV     DPTR,#emg_counter_1
05AC F0                MOVX    @DPTR,A
05AD A3                INC     DPTR
05AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 887
05AF 7F01              MOV     R7,#01H
05B1 120000      E     LCALL   _LED_CTRL_Write
                                           ; SOURCE LINE # 888
05B4 E4                CLR     A
05B5 FF                MOV     R7,A
05B6 120000      E     LCALL   _LED_BLINK_EN_Write
                                           ; SOURCE LINE # 890
05B9 300005            JNB     interrupt_flag,?C0162
                                           ; SOURCE LINE # 891
05BC C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 892
05BE 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 893
05C1         ?C0162:
                                           ; SOURCE LINE # 895
05C1 750003      R     MOV     emg_1_status,#03H
                                           ; SOURCE LINE # 896
                                           ; SOURCE LINE # 897
05C4 020000      R     LJMP    ?C0151
                                           ; SOURCE LINE # 899
05C7         ?C0163:
                                           ; SOURCE LINE # 901
05C7 900000      R     MOV     DPTR,#emg_counter_1+01H
05CA E0                MOVX    A,@DPTR
05CB 04                INC     A
05CC F0                MOVX    @DPTR,A
05CD 7006              JNZ     ?C0219
05CF 900000      R     MOV     DPTR,#emg_counter_1
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 70  

05D2 E0                MOVX    A,@DPTR
05D3 04                INC     A
05D4 F0                MOVX    @DPTR,A
05D5         ?C0219:
                                           ; SOURCE LINE # 902
05D5 C3                CLR     C
05D6 900000      E     MOV     DPTR,#ADC_buf+04H
05D9 E0                MOVX    A,@DPTR
05DA 6480              XRL     A,#080H
05DC 9480              SUBB    A,#080H
05DE 5004              JNC     ?C0164
                                           ; SOURCE LINE # 903
05E0 E4                CLR     A
05E1 F0                MOVX    @DPTR,A
05E2 A3                INC     DPTR
05E3 F0                MOVX    @DPTR,A
05E4         ?C0164:
                                           ; SOURCE LINE # 904
05E4 900000      E     MOV     DPTR,#g_mem+03CH
05E7 E0                MOVX    A,@DPTR
05E8 F8                MOV     R0,A
05E9 A3                INC     DPTR
05EA E0                MOVX    A,@DPTR
05EB F9                MOV     R1,A
05EC A3                INC     DPTR
05ED E0                MOVX    A,@DPTR
05EE FA                MOV     R2,A
05EF A3                INC     DPTR
05F0 E0                MOVX    A,@DPTR
05F1 FB                MOV     R3,A
05F2 C000              PUSH    AR0
05F4 C001              PUSH    AR1
05F6 C002              PUSH    AR2
05F8 C003              PUSH    AR3
05FA 900000      E     MOV     DPTR,#ADC_buf+04H
05FD E0                MOVX    A,@DPTR
05FE FE                MOV     R6,A
05FF A3                INC     DPTR
0600 E0                MOVX    A,@DPTR
0601 FF                MOV     R7,A
0602 EE                MOV     A,R6
0603 33                RLC     A
0604 95E0              SUBB    A,ACC
0606 FD                MOV     R5,A
0607 FC                MOV     R4,A
0608 120000      E     LCALL   _filter_ch1
060B D003              POP     AR3
060D D002              POP     AR2
060F D001              POP     AR1
0611 D000              POP     AR0
0613 EB                MOV     A,R3
0614 2F                ADD     A,R7
0615 FF                MOV     R7,A
0616 EA                MOV     A,R2
0617 3E                ADDC    A,R6
0618 FE                MOV     R6,A
0619 E9                MOV     A,R1
061A 3D                ADDC    A,R5
061B FD                MOV     R5,A
061C E8                MOV     A,R0
061D 3C                ADDC    A,R4
061E FC                MOV     R4,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 71  

061F 900000      E     MOV     DPTR,#g_mem+03CH
0622 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 906
0625 300005            JNB     interrupt_flag,?C0165
                                           ; SOURCE LINE # 907
0628 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 908
062A 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 909
062D         ?C0165:
                                           ; SOURCE LINE # 911
062D 900000      R     MOV     DPTR,#emg_counter_1
0630 E0                MOVX    A,@DPTR
0631 6403              XRL     A,#03H
0633 7004              JNZ     ?C0220
0635 A3                INC     DPTR
0636 E0                MOVX    A,@DPTR
0637 64E8              XRL     A,#0E8H
0639         ?C0220:
0639 7039              JNZ     ?C0151
                                           ; SOURCE LINE # 912
063B 900000      E     MOV     DPTR,#g_mem+03CH
063E E0                MOVX    A,@DPTR
063F FC                MOV     R4,A
0640 A3                INC     DPTR
0641 E0                MOVX    A,@DPTR
0642 FD                MOV     R5,A
0643 A3                INC     DPTR
0644 E0                MOVX    A,@DPTR
0645 FE                MOV     R6,A
0646 A3                INC     DPTR
0647 E0                MOVX    A,@DPTR
0648 FF                MOV     R7,A
0649 E4                CLR     A
064A 7BE8              MOV     R3,#0E8H
064C 7A03              MOV     R2,#03H
064E F9                MOV     R1,A
064F F8                MOV     R0,A
0650 120000      E     LCALL   ?C?ULDIV
0653 900000      E     MOV     DPTR,#g_mem+03CH
0656 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 914
0659 300005            JNB     interrupt_flag,?C0167
                                           ; SOURCE LINE # 915
065C C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 916
065E 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 917
0661         ?C0167:
                                           ; SOURCE LINE # 919
0661 E4                CLR     A
0662 FF                MOV     R7,A
0663 120000      E     LCALL   _LED_CTRL_Write
                                           ; SOURCE LINE # 920
0666 E4                CLR     A
0667 FF                MOV     R7,A
0668 120000      E     LCALL   _LED_BLINK_EN_Write
                                           ; SOURCE LINE # 922
066B E4                CLR     A
066C 900000      R     MOV     DPTR,#emg_counter_1
066F F0                MOVX    @DPTR,A
0670 A3                INC     DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 72  

0671 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 924
0672 F500        R     MOV     emg_1_status,A
                                           ; SOURCE LINE # 925
                                           ; SOURCE LINE # 926
                                           ; SOURCE LINE # 928
                                           ; SOURCE LINE # 929
                                           ; SOURCE LINE # 930
0674         ?C0151:
                                           ; SOURCE LINE # 932
0674 300005            JNB     interrupt_flag,?C0169
                                           ; SOURCE LINE # 933
0677 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 934
0679 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 935
067C         ?C0169:
                                           ; SOURCE LINE # 937
067C E500        R     MOV     A,emg_2_status
067E 14                DEC     A
067F 7003              JNZ     $ + 5H
0681 020000      R     LJMP    ?C0177
0684 14                DEC     A
0685 7003              JNZ     $ + 5H
0687 020000      R     LJMP    ?C0179
068A 14                DEC     A
068B 7003              JNZ     $ + 5H
068D 020000      R     LJMP    ?C0182
0690 14                DEC     A
0691 7003              JNZ     $ + 5H
0693 020000      R     LJMP    ?C0187
0696 14                DEC     A
0697 7003              JNZ     $ + 5H
0699 020000      R     LJMP    ?C0189
069C 2405              ADD     A,#05H
069E 6003              JZ      $ + 5H
06A0 020000      R     LJMP    ?C0170
                                           ; SOURCE LINE # 938
06A3         ?C0171:
                                           ; SOURCE LINE # 939
06A3 900000      E     MOV     DPTR,#ADC_buf+06H
06A6 E0                MOVX    A,@DPTR
06A7 FE                MOV     R6,A
06A8 A3                INC     DPTR
06A9 E0                MOVX    A,@DPTR
06AA FF                MOV     R7,A
06AB EE                MOV     A,R6
06AC 33                RLC     A
06AD 95E0              SUBB    A,ACC
06AF 8F00        R     MOV     i_aux+03H,R7
06B1 8E00        R     MOV     i_aux+02H,R6
06B3 F500        R     MOV     i_aux+01H,A
06B5 F500        R     MOV     i_aux,A
                                           ; SOURCE LINE # 940
06B7 E4                CLR     A
06B8 FF                MOV     R7,A
06B9 FE                MOV     R6,A
06BA FD                MOV     R5,A
06BB FC                MOV     R4,A
06BC AB00        R     MOV     R3,i_aux+03H
06BE AA00        R     MOV     R2,i_aux+02H
06C0 A900        R     MOV     R1,i_aux+01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 73  

06C2 A800        R     MOV     R0,i_aux
06C4 C3                CLR     C
06C5 120000      E     LCALL   ?C?SLCMP
06C8 5009              JNC     ?C0172
                                           ; SOURCE LINE # 941
06CA E4                CLR     A
06CB F500        R     MOV     i_aux+03H,A
06CD F500        R     MOV     i_aux+02H,A
06CF F500        R     MOV     i_aux+01H,A
06D1 F500        R     MOV     i_aux,A
06D3         ?C0172:
                                           ; SOURCE LINE # 942
06D3 AF00        R     MOV     R7,i_aux+03H
06D5 AE00        R     MOV     R6,i_aux+02H
06D7 AD00        R     MOV     R5,i_aux+01H
06D9 AC00        R     MOV     R4,i_aux
06DB 120000      E     LCALL   _filter_ch2
06DE 8F00        R     MOV     i_aux+03H,R7
06E0 8E00        R     MOV     i_aux+02H,R6
06E2 8D00        R     MOV     i_aux+01H,R5
06E4 8C00        R     MOV     i_aux,R4
                                           ; SOURCE LINE # 943
06E6 780A              MOV     R0,#0AH
06E8 120000      E     LCALL   ?C?LSHL
06EB 900000      E     MOV     DPTR,#g_mem+040H
06EE E0                MOVX    A,@DPTR
06EF F8                MOV     R0,A
06F0 A3                INC     DPTR
06F1 E0                MOVX    A,@DPTR
06F2 F9                MOV     R1,A
06F3 A3                INC     DPTR
06F4 E0                MOVX    A,@DPTR
06F5 FA                MOV     R2,A
06F6 A3                INC     DPTR
06F7 E0                MOVX    A,@DPTR
06F8 FB                MOV     R3,A
06F9 120000      E     LCALL   ?C?ULDIV
06FC 8F00        R     MOV     i_aux+03H,R7
06FE 8E00        R     MOV     i_aux+02H,R6
0700 8D00        R     MOV     i_aux+01H,R5
0702 8C00        R     MOV     i_aux,R4
                                           ; SOURCE LINE # 945
0704 300005            JNB     interrupt_flag,?C0173
                                           ; SOURCE LINE # 946
0707 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 947
0709 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 948
070C         ?C0173:
                                           ; SOURCE LINE # 950
070C E4                CLR     A
070D FF                MOV     R7,A
070E FE                MOV     R6,A
070F FD                MOV     R5,A
0710 FC                MOV     R4,A
0711 AB00        R     MOV     R3,i_aux+03H
0713 AA00        R     MOV     R2,i_aux+02H
0715 A900        R     MOV     R1,i_aux+01H
0717 A800        R     MOV     R0,i_aux
0719 C3                CLR     C
071A 120000      E     LCALL   ?C?SLCMP
071D 500B              JNC     ?C0174
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 74  

                                           ; SOURCE LINE # 951
071F E4                CLR     A
0720 F500        R     MOV     i_aux+03H,A
0722 F500        R     MOV     i_aux+02H,A
0724 F500        R     MOV     i_aux+01H,A
0726 F500        R     MOV     i_aux,A
0728 801E              SJMP    ?C0175
072A         ?C0174:
                                           ; SOURCE LINE # 953
072A E4                CLR     A
072B FF                MOV     R7,A
072C 7E04              MOV     R6,#04H
072E FD                MOV     R5,A
072F FC                MOV     R4,A
0730 AB00        R     MOV     R3,i_aux+03H
0732 AA00        R     MOV     R2,i_aux+02H
0734 A900        R     MOV     R1,i_aux+01H
0736 A800        R     MOV     R0,i_aux
0738 D3                SETB    C
0739 120000      E     LCALL   ?C?SLCMP
073C 400A              JC      ?C0175
                                           ; SOURCE LINE # 954
073E E4                CLR     A
073F F500        R     MOV     i_aux+03H,A
0741 750004      R     MOV     i_aux+02H,#04H
0744 F500        R     MOV     i_aux+01H,A
0746 F500        R     MOV     i_aux,A
0748         ?C0175:
                                           ; SOURCE LINE # 956
0748 AF00        R     MOV     R7,i_aux+03H
074A AE00        R     MOV     R6,i_aux+02H
074C AD00        R     MOV     R5,i_aux+01H
074E AC00        R     MOV     R4,i_aux
0750 900000      E     MOV     DPTR,#g_meas+013H
0753 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 958
0756 020000      R     LJMP    ?C0170
                                           ; SOURCE LINE # 960
0759         ?C0177:
                                           ; SOURCE LINE # 961
0759 E4                CLR     A
075A 900000      R     MOV     DPTR,#emg_counter_2
075D F0                MOVX    @DPTR,A
075E A3                INC     DPTR
075F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 962
0760 FF                MOV     R7,A
0761 FE                MOV     R6,A
0762 FD                MOV     R5,A
0763 FC                MOV     R4,A
0764 900000      E     MOV     DPTR,#g_mem+040H
0767 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 964
076A 300005            JNB     interrupt_flag,?C0178
                                           ; SOURCE LINE # 965
076D C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 966
076F 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 967
0772         ?C0178:
                                           ; SOURCE LINE # 969
0772 750004      R     MOV     emg_2_status,#04H
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 75  

                                           ; SOURCE LINE # 970
0775 020000      R     LJMP    ?C0170
                                           ; SOURCE LINE # 972
0778         ?C0179:
                                           ; SOURCE LINE # 973
0778 900000      R     MOV     DPTR,#emg_counter_2+01H
077B E0                MOVX    A,@DPTR
077C 04                INC     A
077D F0                MOVX    @DPTR,A
077E 7006              JNZ     ?C0221
0780 900000      R     MOV     DPTR,#emg_counter_2
0783 E0                MOVX    A,@DPTR
0784 04                INC     A
0785 F0                MOVX    @DPTR,A
0786         ?C0221:
                                           ; SOURCE LINE # 974
0786 900000      R     MOV     DPTR,#emg_counter_2
0789 E0                MOVX    A,@DPTR
078A 6401              XRL     A,#01H
078C 7004              JNZ     ?C0222
078E A3                INC     DPTR
078F E0                MOVX    A,@DPTR
0790 64F4              XRL     A,#0F4H
0792         ?C0222:
0792 6003              JZ      $ + 5H
0794 020000      R     LJMP    ?C0170
                                           ; SOURCE LINE # 975
0797 900000      R     MOV     DPTR,#emg_counter_2
079A F0                MOVX    @DPTR,A
079B A3                INC     DPTR
079C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 977
079D 7F01              MOV     R7,#01H
079F 120000      E     LCALL   _LED_CTRL_Write
                                           ; SOURCE LINE # 978
07A2 E4                CLR     A
07A3 FF                MOV     R7,A
07A4 120000      E     LCALL   _LED_BLINK_EN_Write
                                           ; SOURCE LINE # 980
07A7 300005            JNB     interrupt_flag,?C0181
                                           ; SOURCE LINE # 981
07AA C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 982
07AC 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 983
07AF         ?C0181:
                                           ; SOURCE LINE # 985
07AF 750003      R     MOV     emg_2_status,#03H
                                           ; SOURCE LINE # 986
                                           ; SOURCE LINE # 987
07B2 020000      R     LJMP    ?C0170
                                           ; SOURCE LINE # 989
07B5         ?C0182:
                                           ; SOURCE LINE # 991
07B5 900000      R     MOV     DPTR,#emg_counter_2+01H
07B8 E0                MOVX    A,@DPTR
07B9 04                INC     A
07BA F0                MOVX    @DPTR,A
07BB 7006              JNZ     ?C0223
07BD 900000      R     MOV     DPTR,#emg_counter_2
07C0 E0                MOVX    A,@DPTR
07C1 04                INC     A
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 76  

07C2 F0                MOVX    @DPTR,A
07C3         ?C0223:
                                           ; SOURCE LINE # 992
07C3 C3                CLR     C
07C4 900000      E     MOV     DPTR,#ADC_buf+06H
07C7 E0                MOVX    A,@DPTR
07C8 6480              XRL     A,#080H
07CA 9480              SUBB    A,#080H
07CC 5004              JNC     ?C0183
                                           ; SOURCE LINE # 993
07CE E4                CLR     A
07CF F0                MOVX    @DPTR,A
07D0 A3                INC     DPTR
07D1 F0                MOVX    @DPTR,A
07D2         ?C0183:
                                           ; SOURCE LINE # 994
07D2 900000      E     MOV     DPTR,#g_mem+040H
07D5 E0                MOVX    A,@DPTR
07D6 F8                MOV     R0,A
07D7 A3                INC     DPTR
07D8 E0                MOVX    A,@DPTR
07D9 F9                MOV     R1,A
07DA A3                INC     DPTR
07DB E0                MOVX    A,@DPTR
07DC FA                MOV     R2,A
07DD A3                INC     DPTR
07DE E0                MOVX    A,@DPTR
07DF FB                MOV     R3,A
07E0 C000              PUSH    AR0
07E2 C001              PUSH    AR1
07E4 C002              PUSH    AR2
07E6 C003              PUSH    AR3
07E8 900000      E     MOV     DPTR,#ADC_buf+06H
07EB E0                MOVX    A,@DPTR
07EC FE                MOV     R6,A
07ED A3                INC     DPTR
07EE E0                MOVX    A,@DPTR
07EF FF                MOV     R7,A
07F0 EE                MOV     A,R6
07F1 33                RLC     A
07F2 95E0              SUBB    A,ACC
07F4 FD                MOV     R5,A
07F5 FC                MOV     R4,A
07F6 120000      E     LCALL   _filter_ch2
07F9 D003              POP     AR3
07FB D002              POP     AR2
07FD D001              POP     AR1
07FF D000              POP     AR0
0801 EB                MOV     A,R3
0802 2F                ADD     A,R7
0803 FF                MOV     R7,A
0804 EA                MOV     A,R2
0805 3E                ADDC    A,R6
0806 FE                MOV     R6,A
0807 E9                MOV     A,R1
0808 3D                ADDC    A,R5
0809 FD                MOV     R5,A
080A E8                MOV     A,R0
080B 3C                ADDC    A,R4
080C FC                MOV     R4,A
080D 900000      E     MOV     DPTR,#g_mem+040H
0810 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 77  

                                           ; SOURCE LINE # 996
0813 300005            JNB     interrupt_flag,?C0184
                                           ; SOURCE LINE # 997
0816 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 998
0818 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 999
081B         ?C0184:
                                           ; SOURCE LINE # 1001
081B 900000      R     MOV     DPTR,#emg_counter_2
081E E0                MOVX    A,@DPTR
081F 6403              XRL     A,#03H
0821 7004              JNZ     ?C0224
0823 A3                INC     DPTR
0824 E0                MOVX    A,@DPTR
0825 64E8              XRL     A,#0E8H
0827         ?C0224:
0827 6003              JZ      $ + 5H
0829 020000      R     LJMP    ?C0170
                                           ; SOURCE LINE # 1002
082C 900000      E     MOV     DPTR,#g_mem+040H
082F E0                MOVX    A,@DPTR
0830 FC                MOV     R4,A
0831 A3                INC     DPTR
0832 E0                MOVX    A,@DPTR
0833 FD                MOV     R5,A
0834 A3                INC     DPTR
0835 E0                MOVX    A,@DPTR
0836 FE                MOV     R6,A
0837 A3                INC     DPTR
0838 E0                MOVX    A,@DPTR
0839 FF                MOV     R7,A
083A E4                CLR     A
083B 7BE8              MOV     R3,#0E8H
083D 7A03              MOV     R2,#03H
083F F9                MOV     R1,A
0840 F8                MOV     R0,A
0841 120000      E     LCALL   ?C?ULDIV
0844 900000      E     MOV     DPTR,#g_mem+040H
0847 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1004
084A E4                CLR     A
084B FF                MOV     R7,A
084C 120000      E     LCALL   _LED_CTRL_Write
                                           ; SOURCE LINE # 1005
084F E4                CLR     A
0850 FF                MOV     R7,A
0851 120000      E     LCALL   _LED_BLINK_EN_Write
                                           ; SOURCE LINE # 1007
0854 E4                CLR     A
0855 900000      R     MOV     DPTR,#emg_counter_2
0858 F0                MOVX    @DPTR,A
0859 A3                INC     DPTR
085A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1009
085B 300005            JNB     interrupt_flag,?C0186
                                           ; SOURCE LINE # 1010
085E C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1011
0860 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1012
0863         ?C0186:
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 78  

                                           ; SOURCE LINE # 1014
0863 750005      R     MOV     emg_2_status,#05H
                                           ; SOURCE LINE # 1015
                                           ; SOURCE LINE # 1016
0866 8075              SJMP    ?C0170
                                           ; SOURCE LINE # 1018
0868         ?C0187:
                                           ; SOURCE LINE # 1019
0868 E500        R     MOV     A,emg_1_status
086A 7071              JNZ     ?C0170
                                           ; SOURCE LINE # 1020
086C 750002      R     MOV     emg_2_status,#02H
                                           ; SOURCE LINE # 1021
086F 806C              SJMP    ?C0170
                                           ; SOURCE LINE # 1023
0871         ?C0189:
                                           ; SOURCE LINE # 1024
0871 900000      R     MOV     DPTR,#emg_counter_2+01H
0874 E0                MOVX    A,@DPTR
0875 04                INC     A
0876 F0                MOVX    @DPTR,A
0877 7006              JNZ     ?C0225
0879 900000      R     MOV     DPTR,#emg_counter_2
087C E0                MOVX    A,@DPTR
087D 04                INC     A
087E F0                MOVX    @DPTR,A
087F         ?C0225:
                                           ; SOURCE LINE # 1025
087F 900000      R     MOV     DPTR,#emg_counter_2
0882 E0                MOVX    A,@DPTR
0883 6401              XRL     A,#01H
0885 7004              JNZ     ?C0226
0887 A3                INC     DPTR
0888 E0                MOVX    A,@DPTR
0889 64F4              XRL     A,#0F4H
088B         ?C0226:
088B 7050              JNZ     ?C0170
                                           ; SOURCE LINE # 1026
088D 900000      R     MOV     DPTR,#emg_counter_2
0890 F0                MOVX    @DPTR,A
0891 A3                INC     DPTR
0892 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1028
0893 300005            JNB     interrupt_flag,?C0191
                                           ; SOURCE LINE # 1029
0896 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1030
0898 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1031
089B         ?C0191:
                                           ; SOURCE LINE # 1034
089B 900000      E     MOV     DPTR,#c_mem+02H
089E E0                MOVX    A,@DPTR
089F FF                MOV     R7,A
08A0 6402              XRL     A,#02H
08A2 600E              JZ      ?C0193
08A4 EF                MOV     A,R7
08A5 6403              XRL     A,#03H
08A7 6009              JZ      ?C0193
08A9 EF                MOV     A,R7
08AA 6404              XRL     A,#04H
08AC 6004              JZ      ?C0193
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 79  

08AE EF                MOV     A,R7
08AF B40528            CJNE    A,#05H,?C0192
08B2         ?C0193:
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1038
08B2 900000      E     MOV     DPTR,#g_meas
08B5 E0                MOVX    A,@DPTR
08B6 FC                MOV     R4,A
08B7 A3                INC     DPTR
08B8 E0                MOVX    A,@DPTR
08B9 FD                MOV     R5,A
08BA A3                INC     DPTR
08BB E0                MOVX    A,@DPTR
08BC FE                MOV     R6,A
08BD A3                INC     DPTR
08BE E0                MOVX    A,@DPTR
08BF FF                MOV     R7,A
08C0 900000      E     MOV     DPTR,#g_ref
08C3 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1039
08C6 900000      E     MOV     DPTR,#g_meas+04H
08C9 E0                MOVX    A,@DPTR
08CA FC                MOV     R4,A
08CB A3                INC     DPTR
08CC E0                MOVX    A,@DPTR
08CD FD                MOV     R5,A
08CE A3                INC     DPTR
08CF E0                MOVX    A,@DPTR
08D0 FE                MOV     R6,A
08D1 A3                INC     DPTR
08D2 E0                MOVX    A,@DPTR
08D3 FF                MOV     R7,A
08D4 900000      E     MOV     DPTR,#g_ref+04H
08D7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1040
08DA         ?C0192:
                                           ; SOURCE LINE # 1042
08DA E4                CLR     A
08DB F500        R     MOV     emg_2_status,A
                                           ; SOURCE LINE # 1043
                                           ; SOURCE LINE # 1044
                                           ; SOURCE LINE # 1046
                                           ; SOURCE LINE # 1047
                                           ; SOURCE LINE # 1048
08DD         ?C0170:
                                           ; SOURCE LINE # 1050
08DD 300048            JNB     interrupt_flag,?C0196
                                           ; SOURCE LINE # 1051
08E0 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1052
08E2 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1054
                                           ; SOURCE LINE # 1055
08E5 8041              SJMP    ?C0196
08E7         ?C0111:
                                           ; SOURCE LINE # 1056
                                           ; SOURCE LINE # 1058
08E7 750001      R     MOV     emg_1_status,#01H
                                           ; SOURCE LINE # 1059
08EA 750001      R     MOV     emg_2_status,#01H
                                           ; SOURCE LINE # 1061
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 80  

08ED 750001      R     MOV     UD_status,#01H
                                           ; SOURCE LINE # 1062
08F0 750001      R     MOV     LR_status,#01H
                                           ; SOURCE LINE # 1064
08F3 C200        E     CLR     tension_valid
                                           ; SOURCE LINE # 1067
08F5 7F01              MOV     R7,#01H
08F7 120000      E     LCALL   _LED_CTRL_Write
                                           ; SOURCE LINE # 1069
08FA E4                CLR     A
08FB FF                MOV     R7,A
08FC 120000      E     LCALL   _LED_BLINK_EN_Write
                                           ; SOURCE LINE # 1071
08FF 300005            JNB     interrupt_flag,?C0197
                                           ; SOURCE LINE # 1072
0902 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1073
0904 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1074
0907         ?C0197:
                                           ; SOURCE LINE # 1076
                                           ; SOURCE LINE # 1077
                                           ; SOURCE LINE # 1080
                                           ; SOURCE LINE # 1081
                                           ; SOURCE LINE # 1082
0907         ?C0198:
                                           ; SOURCE LINE # 1085
0907 E4                CLR     A
0908 FF                MOV     R7,A
0909 FE                MOV     R6,A
090A FD                MOV     R5,A
090B FC                MOV     R4,A
090C 900000      E     MOV     DPTR,#g_meas+0FH
090F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1086
0912 E4                CLR     A
0913 FF                MOV     R7,A
0914 FE                MOV     R6,A
0915 FD                MOV     R5,A
0916 FC                MOV     R4,A
0917 900000      E     MOV     DPTR,#g_meas+013H
091A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1089
091D E4                CLR     A
091E 900000      E     MOV     DPTR,#g_meas+02FH
0921 F0                MOVX    @DPTR,A
0922 A3                INC     DPTR
0923 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1090
0924 A3                INC     DPTR
0925 F0                MOVX    @DPTR,A
0926 A3                INC     DPTR
0927 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1092
0928         ?C0196:
                                           ; SOURCE LINE # 1095
0928 900000      E     MOV     DPTR,#first_tension_valid
092B E0                MOVX    A,@DPTR
092C 6003              JZ      $ + 5H
092E 020000      R     LJMP    ?C0201
0931 200003      E     JB      tension_valid,$ + 6H
0934 020000      R     LJMP    ?C0201
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 81  

0937 E500        R     MOV     A,emg_1_status
0939 6003              JZ      $ + 5H
093B 020000      R     LJMP    ?C0201
093E E500        R     MOV     A,emg_2_status
0940 6003              JZ      $ + 5H
0942 020000      R     LJMP    ?C0201
                                           ; SOURCE LINE # 1096
0945 900000      E     MOV     DPTR,#dev_tension
0948 E0                MOVX    A,@DPTR
0949 FC                MOV     R4,A
094A A3                INC     DPTR
094B E0                MOVX    A,@DPTR
094C FD                MOV     R5,A
094D A3                INC     DPTR
094E E0                MOVX    A,@DPTR
094F FE                MOV     R6,A
0950 A3                INC     DPTR
0951 E0                MOVX    A,@DPTR
0952 FF                MOV     R7,A
0953 120000      E     LCALL   _filter_voltage
0956 900000      E     MOV     DPTR,#dev_tension_f
0959 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1097
095C 900000      E     MOV     DPTR,#pow_tension
095F E0                MOVX    A,@DPTR
0960 FC                MOV     R4,A
0961 A3                INC     DPTR
0962 E0                MOVX    A,@DPTR
0963 FD                MOV     R5,A
0964 A3                INC     DPTR
0965 E0                MOVX    A,@DPTR
0966 FE                MOV     R6,A
0967 A3                INC     DPTR
0968 E0                MOVX    A,@DPTR
0969 FF                MOV     R7,A
096A EC                MOV     A,R4
096B 120000      E     LCALL   ?C?FCASTL
096E 7466              MOV     A,#066H
0970 FB                MOV     R3,A
0971 FA                MOV     R2,A
0972 F9                MOV     R1,A
0973 783F              MOV     R0,#03FH
0975 120000      E     LCALL   ?C?FPMUL
0978 C004              PUSH    AR4
097A C005              PUSH    AR5
097C C006              PUSH    AR6
097E C007              PUSH    AR7
0980 900000      E     MOV     DPTR,#dev_tension_f
0983 E0                MOVX    A,@DPTR
0984 FC                MOV     R4,A
0985 A3                INC     DPTR
0986 E0                MOVX    A,@DPTR
0987 FD                MOV     R5,A
0988 A3                INC     DPTR
0989 E0                MOVX    A,@DPTR
098A FE                MOV     R6,A
098B A3                INC     DPTR
098C E0                MOVX    A,@DPTR
098D FF                MOV     R7,A
098E EC                MOV     A,R4
098F 120000      E     LCALL   ?C?FCASTL
0992 A804              MOV     R0,AR4
C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 82  

0994 A905              MOV     R1,AR5
0996 AA06              MOV     R2,AR6
0998 AB07              MOV     R3,AR7
099A D007              POP     AR7
099C D006              POP     AR6
099E D005              POP     AR5
09A0 D004              POP     AR4
09A2 120000      E     LCALL   ?C?FPCMP3
09A5 600E              JZ      ?C0202
09A7 400C              JC      ?C0202
                                           ; SOURCE LINE # 1099
09A9 7F01              MOV     R7,#01H
09AB 120000      E     LCALL   _LED_CTRL_Write
                                           ; SOURCE LINE # 1102
09AE E4                CLR     A
09AF FF                MOV     R7,A
09B0 120000      E     LCALL   _LED_BLINK_EN_Write
                                           ; SOURCE LINE # 1103
09B3 8020              SJMP    ?C0201
09B5         ?C0202:
                                           ; SOURCE LINE # 1104
                                           ; SOURCE LINE # 1106
09B5 E4                CLR     A
09B6 FF                MOV     R7,A
09B7 120000      E     LCALL   _LED_CTRL_Write
                                           ; SOURCE LINE # 1109
09BA 7F01              MOV     R7,#01H
09BC 120000      E     LCALL   _LED_BLINK_EN_Write
                                           ; SOURCE LINE # 1112
09BF 900000      E     MOV     DPTR,#master_mode
09C2 E0                MOVX    A,@DPTR
09C3 6010              JZ      ?C0201
                                           ; SOURCE LINE # 1113
09C5 120000      E     LCALL   deactivate_slaves
                                           ; SOURCE LINE # 1116
09C8 300005            JNB     interrupt_flag,?C0205
                                           ; SOURCE LINE # 1117
09CB C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1118
09CD 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1119
09D0         ?C0205:
                                           ; SOURCE LINE # 1121
09D0 E4                CLR     A
09D1 900000      E     MOV     DPTR,#master_mode
09D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
                                           ; SOURCE LINE # 1123
                                           ; SOURCE LINE # 1124
09D5         ?C0201:
                                           ; SOURCE LINE # 1126
09D5 300005            JNB     interrupt_flag,?C0207
                                           ; SOURCE LINE # 1127
09D8 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 1128
09DA 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 1129
                                           ; SOURCE LINE # 1130
09DD         ?C0207:
09DD 22                RET     
             ; FUNCTION analog_read_end (END)

C51 COMPILER V9.51   INTERRUPTIONS                                                         02/16/2023 11:05:25 PAGE 83  



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5214    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    140    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
