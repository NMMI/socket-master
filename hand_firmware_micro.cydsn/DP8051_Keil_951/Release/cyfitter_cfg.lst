C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.4\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDE
                    -BUG) WL(2) PR(.\DP8051_Keil_951\Release/cyfitter_cfg.lst) CD OT(8,SPEED) DF(CYAPP_ECC_OFFSET=1216) OJ(.\DP8051_Keil_951\
                    -Release\cyfitter_cfg.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          
   2          /*******************************************************************************
   3          * File Name: cyfitter_cfg.c
   4          * 
   5          * PSoC Creator  4.4
   6          *
   7          * Description:
   8          * This file contains device initialization code.
   9          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
  10          * This file is automatically generated by PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright (c) 2007-2020 Cypress Semiconductor.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include <string.h>
  20          #include "cytypes.h"
  21          #include "cydevice_trm.h"
  22          #include "cyfitter.h"
  23          #include "CyLib.h"
  24          #include "cyfitter_cfg.h"
  25          
  26          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  27          
  28          
  29          #if defined(__C51__) || defined(__CX51__)
  30                  #define CYPACKED
  31                  #define CYPACKED_ATTR
  32                  #define CYALIGNED
  33                  #define DMAINITSEC
  34              #define CY_CFG_UNUSED
  35                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  36          
  37          
  38          
  39                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  40                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  41                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  42          #else
                      #error Unsupported toolchain
              #endif
  45          
  46          
  47          
  48          
  49          /* Clock startup error codes                                                   */
  50          #define CYCLOCKSTART_NO_ERROR    0u
  51          #define CYCLOCKSTART_XTAL_ERROR  1u
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 2   

  52          #define CYCLOCKSTART_32KHZ_ERROR 2u
  53          #define CYCLOCKSTART_PLL_ERROR   3u
  54          #define CYCLOCKSTART_FLL_ERROR   4u
  55          #define CYCLOCKSTART_WCO_ERROR   5u
  56          
  57          
  58          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  59          /*******************************************************************************
  60          * Function Name: CyClockStartupError
  61          ********************************************************************************
  62          * Summary:
  63          *  If an error is encountered during clock configuration (crystal startup error,
  64          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  65          *  the customer, this function will stop in an infinite loop.
  66          *
  67          * Parameters:
  68          *   void
  69          *
  70          * Return:
  71          *   void
  72          *
  73          *******************************************************************************/
  74          CY_CFG_UNUSED
  75          static void CyClockStartupError(uint8 errorCode);
  76          CY_CFG_UNUSED
  77          static void CyClockStartupError(uint8 errorCode)
  78          {
  79   1          /* To remove the compiler warning if errorCode not used.                */
  80   1          errorCode = errorCode;
  81   1      
  82   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  83   1          /* we will end up here to allow the customer to implement something to  */
  84   1          /* deal with the clock condition.                                       */
  85   1      
  86   1      #ifdef CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK
                  CY_CFG_Clock_Startup_ErrorCallback();
              #else
  89   1          /*  If not using CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK, place your clock startup code here. */
  90   1          /* `#START CyClockStartupError` */
  91   1      
  92   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  93   1          /* we will end up here to allow the customer to implement something to  */
  94   1          /* deal with the clock condition.                                       */
  95   1      
  96   1          /* `#END` */
  97   1      
  98   1          while(1) {}
  99   1      #endif /* CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK */
 100   1      }
 101          #endif
 102          
 103          /* IDMUX Address: CYREG_IDMUX_DRQ_CTL0 Size (bytes): 6 */
 104          #define BS_IDMUX_VAL ((const uint8 CYFAR *)(0x00080000u + CYAPP_ECC_OFFSET))
 105          
 106          /* IOPORT_0 Address: CYDEV_PRTDSI_PRT0_BASE Size (bytes): 7 */
 107          #define BS_IOPORT_0_VAL ((const uint8 CYFAR *)(0x00080008u + CYAPP_ECC_OFFSET))
 108          
 109          /* IOPORT_1 Address: CYDEV_PRTDSI_PRT1_BASE Size (bytes): 7 */
 110          #define BS_IOPORT_1_VAL ((const uint8 CYFAR *)(0x00080010u + CYAPP_ECC_OFFSET))
 111          
 112          /* IOPORT_2 Address: CYDEV_PRTDSI_PRT2_BASE Size (bytes): 7 */
 113          #define BS_IOPORT_2_VAL ((const uint8 CYFAR *)(0x00080018u + CYAPP_ECC_OFFSET))
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 3   

 114          
 115          /* IOPORT_7 Address: CYDEV_PRTDSI_PRT12_BASE Size (bytes): 6 */
 116          #define BS_IOPORT_7_VAL ((const uint8 CYFAR *)(0x00080020u + CYAPP_ECC_OFFSET))
 117          
 118          /* IOPORT_8 Address: CYDEV_PRTDSI_PRT15_BASE Size (bytes): 7 */
 119          #define BS_IOPORT_8_VAL ((const uint8 CYFAR *)(0x00080028u + CYAPP_ECC_OFFSET))
 120          
 121          /* IDMUX_IRQ Address: CYREG_IDMUX_IRQ_CTL0 Size (bytes): 8 */
 122          #define BS_IDMUX_IRQ_VAL ((const uint8 CYFAR *)(0x00080030u + CYAPP_ECC_OFFSET))
 123          
 124          /* TMR0 Address: CYREG_TMR0_CFG0 Size (bytes): 12 */
 125          #define BS_TMR0_VAL ((const uint8 CYFAR *)(0x00080038u + CYAPP_ECC_OFFSET))
 126          
 127          /* UDB_1_3_0_CONFIG Address: CYDEV_UCFG_B0_P2_U0_BASE Size (bytes): 128 */
 128          #define BS_UDB_1_3_0_CONFIG_VAL ((const uint8 CYFAR *)(0x00080044u + CYAPP_ECC_OFFSET))
 129          
 130          /* UDB_1_3_1_CONFIG Address: CYDEV_UCFG_B0_P2_U1_BASE Size (bytes): 128 */
 131          #define BS_UDB_1_3_1_CONFIG_VAL ((const uint8 CYFAR *)(0x000800C4u + CYAPP_ECC_OFFSET))
 132          
 133          /* UDB_1_2_1_CONFIG Address: CYDEV_UCFG_B0_P3_U0_BASE Size (bytes): 128 */
 134          #define BS_UDB_1_2_1_CONFIG_VAL ((const uint8 CYFAR *)(0x00080144u + CYAPP_ECC_OFFSET))
 135          
 136          /* UDB_1_2_0_CONFIG Address: CYDEV_UCFG_B0_P3_U1_BASE Size (bytes): 128 */
 137          #define BS_UDB_1_2_0_CONFIG_VAL ((const uint8 CYFAR *)(0x000801C4u + CYAPP_ECC_OFFSET))
 138          
 139          /* UDB_1_0_0_CONFIG Address: CYDEV_UCFG_B1_P2_U0_BASE Size (bytes): 128 */
 140          #define BS_UDB_1_0_0_CONFIG_VAL ((const uint8 CYFAR *)(0x00080244u + CYAPP_ECC_OFFSET))
 141          
 142          /* UDB_1_0_1_CONFIG Address: CYDEV_UCFG_B1_P2_U1_BASE Size (bytes): 128 */
 143          #define BS_UDB_1_0_1_CONFIG_VAL ((const uint8 CYFAR *)(0x000802C4u + CYAPP_ECC_OFFSET))
 144          
 145          /* UDB_1_1_1_CONFIG Address: CYDEV_UCFG_B1_P3_U0_BASE Size (bytes): 128 */
 146          #define BS_UDB_1_1_1_CONFIG_VAL ((const uint8 CYFAR *)(0x00080344u + CYAPP_ECC_OFFSET))
 147          
 148          /* UDB_1_1_0_CONFIG Address: CYDEV_UCFG_B1_P3_U1_BASE Size (bytes): 128 */
 149          #define BS_UDB_1_1_0_CONFIG_VAL ((const uint8 CYFAR *)(0x000803C4u + CYAPP_ECC_OFFSET))
 150          
 151          /* UDB_0_1_1_CONFIG Address: CYDEV_UCFG_B1_P4_U0_BASE Size (bytes): 128 */
 152          #define BS_UDB_0_1_1_CONFIG_VAL ((const uint8 CYFAR *)(0x00080444u + CYAPP_ECC_OFFSET))
 153          
 154          /* UDB_0_1_0_CONFIG Address: CYDEV_UCFG_B1_P4_U1_BASE Size (bytes): 128 */
 155          #define BS_UDB_0_1_0_CONFIG_VAL ((const uint8 CYFAR *)(0x000804C4u + CYAPP_ECC_OFFSET))
 156          
 157          /* UDB_0_0_0_CONFIG Address: CYDEV_UCFG_B1_P5_U0_BASE Size (bytes): 128 */
 158          #define BS_UDB_0_0_0_CONFIG_VAL ((const uint8 CYFAR *)(0x00080544u + CYAPP_ECC_OFFSET))
 159          
 160          /* UWRK_B0_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B0_BASE + 0x00000070u Size (bytes): 32 */
 161          #define BS_UWRK_B0_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)(0x000805C4u + CYAPP_ECC_OFFSET))
 162          
 163          /* UWRK_B1_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B1_BASE + 0x00000070u Size (bytes): 32 */
 164          #define BS_UWRK_B1_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)(0x000805E4u + CYAPP_ECC_OFFSET))
 165          
 166          /* UCFG_BCTL1 Address: CYREG_BCTL1_MDCLK_EN Size (bytes): 16 */
 167          #define BS_UCFG_BCTL1_VAL ((const uint8 CYFAR *)(0x00080604u + CYAPP_ECC_OFFSET))
 168          
 169          /* UCFG_BCTL0 Address: CYREG_BCTL0_MDCLK_EN Size (bytes): 16 */
 170          #define BS_UCFG_BCTL0_VAL ((const uint8 CYFAR *)(0x00080614u + CYAPP_ECC_OFFSET))
 171          
 172          /* DSI0_0_HV_ROUTING Address: CYDEV_UCFG_DSI13_BASE + 0x00000080u Size (bytes): 128 */
 173          #define BS_DSI0_0_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080624u + CYAPP_ECC_OFFSET))
 174          
 175          /* DSISWITCH_0_1 Address: CYDEV_UCFG_DSI12_BASE Size (bytes): 128 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 4   

 176          #define BS_DSISWITCH_0_1_VAL ((const uint8 CYFAR *)(0x000806A4u + CYAPP_ECC_OFFSET))
 177          
 178          /* DSI0_1_HV_ROUTING Address: CYDEV_UCFG_DSI12_BASE + 0x00000080u Size (bytes): 128 */
 179          #define BS_DSI0_1_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080724u + CYAPP_ECC_OFFSET))
 180          
 181          /* DSI0_2_HV_ROUTING Address: CYDEV_UCFG_DSI7_BASE + 0x00000080u Size (bytes): 128 */
 182          #define BS_DSI0_2_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000807A4u + CYAPP_ECC_OFFSET))
 183          
 184          /* DSISWITCH_0_3 Address: CYDEV_UCFG_DSI6_BASE Size (bytes): 128 */
 185          #define BS_DSISWITCH_0_3_VAL ((const uint8 CYFAR *)(0x00080824u + CYAPP_ECC_OFFSET))
 186          
 187          /* DSI0_3_HV_ROUTING Address: CYDEV_UCFG_DSI6_BASE + 0x00000080u Size (bytes): 128 */
 188          #define BS_DSI0_3_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000808A4u + CYAPP_ECC_OFFSET))
 189          
 190          /* DSISWITCH_0_4 Address: CYDEV_UCFG_DSI5_BASE Size (bytes): 128 */
 191          #define BS_DSISWITCH_0_4_VAL ((const uint8 CYFAR *)(0x00080924u + CYAPP_ECC_OFFSET))
 192          
 193          /* DSI0_4_HV_ROUTING Address: CYDEV_UCFG_DSI5_BASE + 0x00000080u Size (bytes): 128 */
 194          #define BS_DSI0_4_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000809A4u + CYAPP_ECC_OFFSET))
 195          
 196          /* DSISWITCH_0_5 Address: CYDEV_UCFG_DSI4_BASE Size (bytes): 128 */
 197          #define BS_DSISWITCH_0_5_VAL ((const uint8 CYFAR *)(0x00080A24u + CYAPP_ECC_OFFSET))
 198          
 199          /* DSI0_5_HV_ROUTING Address: CYDEV_UCFG_DSI4_BASE + 0x00000080u Size (bytes): 128 */
 200          #define BS_DSI0_5_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080AA4u + CYAPP_ECC_OFFSET))
 201          
 202          /* UDBSWITCH_0_0 Address: CYDEV_UCFG_B1_P5_ROUTE_BASE Size (bytes): 128 */
 203          #define BS_UDBSWITCH_0_0_VAL ((const uint8 CYFAR *)(0x00080B24u + CYAPP_ECC_OFFSET))
 204          
 205          /* UDB_1_0_HV_ROUTING Address: CYDEV_UCFG_B1_P5_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 206          #define BS_UDB_1_0_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080BA4u + CYAPP_ECC_OFFSET))
 207          
 208          /* UDBSWITCH_1_0 Address: CYDEV_UCFG_B1_P2_ROUTE_BASE Size (bytes): 128 */
 209          #define BS_UDBSWITCH_1_0_VAL ((const uint8 CYFAR *)(0x00080C24u + CYAPP_ECC_OFFSET))
 210          
 211          /* UDB_2_0_HV_ROUTING Address: CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 212          #define BS_UDB_2_0_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080CA4u + CYAPP_ECC_OFFSET))
 213          
 214          /* UDBSWITCH_0_1 Address: CYDEV_UCFG_B1_P4_ROUTE_BASE Size (bytes): 128 */
 215          #define BS_UDBSWITCH_0_1_VAL ((const uint8 CYFAR *)(0x00080D24u + CYAPP_ECC_OFFSET))
 216          
 217          /* UDB_1_1_HV_ROUTING Address: CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 218          #define BS_UDB_1_1_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080DA4u + CYAPP_ECC_OFFSET))
 219          
 220          /* UDBSWITCH_1_1 Address: CYDEV_UCFG_B1_P3_ROUTE_BASE Size (bytes): 128 */
 221          #define BS_UDBSWITCH_1_1_VAL ((const uint8 CYFAR *)(0x00080E24u + CYAPP_ECC_OFFSET))
 222          
 223          /* UDB_2_1_HV_ROUTING Address: CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 224          #define BS_UDB_2_1_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080EA4u + CYAPP_ECC_OFFSET))
 225          
 226          /* UDB_1_2_HV_ROUTING Address: CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 227          #define BS_UDB_1_2_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00080F24u + CYAPP_ECC_OFFSET))
 228          
 229          /* UDBSWITCH_1_2 Address: CYDEV_UCFG_B0_P3_ROUTE_BASE Size (bytes): 128 */
 230          #define BS_UDBSWITCH_1_2_VAL ((const uint8 CYFAR *)(0x00080FA4u + CYAPP_ECC_OFFSET))
 231          
 232          /* UDB_2_2_HV_ROUTING Address: CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 233          #define BS_UDB_2_2_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x00081024u + CYAPP_ECC_OFFSET))
 234          
 235          /* UDB_1_3_HV_ROUTING Address: CYDEV_UCFG_B0_P5_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 236          #define BS_UDB_1_3_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000810A4u + CYAPP_ECC_OFFSET))
 237          
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 5   

 238          /* UDBSWITCH_1_3 Address: CYDEV_UCFG_B0_P2_ROUTE_BASE Size (bytes): 128 */
 239          #define BS_UDBSWITCH_1_3_VAL ((const uint8 CYFAR *)(0x00081124u + CYAPP_ECC_OFFSET))
 240          
 241          /* UDB_2_3_HV_ROUTING Address: CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 242          #define BS_UDB_2_3_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000811A4u + CYAPP_ECC_OFFSET))
 243          
 244          /* DSISWITCH_1_0 Address: CYDEV_UCFG_DSI9_BASE Size (bytes): 128 */
 245          #define BS_DSISWITCH_1_0_VAL ((const uint8 CYFAR *)(0x00081224u + CYAPP_ECC_OFFSET))
 246          
 247          /* DSI3_0_HV_ROUTING Address: CYDEV_UCFG_DSI9_BASE + 0x00000080u Size (bytes): 128 */
 248          #define BS_DSI3_0_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000812A4u + CYAPP_ECC_OFFSET))
 249          
 250          /* DSISWITCH_1_1 Address: CYDEV_UCFG_DSI8_BASE Size (bytes): 128 */
 251          #define BS_DSISWITCH_1_1_VAL ((const uint8 CYFAR *)(0x00081324u + CYAPP_ECC_OFFSET))
 252          
 253          /* DSI3_1_HV_ROUTING Address: CYDEV_UCFG_DSI8_BASE + 0x00000080u Size (bytes): 128 */
 254          #define BS_DSI3_1_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000813A4u + CYAPP_ECC_OFFSET))
 255          
 256          /* DSISWITCH_1_2 Address: CYDEV_UCFG_DSI3_BASE Size (bytes): 128 */
 257          #define BS_DSISWITCH_1_2_VAL ((const uint8 CYFAR *)(0x00081424u + CYAPP_ECC_OFFSET))
 258          
 259          /* DSI3_2_HV_ROUTING Address: CYDEV_UCFG_DSI3_BASE + 0x00000080u Size (bytes): 128 */
 260          #define BS_DSI3_2_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000814A4u + CYAPP_ECC_OFFSET))
 261          
 262          /* DSISWITCH_1_3 Address: CYDEV_UCFG_DSI2_BASE Size (bytes): 128 */
 263          #define BS_DSISWITCH_1_3_VAL ((const uint8 CYFAR *)(0x00081524u + CYAPP_ECC_OFFSET))
 264          
 265          /* DSI3_3_HV_ROUTING Address: CYDEV_UCFG_DSI2_BASE + 0x00000080u Size (bytes): 128 */
 266          #define BS_DSI3_3_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000815A4u + CYAPP_ECC_OFFSET))
 267          
 268          /* DSISWITCH_1_4 Address: CYDEV_UCFG_DSI1_BASE Size (bytes): 128 */
 269          #define BS_DSISWITCH_1_4_VAL ((const uint8 CYFAR *)(0x00081624u + CYAPP_ECC_OFFSET))
 270          
 271          /* DSI3_4_HV_ROUTING Address: CYDEV_UCFG_DSI1_BASE + 0x00000080u Size (bytes): 128 */
 272          #define BS_DSI3_4_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000816A4u + CYAPP_ECC_OFFSET))
 273          
 274          /* DSISWITCH_1_5 Address: CYDEV_UCFG_DSI0_BASE Size (bytes): 128 */
 275          #define BS_DSISWITCH_1_5_VAL ((const uint8 CYFAR *)(0x00081724u + CYAPP_ECC_OFFSET))
 276          
 277          /* DSI3_5_HV_ROUTING Address: CYDEV_UCFG_DSI0_BASE + 0x00000080u Size (bytes): 128 */
 278          #define BS_DSI3_5_HV_ROUTING_VAL ((const uint8 CYFAR *)(0x000817A4u + CYAPP_ECC_OFFSET))
 279          
 280          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 281          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)(0x00081824u + CYAPP_ECC_OFFSET))
 282          
 283          /* IOPINS0_7 Address: CYREG_PRT12_DM0 Size (bytes): 8 */
 284          #define BS_IOPINS0_7_VAL ((const uint8 CYFAR *)(0x0008182Cu + CYAPP_ECC_OFFSET))
 285          
 286          /* IOPINS0_8 Address: CYREG_PRT15_DR Size (bytes): 10 */
 287          #define BS_IOPINS0_8_VAL ((const uint8 CYFAR *)(0x00081834u + CYAPP_ECC_OFFSET))
 288          
 289          /* IOPINS0_1 Address: CYREG_PRT1_DR Size (bytes): 10 */
 290          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)(0x00081840u + CYAPP_ECC_OFFSET))
 291          
 292          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 293          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)(0x0008184Cu + CYAPP_ECC_OFFSET))
 294          
 295          /* CYDEV_CLKDIST_ACFG0_CFG0 Address: CYREG_CLKDIST_ACFG0_CFG0 Size (bytes): 4 */
 296          #define BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL ((const uint8 CYFAR *)(0x00081854u + CYAPP_ECC_OFFSET))
 297          
 298          /* PHUB_CFGMEM10 Address: CYREG_PHUB_CFGMEM10_CFG0 Size (bytes): 4 */
 299          #define BS_PHUB_CFGMEM10_VAL ((const uint8 CYFAR *)(0x00081858u + CYAPP_ECC_OFFSET))
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 6   

 300          
 301          
 302          /*******************************************************************************
 303          * Function Name: cfg_dma_init
 304          ********************************************************************************
 305          * Summary:
 306          *  This function is used to copy device configuration data from constant values
 307          *  stored in memory into the proper chip configuration registers using DMA.  It
 308          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 309          *
 310          * Parameters:  
 311          *   void
 312          *
 313          * Return:
 314          *   void
 315          *
 316          *******************************************************************************/
 317          static void cfg_dma_init(void);
 318          static void cfg_dma_init(void)
 319          {
 320   1              /* TD structure for big-endian systems. Requires 2-byte endian swap */
 321   1              CYPACKED struct td_t {
 322   1                      uint16 size;
 323   1                      uint8 flags;
 324   1                      uint8 next_td_ptr;
 325   1                      uint16 src;
 326   1                      uint16 dest;
 327   1              } CYPACKED_ATTR;
 328   1      
 329   1              /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 330   1              DMAINITSEC static const uint8 CYCODE CH1_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u
             -, 0x00u };
 331   1      
 332   1              /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 333   1              DMAINITSEC static const uint8 CYCODE CH2_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x01u
             -, 0x00u };
 334   1      
 335   1              /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 336   1              DMAINITSEC static const uint8 CYCODE CH5_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x00u
             -, 0x00u };
 337   1      
 338   1              /* PHUB_CH6_CFGMEM_CFG0/1 initialization data */
 339   1              DMAINITSEC static const uint8 CYCODE CH6_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x01u
             -, 0x00u };
 340   1      
 341   1              /* Initialization data for each DMA channel's TD registers */
 342   1              DMAINITSEC static const uint8 CYCODE DMA_TD_START_CMD[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x01u };
 343   1      
 344   1              CYALIGNED static uint32 CYXDATA DMA_ZERO_VAL;
 345   1      
 346   1              /* This table holds all of the initialization data necessary for the DMA
 347   1                 process to transfer data from the source location to the destination. */
 348   1              DMAINITSEC static const struct td_t CYCODE CFG_TD_LIST0[] = {
 349   1                      /* Size, Flags, Next, Source, Destination */
 350   1                      { 8u, 0x23u, 0x02u, (uint16)(uint32)(CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },      /* TD 1 */
 351   1                      { 8u, 0x23u, 0x03u, (uint16)(uint32)(CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },      /* TD 2 */
 352   1                      { 8u, 0x23u, 0x04u, (uint16)(uint32)(CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },      /* TD 3 */
 353   1                      { 8u, 0x23u, 0x05u, (uint16)(uint32)(CH6_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM6_CFG0) },      /* TD 4 */
 354   1                      { 5u, 0x23u, 0x06u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },   /* TD 5 */
 355   1                      { 5u, 0x23u, 0x07u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },   /* TD 6 */
 356   1                      { 5u, 0x23u, 0x08u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },   /* TD 7 */
 357   1                      { 5u, 0x23u, 0xFEu, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH6_BASIC_CFG) },   /* TD 8 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 7   

 358   1                      { 64u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT3_DR) },        /* TD 9 */
 359   1                      { 1024u, 0x22u, 0x0Bu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },   /* TD 10 *
             -/
 360   1                      { 384u, 0x22u, 0x0Cu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P4_U0_BASE) },    /* TD 11 */
 361   1                      { 384u, 0x22u, 0x0Du, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P5_U0_BASE) },    /* TD 12 */
 362   1                      { 1024u, 0x22u, 0x0Eu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P6_U0_BASE) },   /* TD 13 *
             -/
 363   1                      { 128u, 0x22u, 0x0Fu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P5_U1_BASE) },    /* TD 14 */
 364   1                      { 128u, 0x22u, 0x10u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE) },        /* TD 15 */
 365   1                      { 128u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE) },       /* TD 16 */
 366   1                      { 7u, 0x23u, 0x12u, (uint16)(uint32)(BS_IOPORT_0_VAL), (uint16)(CYDEV_PRTDSI_PRT0_BASE) },      /* TD 17 */
 367   1                      { 7u, 0x23u, 0x13u, (uint16)(uint32)(BS_IOPORT_1_VAL), (uint16)(CYDEV_PRTDSI_PRT1_BASE) },      /* TD 18 */
 368   1                      { 7u, 0x23u, 0x14u, (uint16)(uint32)(BS_IOPORT_2_VAL), (uint16)(CYDEV_PRTDSI_PRT2_BASE) },      /* TD 19 */
 369   1                      { 6u, 0x23u, 0x15u, (uint16)(uint32)(BS_IOPORT_7_VAL), (uint16)(CYDEV_PRTDSI_PRT12_BASE) },     /* TD 20 */
 370   1                      { 7u, 0x23u, 0x16u, (uint16)(uint32)(BS_IOPORT_8_VAL), (uint16)(CYDEV_PRTDSI_PRT15_BASE) },     /* TD 21 */
 371   1                      { 12u, 0x23u, 0x17u, (uint16)(uint32)(BS_TMR0_VAL), (uint16)(CYREG_TMR0_CFG0) },        /* TD 22 */
 372   1                      { 32u, 0x23u, 0x18u, (uint16)(uint32)(BS_UWRK_B0_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B0_BAS
             -E + 0x00000070u) },   /* TD 23 */
 373   1                      { 32u, 0x23u, 0xFEu, (uint16)(uint32)(BS_UWRK_B1_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B1_BAS
             -E + 0x00000070u) },   /* TD 24 */
 374   1                      { 8u, 0x23u, 0x1Au, (uint16)(uint32)(BS_IDMUX_IRQ_VAL), (uint16)(CYREG_IDMUX_IRQ_CTL0) },       /* TD 25 */
 375   1                      { 128u, 0x23u, 0x1Bu, (uint16)(uint32)(BS_UDB_1_3_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P2_U0_BASE) },  /
             -* TD 26 */
 376   1                      { 128u, 0x23u, 0x1Cu, (uint16)(uint32)(BS_UDB_1_3_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P2_U1_BASE) },  /
             -* TD 27 */
 377   1                      { 128u, 0x23u, 0x1Du, (uint16)(uint32)(BS_UDB_1_2_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P3_U0_BASE) },  /
             -* TD 28 */
 378   1                      { 128u, 0x23u, 0x1Eu, (uint16)(uint32)(BS_UDB_1_2_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P3_U1_BASE) },  /
             -* TD 29 */
 379   1                      { 128u, 0x23u, 0x1Fu, (uint16)(uint32)(BS_UDB_1_0_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },  /
             -* TD 30 */
 380   1                      { 128u, 0x23u, 0x20u, (uint16)(uint32)(BS_UDB_1_0_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P2_U1_BASE) },  /
             -* TD 31 */
 381   1                      { 128u, 0x23u, 0x21u, (uint16)(uint32)(BS_UDB_1_1_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P3_U0_BASE) },  /
             -* TD 32 */
 382   1                      { 128u, 0x23u, 0x22u, (uint16)(uint32)(BS_UDB_1_1_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P3_U1_BASE) },  /
             -* TD 33 */
 383   1                      { 128u, 0x23u, 0x23u, (uint16)(uint32)(BS_UDB_0_1_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P4_U0_BASE) },  /
             -* TD 34 */
 384   1                      { 128u, 0x23u, 0x24u, (uint16)(uint32)(BS_UDB_0_1_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P4_U1_BASE) },  /
             -* TD 35 */
 385   1                      { 128u, 0x23u, 0x25u, (uint16)(uint32)(BS_UDB_0_0_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P5_U0_BASE) },  /
             -* TD 36 */
 386   1                      { 16u, 0x23u, 0x26u, (uint16)(uint32)(BS_UCFG_BCTL1_VAL), (uint16)(CYREG_BCTL1_MDCLK_EN) },     /* TD 37 */
 387   1                      { 16u, 0x23u, 0x27u, (uint16)(uint32)(BS_UCFG_BCTL0_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) },     /* TD 38 */
 388   1                      { 128u, 0x23u, 0x28u, (uint16)(uint32)(BS_DSI0_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE + 0x000
             -00080u) },        /* TD 39 */
 389   1                      { 128u, 0x23u, 0x29u, (uint16)(uint32)(BS_DSISWITCH_0_1_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },        /* TD 4
             -0 */
 390   1                      { 128u, 0x23u, 0x2Au, (uint16)(uint32)(BS_DSI0_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE + 0x000
             -00080u) },        /* TD 41 */
 391   1                      { 128u, 0x23u, 0x2Bu, (uint16)(uint32)(BS_DSI0_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE + 0x0000
             -0080u) },        /* TD 42 */
 392   1                      { 128u, 0x23u, 0x2Cu, (uint16)(uint32)(BS_DSISWITCH_0_3_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE) }, /* TD 43
             - */
 393   1                      { 128u, 0x23u, 0x2Du, (uint16)(uint32)(BS_DSI0_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE + 0x0000
             -0080u) },        /* TD 44 */
 394   1                      { 128u, 0x23u, 0x2Eu, (uint16)(uint32)(BS_DSISWITCH_0_4_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE) }, /* TD 45
             - */
 395   1                      { 128u, 0x23u, 0x2Fu, (uint16)(uint32)(BS_DSI0_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE + 0x0000
             -0080u) },        /* TD 46 */
 396   1                      { 128u, 0x23u, 0x30u, (uint16)(uint32)(BS_DSISWITCH_0_5_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE) }, /* TD 47
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 8   

             - */
 397   1                      { 128u, 0x23u, 0x31u, (uint16)(uint32)(BS_DSI0_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE + 0x0000
             -0080u) },        /* TD 48 */
 398   1                      { 128u, 0x23u, 0x32u, (uint16)(uint32)(BS_UDBSWITCH_0_0_VAL), (uint16)(CYDEV_UCFG_B1_P5_ROUTE_BASE) },  /
             -* TD 49 */
 399   1                      { 128u, 0x23u, 0x33u, (uint16)(uint32)(BS_UDB_1_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P5_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 50 */
 400   1                      { 128u, 0x23u, 0x34u, (uint16)(uint32)(BS_UDBSWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE) },  /
             -* TD 51 */
 401   1                      { 128u, 0x23u, 0x35u, (uint16)(uint32)(BS_UDB_2_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 52 */
 402   1                      { 128u, 0x23u, 0x36u, (uint16)(uint32)(BS_UDBSWITCH_0_1_VAL), (uint16)(CYDEV_UCFG_B1_P4_ROUTE_BASE) },  /
             -* TD 53 */
 403   1                      { 128u, 0x23u, 0x37u, (uint16)(uint32)(BS_UDB_1_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P4_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 54 */
 404   1                      { 128u, 0x23u, 0x38u, (uint16)(uint32)(BS_UDBSWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE) },  /
             -* TD 55 */
 405   1                      { 128u, 0x23u, 0x39u, (uint16)(uint32)(BS_UDB_2_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 56 */
 406   1                      { 128u, 0x23u, 0x3Au, (uint16)(uint32)(BS_UDB_1_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P4_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 57 */
 407   1                      { 128u, 0x23u, 0x3Bu, (uint16)(uint32)(BS_UDBSWITCH_1_2_VAL), (uint16)(CYDEV_UCFG_B0_P3_ROUTE_BASE) },  /
             -* TD 58 */
 408   1                      { 128u, 0x23u, 0x3Cu, (uint16)(uint32)(BS_UDB_2_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P3_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 59 */
 409   1                      { 128u, 0x23u, 0x3Du, (uint16)(uint32)(BS_UDB_1_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P5_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 60 */
 410   1                      { 128u, 0x23u, 0x3Eu, (uint16)(uint32)(BS_UDBSWITCH_1_3_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE) },  /
             -* TD 61 */
 411   1                      { 128u, 0x23u, 0x3Fu, (uint16)(uint32)(BS_UDB_2_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 62 */
 412   1                      { 128u, 0x23u, 0x40u, (uint16)(uint32)(BS_DSISWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE) }, /* TD 63
             - */
 413   1                      { 128u, 0x23u, 0x41u, (uint16)(uint32)(BS_DSI3_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE + 0x0000
             -0080u) },        /* TD 64 */
 414   1                      { 128u, 0x23u, 0x42u, (uint16)(uint32)(BS_DSISWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE) }, /* TD 65
             - */
 415   1                      { 128u, 0x23u, 0x43u, (uint16)(uint32)(BS_DSI3_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE + 0x0000
             -0080u) },        /* TD 66 */
 416   1                      { 128u, 0x23u, 0x44u, (uint16)(uint32)(BS_DSISWITCH_1_2_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE) }, /* TD 67
             - */
 417   1                      { 128u, 0x23u, 0x45u, (uint16)(uint32)(BS_DSI3_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE + 0x0000
             -0080u) },        /* TD 68 */
 418   1                      { 128u, 0x23u, 0x46u, (uint16)(uint32)(BS_DSISWITCH_1_3_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE) }, /* TD 69
             - */
 419   1                      { 128u, 0x23u, 0x47u, (uint16)(uint32)(BS_DSI3_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE + 0x0000
             -0080u) },        /* TD 70 */
 420   1                      { 128u, 0x23u, 0x48u, (uint16)(uint32)(BS_DSISWITCH_1_4_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE) }, /* TD 71
             - */
 421   1                      { 128u, 0x23u, 0x49u, (uint16)(uint32)(BS_DSI3_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE + 0x0000
             -0080u) },        /* TD 72 */
 422   1                      { 128u, 0x23u, 0x4Au, (uint16)(uint32)(BS_DSISWITCH_1_5_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) }, /* TD 73
             - */
 423   1                      { 128u, 0x23u, 0xFEu, (uint16)(uint32)(BS_DSI3_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE + 0x0000
             -0080u) },        /* TD 74 */
 424   1              };
 425   1      
 426   1              DMA_ZERO_VAL = 0u;
 427   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG0, 0x10u);    /* set burstcnt */
 428   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_CFG, 0x01u);   /* enable ch0 */
 429   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH0_BASIC_STATUS+1u), 0x00u);   /* set first TD to 0 */
 430   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD0, 74u*8u);       /* transfer size */
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 9   

 431   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+2u), 0x01u);    /* set next TD to 1 */
 432   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+3u), 0xA3u);    /* set TD flags */
 433   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD1, (uint16)((uint32)CFG_TD_LIST0 & 0x0000FFFFu)); /
             -* set td0's src addr */
 434   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD1+2u), CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst a
             -ddr */
 435   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG1, (uint16)(CYDEV_FLS_BASE >> 16));  /* set ch0's src h
             -igh addr */
 436   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_CFGMEM0_CFG1+2u), (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));     /* se
             -t ch0's dst high addr */
 437   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH1_BASIC_STATUS+1u), 0x09u);   /* ch1 first TD: 9 */
 438   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH2_BASIC_STATUS+1u), 0x0Au);   /* ch2 first TD: 10 */
 439   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH5_BASIC_STATUS+1u), 0x11u);   /* ch5 first TD: 17 */
 440   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH6_BASIC_STATUS+1u), 0x19u);   /* ch6 first TD: 25 */
 441   1      
 442   1              CY_CFG_MEMORY_BARRIER();
 443   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_ACTION, 0x01u); /* cpu_req */
 444   1              CY_CFG_MEMORY_BARRIER();
 445   1      
 446   1              /* Wait for all DMA transfers to complete */
 447   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 448   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 449   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 450   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 451   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH6_BASIC_STATUS) & 0x01u)){}
 452   1      
 453   1      
 454   1              CYCONFIGCPY((void CYFAR *)(CYREG_IDMUX_DRQ_CTL0), (const void CYFAR *)(BS_IDMUX_VAL), 6u);
 455   1      
 456   1      }
 457          /*******************************************************************************
 458          * Function Name: ClockSetup
 459          ********************************************************************************
 460          *
 461          * Summary:
 462          *  Performs the initialization of all of the clocks in the device based on the
 463          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 464          *  clocks and setting the necessary dividers to produce the desired frequency. 
 465          *
 466          * Parameters:
 467          *  void
 468          *
 469          * Return:
 470          *  void
 471          *
 472          *******************************************************************************/
 473          static void ClockSetup(void);
 474          static void ClockSetup(void)
 475          {
 476   1              uint32 timeout;
 477   1              uint8 pllLock;
 478   1      
 479   1      
 480   1              /* Configure Digital Clocks based on settings from Clock DWR */
 481   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0002u);
 482   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x18u);
 483   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG1_CFG0), 0x0000u);
 484   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG1_CFG0 + 0x2u), 0x50u);
 485   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG2_CFG0), 0x002Fu);
 486   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG2_CFG0 + 0x2u), 0x18u);
 487   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG3_CFG0), 0xBB7Fu);
 488   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG3_CFG0 + 0x2u), 0x19u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 10  

 489   1      
 490   1              /* Configure Analog Clocks based on settings from Clock DWR */
 491   1              CYCONFIGCPY((void CYFAR *)(CYREG_CLKDIST_ACFG0_CFG0), (const void CYFAR *)(BS_CYDEV_CLKDIST_ACFG0_CFG0_VA
             -L), 4u);
 492   1      
 493   1              /* Configure ILO based on settings from Clock DWR */
 494   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x06u);
 495   1      
 496   1              /* Configure IMO based on settings from Clock DWR */
 497   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x52u);
 498   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_USB)));
 499   1      
 500   1              /* Configure PLL based on settings from Clock DWR */
 501   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0710u);
 502   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 503   1              /* Wait up to 250us for the PLL to lock */
 504   1              pllLock = 0u;
 505   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 506   1              { 
 507   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 508   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 509   2              }
 510   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 511   1              if (timeout == 0u)
 512   1              {
 513   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 514   2              }
 515   1      
 516   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 517   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 518   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 519   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 520   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 521   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 522   1      
 523   1              /* Configure USB Clock based on settings from Clock DWR */
 524   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_UCFG), 0x00u);
 525   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 526   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DLY1), 0x04u);
 527   1      
 528   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x0Fu
             -)));
 529   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG1), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG1) | 0x01u
             -)));
 530   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG0), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x80u
             -)));
 531   1      }
 532          
 533          
 534          /* Analog API Functions */
 535          
 536          
 537          /*******************************************************************************
 538          * Function Name: AnalogSetDefault
 539          ********************************************************************************
 540          *
 541          * Summary:
 542          *  Sets up the analog portions of the chip to default values based on chip
 543          *  configuration options from the project.
 544          *
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 11  

 545          * Parameters:
 546          *  void
 547          *
 548          * Return:
 549          *  void
 550          *
 551          *******************************************************************************/
 552          static void AnalogSetDefault(void);
 553          static void AnalogSetDefault(void)
 554          {
 555   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 556   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 557   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 558   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0x60u);
 559   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT1_AG, 0x80u);
 560   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT15_AG, 0x01u);
 561   1              CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW0, 0x78u);
 562   1              CY_SET_REG8((void CYXDATA *)CYREG_BUS_SW0, 0x18u);
 563   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 564   1      }
 565          
 566          
 567          /*******************************************************************************
 568          * Function Name: SetAnalogRoutingPumps
 569          ********************************************************************************
 570          *
 571          * Summary:
 572          * Enables or disables the analog pumps feeding analog routing switches.
 573          * Intended to be called at startup, based on the Vdda system configuration;
 574          * may be called during operation when the user informs us that the Vdda voltage
 575          * crossed the pump threshold.
 576          *
 577          * Parameters:
 578          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 579          *
 580          * Return:
 581          *  void
 582          *
 583          *******************************************************************************/
 584          void SetAnalogRoutingPumps(uint8 enabled)
 585          {
 586   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 587   1              if (enabled != 0u)
 588   1              {
 589   2                      regValue |= 0x22u;
 590   2              }
 591   1              else
 592   1              {
 593   2                      regValue &= (uint8)~0x22u;
 594   2              }
 595   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 596   1      }
 597          
 598          
 599          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 600          /* This is an implementation detail of the AMux. Code that depends on it may be
 601             incompatible with other versions of PSoC Creator. */
 602          uint8 CYXDATA * const CYCODE ADC_AMux__addrTable[2] = {
 603                  (uint8 CYXDATA *)CYREG_DSM0_SW3, 
 604                  (uint8 CYXDATA *)CY_AMUX_UNUSED, 
 605          };
 606          
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 12  

 607          /* This is an implementation detail of the AMux. Code that depends on it may be
 608             incompatible with other versions of PSoC Creator. */
 609          const uint8 CYCODE ADC_AMux__maskTable[2] = {
 610                  0x40u, 
 611                  0x00u, 
 612          };
 613          
 614          /*******************************************************************************
 615          * Function Name: ADC_AMux_Set
 616          ********************************************************************************
 617          * Summary:
 618          *  This function is used to set a particular channel as active on the AMux.
 619          *
 620          * Parameters:  
 621          *   channel - The mux channel input to set as active
 622          *
 623          * Return:
 624          *   void
 625          *
 626          *******************************************************************************/
 627          void ADC_AMux_Set(uint8 channel)
 628          {
 629   1              if (channel < 2)
 630   1              {
 631   2                      *ADC_AMux__addrTable[channel] |= ADC_AMux__maskTable[channel];
 632   2              }
 633   1      }
 634          
 635          /*******************************************************************************
 636          * Function Name: ADC_AMux_Unset
 637          ********************************************************************************
 638          * Summary:
 639          *  This function is used to clear a particular channel from being active on the
 640          *  AMux.
 641          *
 642          * Parameters:  
 643          *   channel - The mux channel input to mark inactive
 644          *
 645          * Return:
 646          *   void
 647          *
 648          *******************************************************************************/
 649          void ADC_AMux_Unset(uint8 channel)
 650          {
 651   1              if (channel < 2)
 652   1              {
 653   2                      *ADC_AMux__addrTable[channel] &= (uint8)~ADC_AMux__maskTable[channel];
 654   2              }
 655   1      }
 656          
 657          
 658          
 659          /*******************************************************************************
 660          * Function Name: cyfitter_cfg
 661          ********************************************************************************
 662          * Summary:
 663          *  This function is called by the start-up code for the selected device. It
 664          *  performs all of the necessary device configuration based on the design
 665          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 666          *  as Clocks and Pins as well as any component configuration that is necessary.
 667          *
 668          * Parameters:
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 13  

 669          *   void
 670          *
 671          * Return:
 672          *   void
 673          *
 674          *******************************************************************************/
 675          
 676          void cyfitter_cfg(void)
 677          {
 678   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 679   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x01u));
 680   1      
 681   1              {
 682   2                      cfg_dma_init();
 683   2      
 684   2                      /* Perform normal device configuration. Order is not critical for these items. */
 685   2                      CY_SET_REG8((void CYXDATA *)(CYREG_DSM0_CR3), 0x0Au);
 686   2                      CYCONFIGCPY((void CYFAR *)(CYREG_PHUB_CFGMEM10_CFG0), (const void CYFAR *)(BS_PHUB_CFGMEM10_VAL), 4u);
 687   2      
 688   2                      /* Enable digital routing */
 689   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 690   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 691   2      
 692   2                      /* Enable UDB array */
 693   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 694   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 695   2              }
 696   1      
 697   1      
 698   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 699   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (const void CYFAR *)(BS_IOPINS0_0_VAL), 8u);
 700   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT12_DM0), (const void CYFAR *)(BS_IOPINS0_7_VAL), 8u);
 701   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT15_DR), (const void CYFAR *)(BS_IOPINS0_8_VAL), 10u);
 702   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DR), (const void CYFAR *)(BS_IOPINS0_1_VAL), 10u);
 703   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 704   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 705   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 706   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 707   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 708   1              {
 709   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 710   2              }
 711   1      
 712   1      
 713   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 714   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 715   1              /* Setup clocks based on selections from Clock DWR */
 716   1              ClockSetup();
 717   1      
 718   1              /* Perform basic analog initialization to defaults */
 719   1              AnalogSetDefault();
 720   1      
 721   1              /* Configure alternate active mode */
 722   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 723   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 724   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 80
0000         ?C0001:
                                           ; SOURCE LINE # 98
0000 80FE              SJMP    ?C0001
0002 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 426
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 FE                MOV     R6,A
0003 FD                MOV     R5,A
0004 FC                MOV     R4,A
0005 900000      R     MOV     DPTR,#DMA_ZERO_VAL
0008 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 427
000B 907600            MOV     DPTR,#07600H
000E 7410              MOV     A,#010H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
0011 907010            MOV     DPTR,#07010H
0014 7401              MOV     A,#01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 429
0017 907019            MOV     DPTR,#07019H
001A E4                CLR     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
001C 7B02              MOV     R3,#02H
001E 7A78              MOV     R2,#078H
0020 F9                MOV     R1,A
0021 7D50              MOV     R5,#050H
0023 7C02              MOV     R4,#02H
0025 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 431
0028 907802            MOV     DPTR,#07802H
002B 7401              MOV     A,#01H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
002E A3                INC     DPTR
002F 74A3              MOV     A,#0A3H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 433
0032 7B02              MOV     R3,#02H
0034 7A78              MOV     R2,#078H
0036 7904              MOV     R1,#04H
0038 C003              PUSH    AR3
003A C002              PUSH    AR2
003C C001              PUSH    AR1
003E 7BFF              MOV     R3,#0FFH
0040 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0042 7900        R     MOV     R1,#LOW CFG_TD_LIST0
0044 E9                MOV     A,R1
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 15  

0045 EA                MOV     A,R2
0046 E4                CLR     A
0047 AD01              MOV     R5,AR1
0049 AC02              MOV     R4,AR2
004B D001              POP     AR1
004D D002              POP     AR2
004F D003              POP     AR3
0051 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 434
0054 7B02              MOV     R3,#02H
0056 7A78              MOV     R2,#078H
0058 7906              MOV     R1,#06H
005A 7D08              MOV     R5,#08H
005C 7C78              MOV     R4,#078H
005E 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 435
0061 7B02              MOV     R3,#02H
0063 7A76              MOV     R2,#076H
0065 7904              MOV     R1,#04H
0067 7D10              MOV     R5,#010H
0069 7C00              MOV     R4,#00H
006B 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 436
006E 7B02              MOV     R3,#02H
0070 7A76              MOV     R2,#076H
0072 7906              MOV     R1,#06H
0074 E4                CLR     A
0075 FD                MOV     R5,A
0076 FC                MOV     R4,A
0077 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 437
007A 907029            MOV     DPTR,#07029H
007D 7409              MOV     A,#09H
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
0080 907039            MOV     DPTR,#07039H
0083 04                INC     A
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
0085 907069            MOV     DPTR,#07069H
0088 7411              MOV     A,#011H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
008B 907079            MOV     DPTR,#07079H
008E 7419              MOV     A,#019H
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
0091 907014            MOV     DPTR,#07014H
0094 7401              MOV     A,#01H
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 444
0097         ?C0010:
                                           ; SOURCE LINE # 447
0097 907018            MOV     DPTR,#07018H
009A E0                MOVX    A,@DPTR
009B 5401              ANL     A,#01H
009D 70F8              JNZ     ?C0010
009F         ?C0011:
009F         ?C0012:
                                           ; SOURCE LINE # 448
009F 907028            MOV     DPTR,#07028H
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 16  

00A2 E0                MOVX    A,@DPTR
00A3 5401              ANL     A,#01H
00A5 70F8              JNZ     ?C0012
00A7         ?C0013:
00A7         ?C0014:
                                           ; SOURCE LINE # 449
00A7 907038            MOV     DPTR,#07038H
00AA E0                MOVX    A,@DPTR
00AB 5401              ANL     A,#01H
00AD 70F8              JNZ     ?C0014
00AF         ?C0015:
00AF         ?C0016:
                                           ; SOURCE LINE # 450
00AF 907068            MOV     DPTR,#07068H
00B2 E0                MOVX    A,@DPTR
00B3 5401              ANL     A,#01H
00B5 70F8              JNZ     ?C0016
00B7         ?C0017:
00B7         ?C0018:
                                           ; SOURCE LINE # 451
00B7 907078            MOV     DPTR,#07078H
00BA E0                MOVX    A,@DPTR
00BB 5401              ANL     A,#01H
00BD 70F8              JNZ     ?C0018
00BF         ?C0019:
                                           ; SOURCE LINE # 454
00BF 7B08              MOV     R3,#08H
00C1 7A04              MOV     R2,#04H
00C3 79C0              MOV     R1,#0C0H
00C5 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00C8 7401              MOV     A,#01H
00CA F0                MOVX    @DPTR,A
00CB A3                INC     DPTR
00CC 7451              MOV     A,#051H
00CE F0                MOVX    @DPTR,A
00CF A3                INC     DPTR
00D0 7410              MOV     A,#010H
00D2 F0                MOVX    @DPTR,A
00D3 7F06              MOV     R7,#06H
00D5 7E00              MOV     R6,#00H
00D7 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 456
00DA 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 481
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D02              MOV     R5,#02H
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 482
000D 904082            MOV     DPTR,#04082H
0010 7418              MOV     A,#018H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
0013 7B00              MOV     R3,#00H
0015 7A40              MOV     R2,#040H
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 17  

0017 7984              MOV     R1,#084H
0019 E4                CLR     A
001A FD                MOV     R5,A
001B FC                MOV     R4,A
001C 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 484
001F 904086            MOV     DPTR,#04086H
0022 7450              MOV     A,#050H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
0025 7B00              MOV     R3,#00H
0027 7A40              MOV     R2,#040H
0029 7988              MOV     R1,#088H
002B 7D2F              MOV     R5,#02FH
002D 7C00              MOV     R4,#00H
002F 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 486
0032 90408A            MOV     DPTR,#0408AH
0035 7418              MOV     A,#018H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
0038 7B00              MOV     R3,#00H
003A 7A40              MOV     R2,#040H
003C 798C              MOV     R1,#08CH
003E 7D7F              MOV     R5,#07FH
0040 7CBB              MOV     R4,#0BBH
0042 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 488
0045 90408E            MOV     DPTR,#0408EH
0048 7419              MOV     A,#019H
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
004B 7B08              MOV     R3,#08H
004D 7A1D              MOV     R2,#01DH
004F 7914              MOV     R1,#014H
0051 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0054 E4                CLR     A
0055 F0                MOVX    @DPTR,A
0056 A3                INC     DPTR
0057 7441              MOV     A,#041H
0059 F0                MOVX    @DPTR,A
005A A3                INC     DPTR
005B E4                CLR     A
005C F0                MOVX    @DPTR,A
005D 7F04              MOV     R7,#04H
005F FE                MOV     R6,A
0060 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 494
0063 904300            MOV     DPTR,#04300H
0066 7406              MOV     A,#06H
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
0069 904200            MOV     DPTR,#04200H
006C 7452              MOV     A,#052H
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 498
006F 7B0C              MOV     R3,#0CH
0071 7A01              MOV     R2,#01H
0073 790F              MOV     R1,#0FH
0075 120000      E     LCALL   _cyread8
0078 9046A1            MOV     DPTR,#046A1H
007B EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 18  

007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 501
007D 7B00              MOV     R3,#00H
007F 7A42              MOV     R2,#042H
0081 7922              MOV     R1,#022H
0083 7D10              MOV     R5,#010H
0085 7C07              MOV     R4,#07H
0087 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 502
008A 7B00              MOV     R3,#00H
008C 7A42              MOV     R2,#042H
008E 7920              MOV     R1,#020H
0090 7D51              MOV     R5,#051H
0092 7C12              MOV     R4,#012H
0094 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 504
0097 E4                CLR     A
0098 900000      R     MOV     DPTR,#pllLock
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 505
009C 7F19              MOV     R7,#019H
009E FE                MOV     R6,A
009F FD                MOV     R5,A
00A0 FC                MOV     R4,A
00A1 900000      R     MOV     DPTR,#timeout
00A4 120000      E     LCALL   ?C?LSTXDATA
00A7         ?C0021:
00A7 900000      R     MOV     DPTR,#timeout
00AA E0                MOVX    A,@DPTR
00AB A3                INC     DPTR
00AC E0                MOVX    A,@DPTR
00AD A3                INC     DPTR
00AE E0                MOVX    A,@DPTR
00AF FE                MOV     R6,A
00B0 A3                INC     DPTR
00B1 E0                MOVX    A,@DPTR
00B2 D3                SETB    C
00B3 9400              SUBB    A,#00H
00B5 EE                MOV     A,R6
00B6 9400              SUBB    A,#00H
00B8 404A              JC      ?C0022
00BA A3                INC     DPTR
00BB E0                MOVX    A,@DPTR
00BC FF                MOV     R7,A
00BD 6403              XRL     A,#03H
00BF 6043              JZ      ?C0022
                                           ; SOURCE LINE # 506
                                           ; SOURCE LINE # 507
00C1 904225            MOV     DPTR,#04225H
00C4 E0                MOVX    A,@DPTR
00C5 5401              ANL     A,#01H
00C7 FE                MOV     R6,A
00C8 EF                MOV     A,R7
00C9 25E0              ADD     A,ACC
00CB 4E                ORL     A,R6
00CC 5403              ANL     A,#03H
00CE 900000      R     MOV     DPTR,#pllLock
00D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
00D2 E4                CLR     A
00D3 7FE0              MOV     R7,#0E0H
00D5 7E01              MOV     R6,#01H
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 19  

00D7 FD                MOV     R5,A
00D8 FC                MOV     R4,A
00D9 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 509
00DC 900000      R     MOV     DPTR,#timeout
00DF E0                MOVX    A,@DPTR
00E0 FC                MOV     R4,A
00E1 A3                INC     DPTR
00E2 E0                MOVX    A,@DPTR
00E3 FD                MOV     R5,A
00E4 A3                INC     DPTR
00E5 E0                MOVX    A,@DPTR
00E6 FE                MOV     R6,A
00E7 A3                INC     DPTR
00E8 E0                MOVX    A,@DPTR
00E9 FF                MOV     R7,A
00EA 74FF              MOV     A,#0FFH
00EC EF                MOV     A,R7
00ED 24FF              ADD     A,#0FFH
00EF FF                MOV     R7,A
00F0 EE                MOV     A,R6
00F1 34FF              ADDC    A,#0FFH
00F3 FE                MOV     R6,A
00F4 ED                MOV     A,R5
00F5 34FF              ADDC    A,#0FFH
00F7 FD                MOV     R5,A
00F8 EC                MOV     A,R4
00F9 34FF              ADDC    A,#0FFH
00FB FC                MOV     R4,A
00FC 900000      R     MOV     DPTR,#timeout
00FF 120000      E     LCALL   ?C?LSTXDATA
0102 80A3              SJMP    ?C0021
0104         ?C0022:
                                           ; SOURCE LINE # 511
0104 900000      R     MOV     DPTR,#timeout
0107 E0                MOVX    A,@DPTR
0108 A3                INC     DPTR
0109 E0                MOVX    A,@DPTR
010A A3                INC     DPTR
010B E0                MOVX    A,@DPTR
010C FE                MOV     R6,A
010D A3                INC     DPTR
010E E0                MOVX    A,@DPTR
010F 4E                ORL     A,R6
0110 7005              JNZ     ?C0024
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 513
0112 7F03              MOV     R7,#03H
0114 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 514
0117         ?C0024:
                                           ; SOURCE LINE # 517
0117 7B00              MOV     R3,#00H
0119 7A40              MOV     R2,#040H
011B 7904              MOV     R1,#04H
011D 7D00              MOV     R5,#00H
011F 7C01              MOV     R4,#01H
0121 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 518
0124 904004            MOV     DPTR,#04004H
0127 7407              MOV     A,#07H
0129 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 20  

                                           ; SOURCE LINE # 519
012A 904006            MOV     DPTR,#04006H
012D E4                CLR     A
012E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
012F 904008            MOV     DPTR,#04008H
0132 7448              MOV     A,#048H
0134 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
0135 904004            MOV     DPTR,#04004H
0138 E4                CLR     A
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 524
013A 904009            MOV     DPTR,#04009H
013D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
013E 904001            MOV     DPTR,#04001H
0141 7402              MOV     A,#02H
0143 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
0144 90400B            MOV     DPTR,#0400BH
0147 7404              MOV     A,#04H
0149 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
014A 9043A2            MOV     DPTR,#043A2H
014D E0                MOVX    A,@DPTR
014E 440F              ORL     A,#0FH
0150 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 529
0151 9043A1            MOV     DPTR,#043A1H
0154 E0                MOVX    A,@DPTR
0155 4401              ORL     A,#01H
0157 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
0158 9043A0            MOV     DPTR,#043A0H
015B E0                MOVX    A,@DPTR
015C 4480              ORL     A,#080H
015E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 531
015F 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 553
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
;---- Variable 'bg_xover_inl_trim' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 556
0009 EF                MOV     A,R7
000A 5407              ANL     A,#07H
000C 90586E            MOV     DPTR,#0586EH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 557
0010 EF                MOV     A,R7
0011 C4                SWAP    A
0012 540F              ANL     A,#0FH
0014 A3                INC     DPTR
0015 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 21  

                                           ; SOURCE LINE # 558
0016 90510D            MOV     DPTR,#0510DH
0019 7460              MOV     A,#060H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 559
001C 90511D            MOV     DPTR,#0511DH
001F 7480              MOV     A,#080H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
0022 9051FD            MOV     DPTR,#051FDH
0025 7401              MOV     A,#01H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 561
0028 905B00            MOV     DPTR,#05B00H
002B 7478              MOV     A,#078H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
002E 905B58            MOV     DPTR,#05B58H
0031 7418              MOV     A,#018H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 563
0034 905876            MOV     DPTR,#05876H
0037 7444              MOV     A,#044H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
003A 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 584
;---- Variable 'enabled' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 586
0000 905876            MOV     DPTR,#05876H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
;---- Variable 'regValue' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 587
0005 EF                MOV     A,R7
0006 6006              JZ      ?C0027
                                           ; SOURCE LINE # 588
                                           ; SOURCE LINE # 589
0008 EE                MOV     A,R6
0009 4422              ORL     A,#022H
000B FE                MOV     R6,A
                                           ; SOURCE LINE # 590
000C 8004              SJMP    ?C0028
000E         ?C0027:
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
000E EE                MOV     A,R6
000F 54DD              ANL     A,#0DDH
0011 FE                MOV     R6,A
                                           ; SOURCE LINE # 594
0012         ?C0028:
                                           ; SOURCE LINE # 595
0012 AF06              MOV     R7,AR6
0014 905876            MOV     DPTR,#05876H
0017 EE                MOV     A,R6
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 596
0019 22                RET     
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 22  

             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION _ADC_AMux_Set (BEGIN)
                                           ; SOURCE LINE # 627
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 628
                                           ; SOURCE LINE # 629
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9402              SUBB    A,#02H
0004 5029              JNC     ?C0031
                                           ; SOURCE LINE # 630
                                           ; SOURCE LINE # 631
0006 EF                MOV     A,R7
0007 25E0              ADD     A,ACC
0009 2400        R     ADD     A,#LOW ADC_AMux__addrTable
000B F582              MOV     DPL,A
000D E4                CLR     A
000E 3400        R     ADDC    A,#HIGH ADC_AMux__addrTable
0010 F583              MOV     DPH,A
0012 E4                CLR     A
0013 93                MOVC    A,@A+DPTR
0014 FC                MOV     R4,A
0015 7401              MOV     A,#01H
0017 93                MOVC    A,@A+DPTR
0018 F582              MOV     DPL,A
001A 8C83              MOV     DPH,R4
001C C083              PUSH    DPH
001E C082              PUSH    DPL
0020 E0                MOVX    A,@DPTR
0021 FE                MOV     R6,A
0022 EF                MOV     A,R7
0023 900000      R     MOV     DPTR,#ADC_AMux__maskTable
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 EE                MOV     A,R6
0029 4F                ORL     A,R7
002A D082              POP     DPL
002C D083              POP     DPH
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 633
002F         ?C0031:
002F 22                RET     
             ; FUNCTION _ADC_AMux_Set (END)

             ; FUNCTION _ADC_AMux_Unset (BEGIN)
                                           ; SOURCE LINE # 649
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 651
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9402              SUBB    A,#02H
0004 502A              JNC     ?C0033
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 653
0006 EF                MOV     A,R7
0007 25E0              ADD     A,ACC
0009 2400        R     ADD     A,#LOW ADC_AMux__addrTable
000B F582              MOV     DPL,A
000D E4                CLR     A
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 23  

000E 3400        R     ADDC    A,#HIGH ADC_AMux__addrTable
0010 F583              MOV     DPH,A
0012 E4                CLR     A
0013 93                MOVC    A,@A+DPTR
0014 FC                MOV     R4,A
0015 7401              MOV     A,#01H
0017 93                MOVC    A,@A+DPTR
0018 F582              MOV     DPL,A
001A 8C83              MOV     DPH,R4
001C C083              PUSH    DPH
001E C082              PUSH    DPL
0020 E0                MOVX    A,@DPTR
0021 FE                MOV     R6,A
0022 EF                MOV     A,R7
0023 900000      R     MOV     DPTR,#ADC_AMux__maskTable
0026 93                MOVC    A,@A+DPTR
0027 F4                CPL     A
0028 FF                MOV     R7,A
0029 EE                MOV     A,R6
002A 5F                ANL     A,R7
002B D082              POP     DPL
002D D083              POP     DPH
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 655
0030         ?C0033:
0030 22                RET     
             ; FUNCTION _ADC_AMux_Unset (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 679
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4401              ORL     A,#01H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 682
0016 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 685
0019 905883            MOV     DPTR,#05883H
001C 740A              MOV     A,#0AH
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 686
001F 7B08              MOV     R3,#08H
0021 7A1D              MOV     R2,#01DH
0023 7918              MOV     R1,#018H
0025 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0028 E4                CLR     A
0029 F0                MOVX    @DPTR,A
002A A3                INC     DPTR
002B 7476              MOV     A,#076H
002D F0                MOVX    @DPTR,A
002E A3                INC     DPTR
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 24  

002F 7450              MOV     A,#050H
0031 F0                MOVX    @DPTR,A
0032 7F04              MOV     R7,#04H
0034 7E00              MOV     R6,#00H
0036 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 689
0039 7B01              MOV     R3,#01H
003B 7A50              MOV     R2,#050H
003D 7903              MOV     R1,#03H
003F 120000      E     LCALL   _cyread8
0042 EF                MOV     A,R7
0043 4402              ORL     A,#02H
0045 FD                MOV     R5,A
0046 7B01              MOV     R3,#01H
0048 7A50              MOV     R2,#050H
004A 7903              MOV     R1,#03H
004C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 690
004F 7B01              MOV     R3,#01H
0051 7A50              MOV     R2,#050H
0053 7913              MOV     R1,#013H
0055 120000      E     LCALL   _cyread8
0058 EF                MOV     A,R7
0059 4402              ORL     A,#02H
005B FD                MOV     R5,A
005C 7B01              MOV     R3,#01H
005E 7A50              MOV     R2,#050H
0060 7913              MOV     R1,#013H
0062 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 693
0065 9043A0            MOV     DPTR,#043A0H
0068 E0                MOVX    A,@DPTR
0069 4440              ORL     A,#040H
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 694
006C 9043C2            MOV     DPTR,#043C2H
006F E0                MOVX    A,@DPTR
0070 4410              ORL     A,#010H
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 699
0073 7B08              MOV     R3,#08H
0075 7A1C              MOV     R2,#01CH
0077 79E4              MOV     R1,#0E4H
0079 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
007C E4                CLR     A
007D F0                MOVX    @DPTR,A
007E A3                INC     DPTR
007F 7451              MOV     A,#051H
0081 F0                MOVX    @DPTR,A
0082 A3                INC     DPTR
0083 7402              MOV     A,#02H
0085 F0                MOVX    @DPTR,A
0086 7F08              MOV     R7,#08H
0088 7E00              MOV     R6,#00H
008A 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 700
008D 7B08              MOV     R3,#08H
008F 7A1C              MOV     R2,#01CH
0091 79EC              MOV     R1,#0ECH
0093 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0096 E4                CLR     A
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 25  

0097 F0                MOVX    @DPTR,A
0098 A3                INC     DPTR
0099 7451              MOV     A,#051H
009B F0                MOVX    @DPTR,A
009C A3                INC     DPTR
009D 74C2              MOV     A,#0C2H
009F F0                MOVX    @DPTR,A
00A0 7F08              MOV     R7,#08H
00A2 7E00              MOV     R6,#00H
00A4 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 701
00A7 7B08              MOV     R3,#08H
00A9 7A1C              MOV     R2,#01CH
00AB 79F4              MOV     R1,#0F4H
00AD 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00B0 E4                CLR     A
00B1 F0                MOVX    @DPTR,A
00B2 A3                INC     DPTR
00B3 7451              MOV     A,#051H
00B5 F0                MOVX    @DPTR,A
00B6 A3                INC     DPTR
00B7 74F0              MOV     A,#0F0H
00B9 F0                MOVX    @DPTR,A
00BA 7F0A              MOV     R7,#0AH
00BC 7E00              MOV     R6,#00H
00BE 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 702
00C1 7B08              MOV     R3,#08H
00C3 7A1D              MOV     R2,#01DH
00C5 7900              MOV     R1,#00H
00C7 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00CA E4                CLR     A
00CB F0                MOVX    @DPTR,A
00CC A3                INC     DPTR
00CD 7451              MOV     A,#051H
00CF F0                MOVX    @DPTR,A
00D0 A3                INC     DPTR
00D1 7410              MOV     A,#010H
00D3 F0                MOVX    @DPTR,A
00D4 7F0A              MOV     R7,#0AH
00D6 7E00              MOV     R6,#00H
00D8 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 703
00DB 7B08              MOV     R3,#08H
00DD 7A1D              MOV     R2,#01DH
00DF 790C              MOV     R1,#0CH
00E1 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00E4 E4                CLR     A
00E5 F0                MOVX    @DPTR,A
00E6 A3                INC     DPTR
00E7 7451              MOV     A,#051H
00E9 F0                MOVX    @DPTR,A
00EA A3                INC     DPTR
00EB 7422              MOV     A,#022H
00ED F0                MOVX    @DPTR,A
00EE 7F08              MOV     R7,#08H
00F0 7E00              MOV     R6,#00H
00F2 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 704
00F5 9044F4            MOV     DPTR,#044F4H
00F8 7401              MOV     A,#01H
00FA F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 26  

                                           ; SOURCE LINE # 706
00FB 904322            MOV     DPTR,#04322H
00FE E0                MOVX    A,@DPTR
00FF 4408              ORL     A,#08H
0101 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 707
0102 9046EC            MOV     DPTR,#046ECH
0105 E0                MOVX    A,@DPTR
0106 C3                CLR     C
0107 9405              SUBB    A,#05H
0109 5006              JNC     ?C0034
                                           ; SOURCE LINE # 708
                                           ; SOURCE LINE # 709
010B 904689            MOV     DPTR,#04689H
010E 743A              MOV     A,#03AH
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 710
0111         ?C0034:
                                           ; SOURCE LINE # 714
0111 904800            MOV     DPTR,#04800H
0114 74F1              MOV     A,#0F1H
0116 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
0117 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 719
011A 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 722
011D 7B00              MOV     R3,#00H
011F 7A43              MOV     R2,#043H
0121 79A0              MOV     R1,#0A0H
0123 C003              PUSH    AR3
0125 C002              PUSH    AR2
0127 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
012A EB                MOV     A,R3
012B F0                MOVX    @DPTR,A
012C A3                INC     DPTR
012D EA                MOV     A,R2
012E F0                MOVX    @DPTR,A
012F A3                INC     DPTR
0130 74B0              MOV     A,#0B0H
0132 F0                MOVX    @DPTR,A
0133 D002              POP     AR2
0135 D003              POP     AR3
0137 7F0E              MOV     R7,#0EH
0139 7E00              MOV     R6,#00H
013B 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 723
013E 9043B0            MOV     DPTR,#043B0H
0141 E0                MOVX    A,@DPTR
0142 54FD              ANL     A,#0FDH
0144 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
0145 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1082    ----
   CONSTANT SIZE    =    635    ----
   XDATA SIZE       =      4       5
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.51   CYFITTER_CFG                                                          02/14/2023 10:00:00 PAGE 27  

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
