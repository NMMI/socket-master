C51 COMPILER V9.51   MAIN                                                                  04/20/2018 10:00:44 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL(2) PR(.\DP8051_Keil_951
                    -\Release/main.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\main.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          // ----------------------------------------------------------------------------
   2          // BSD 3-Clause License
   3          
   4          // Copyright (c) 2016, qbrobotics
   5          // Copyright (c) 2017, Centro "E.Piaggio"
   6          // All rights reserved.
   7          
   8          // Redistribution and use in source and binary forms, with or without
   9          // modification, are permitted provided that the following conditions are met:
  10          
  11          // * Redistributions of source code must retain the above copyright notice, this
  12          //   list of conditions and the following disclaimer.
  13          
  14          // * Redistributions in binary form must reproduce the above copyright notice,
  15          //   this list of conditions and the following disclaimer in the documentation
  16          //   and/or other materials provided with the distribution.
  17          
  18          // * Neither the name of the copyright holder nor the names of its
  19          //   contributors may be used to endorse or promote products derived from
  20          //   this software without specific prior written permission.
  21          
  22          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25          // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26          // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27          // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28          // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29          // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30          // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32          // POSSIBILITY OF SUCH DAMAGE.
  33          // ----------------------------------------------------------------------------
  34          
  35          
  36          /**
  37          * \file         main.c
  38          *
  39          * \brief        Firmware main file.
  40          * \date         October 01, 2017
  41          * \author       _Centro "E.Piaggio"_
  42          * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  43          * \copyright    (C) 2017 Centro "E.Piaggio". All rights reserved.
  44          * \mainpage     Firmware
  45          * \brief        This is the firmware of the SoftHand Pro board.
  46          * \version      6.1.1
  47          *
  48          * \details      This is the firmware of the SoftHand Pro board in Master configuration. 
  49          *                               It reads EMG connected to socket and control a motor of an attached SoftHand. 
  50          *                               Also can read and convert analog measurements connected to the PSoC microcontroller.                
  51          *
  52          */
C51 COMPILER V9.51   MAIN                                                                  04/20/2018 10:00:44 PAGE 2   

  53          
  54          
  55          // ----------------------------------------------------------------------------
  56          // This version changes:
  57          //      - not reported
  58          
  59          
  60          //=================================================================     includes
  61          
  62          #include <device.h>
  63          #include <globals.h> // ALL GLOBAL DEFINITIONS, STRUCTURES AND MACROS HERE
  64          #include <interruptions.h>
  65          #include <command_processing.h>
  66          #include <utils.h>
  67          
  68          //==============================================================================
  69          //                                                                 MAIN FUNCTION
  70          //==============================================================================
  71          
  72          int main()
  73          {
  74   1          // Iterator
  75   1          uint8 i;         
  76   1          
  77   1          // Variable declarations for DMA 
  78   1          
  79   1          uint8 DMA_Chan;
  80   1          uint8 DMA_TD[1];
  81   1      
  82   1          //================================     initializations - psoc and components
  83   1      
  84   1          // EEPROM
  85   1      
  86   1          EEPROM_Start();
  87   1          memRecall();                                        // Recall configuration.
  88   1      
  89   1          // FTDI chip enable
  90   1      
  91   1          CyDelay(100);
  92   1          FTDI_ENABLE_REG_Write(0x01);
  93   1          
  94   1          // BOARD LED Enable
  95   1          LED_CTRL_Write(1);
  96   1          //PWM Blink Enable
  97   1          LED_BLINK_EN_Write(0);
  98   1          LED_BLINK_Start();
  99   1          LED_BLINK_WriteCompare(128);
 100   1          
 101   1          // RS485
 102   1      
 103   1          UART_RS485_Stop();                                  // Stop UART.
 104   1          UART_RS485_Start();                                 // Start UART.
 105   1          UART_RS485_Init();
 106   1      
 107   1          UART_RS485_ClearRxBuffer();
 108   1          UART_RS485_ClearTxBuffer();
 109   1      
 110   1          ISR_RS485_RX_StartEx(ISR_RS485_RX_ExInterrupt);     // RS485 isr function.
 111   1      
 112   1          // PWM
 113   1      
 114   1          PWM_MOTORS_Start();
C51 COMPILER V9.51   MAIN                                                                  04/20/2018 10:00:44 PAGE 3   

 115   1          PWM_MOTORS_WriteCompare1(0);
 116   1          PWM_MOTORS_WriteCompare2(0);
 117   1          MOTOR_DIR_Write(0);
 118   1          MOTOR_ON_OFF_Write(0x00);
 119   1      
 120   1      
 121   1          // SSI encoder initializations
 122   1      
 123   1          COUNTER_ENC_Start();
 124   1      
 125   1          SHIFTREG_ENC_1_Start();
 126   1          SHIFTREG_ENC_2_Start();
 127   1          SHIFTREG_ENC_3_Start();
 128   1      
 129   1          // ADC
 130   1      
 131   1          ADC_Start();                                        // Start ADC.
 132   1          ADC_SOC_Write(0x01);                                // Force first read cycle.
 133   1         
 134   1          // DMA
 135   1          DMA_Chan = DMA_DmaInitialize(DMA_BYTES_PER_BURST, DMA_REQUEST_PER_BURST, HI16(DMA_SRC_BASE), HI16(DMA_
             -DST_BASE));
 136   1          DMA_TD[0] = CyDmaTdAllocate();                                                                        
             -  // Allocate TD
 137   1          CyDmaTdSetConfiguration(DMA_TD[0], 2 * 4, DMA_TD[0], TD_SWAP_EN | DMA__TD_TERMOUT_EN | TD_INC_DST_ADR)
             -; // DMA Configurations
 138   1          CyDmaTdSetAddress(DMA_TD[0], LO16((uint32)ADC_DEC_SAMP_PTR), LO16((uint32)ADC_buf));                  
             -  // Set Register Address
 139   1          CyDmaChSetInitialTd(DMA_Chan, DMA_TD[0]);                                                             
             -  // Initialize Channel
 140   1          
 141   1          CyDmaChEnable(DMA_Chan, 1);                                                                           
             -  // Enable DMA
 142   1      
 143   1          RS485_CTS_Write(0);                                 // Clear To Send on RS485.
 144   1      
 145   1          // TIMER
 146   1      
 147   1          MY_TIMER_Start();           
 148   1          PACER_TIMER_Start();
 149   1      
 150   1          CYGlobalIntEnable;                                  // Enable interrupts.
 151   1      
 152   1      //========================================     initializations - clean variables
 153   1      
 154   1          RESET_COUNTERS_Write(0x00);                         // Activate encoder counters.
 155   1      
 156   1          CyDelay(10);                                        // Wait for encoders to have a valid value.
 157   1      
 158   1          //---------------------------------------------------  Initialize reference structure
 159   1          for (i = NUM_OF_MOTORS; i--;) 
 160   1              g_ref.pos[i] = 0;
 161   1      
 162   1      
 163   1          if (c_mem.emg_calibration_flag) {
 164   2              if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 165   2                  (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 166   2                  (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 167   2                  (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV))
 168   2                  g_ref.onoff = 0x00;
 169   2              else
 170   2                  g_ref.onoff = c_mem.activ;
C51 COMPILER V9.51   MAIN                                                                  04/20/2018 10:00:44 PAGE 4   

 171   2          } 
 172   1          else
 173   1              g_ref.onoff = c_mem.activ;
 174   1          
 175   1          //---------------------------------------------------  Initialize measurement structure
 176   1          for (i = NUM_OF_SENSORS; i--;) { 
 177   2              g_meas.pos[i] = 0;
 178   2              g_meas.rot[i] = 0;
 179   2          }
 180   1      
 181   1          g_refNew = g_ref;                                   // Initialize k+1 measurements structure.
 182   1      
 183   1          g_ref.onoff = c_mem.activ;                          // Initalize Activation.
 184   1          
 185   1          //---------------------------------------------------  Initialize emg structure
 186   1          g_meas.emg[0] = 0;
 187   1          g_meas.emg[1] = 0;
 188   1      
 189   1          MOTOR_ON_OFF_Write(g_ref.onoff);                    // Activating motors.
 190   1      
 191   1          dev_pwm_limit = 0;                                  // Init PWM limit.
 192   1          pow_tension = 12000;       //12000 mV (12 V)
 193   1          tension_valid = FALSE;                              // Init tension_valid BIT.
 194   1          first_tension_valid = TRUE;
 195   1      
 196   1          reset_last_value_flag = 0;
 197   1      
 198   1          //------------------------------------------------- Initialize package on receive from RS485
 199   1          g_rx.length = 0;
 200   1          g_rx.ready  = 0;
 201   1              
 202   1          // enable master_mode by default
 203   1          
 204   1          master_mode = 1;
 205   1          count_tension_valid = 0;
 206   1       
 207   1          //============================================================     main loop
 208   1      
 209   1          for(;;)
 210   1          {
 211   2              // Put the FF reset pin to LOW
 212   2              RESET_FF_Write(0x00);
 213   2      
 214   2              // Call function scheduler
 215   2              function_scheduler();
 216   2      
 217   2              //  Wait until the FF is set to 1
 218   2              while(FF_STATUS_Read() == 0){
 219   3                  // On interrupt from RS485
 220   3                  if (interrupt_flag){
 221   4                      // Reset flags
 222   4                      interrupt_flag = FALSE;
 223   4                      // Manage Interrupt on rs485
 224   4                      interrupt_manager();
 225   4                  }
 226   3              };
 227   2      
 228   2              // Command a FF reset
 229   2              RESET_FF_Write(0x01);
 230   2      
 231   2              // Wait for FF to be reset
 232   2              while(FF_STATUS_Read() == 1);
C51 COMPILER V9.51   MAIN                                                                  04/20/2018 10:00:44 PAGE 5   

 233   2      
 234   2              if(UART_RS485_ReadRxStatus() & UART_RS485_RX_STS_SOFT_BUFF_OVER)
 235   2                  UART_RS485_ClearRxBuffer();
 236   2          }
 237   1          return 0;
 238   1      }
 239          
 240          
 241          
 242          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  04/20/2018 10:00:44 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 86
0000 120000      E     LCALL   EEPROM_Start
                                           ; SOURCE LINE # 87
0003 120000      E     LCALL   memRecall
                                           ; SOURCE LINE # 91
0006 E4                CLR     A
0007 7F64              MOV     R7,#064H
0009 FE                MOV     R6,A
000A FD                MOV     R5,A
000B FC                MOV     R4,A
000C 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 92
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _FTDI_ENABLE_REG_Write
                                           ; SOURCE LINE # 95
0014 7F01              MOV     R7,#01H
0016 120000      E     LCALL   _LED_CTRL_Write
                                           ; SOURCE LINE # 97
0019 E4                CLR     A
001A FF                MOV     R7,A
001B 120000      E     LCALL   _LED_BLINK_EN_Write
                                           ; SOURCE LINE # 98
001E 120000      E     LCALL   LED_BLINK_Start
                                           ; SOURCE LINE # 99
0021 7F80              MOV     R7,#080H
0023 120000      E     LCALL   _LED_BLINK_WriteCompare
                                           ; SOURCE LINE # 103
0026 120000      E     LCALL   UART_RS485_Stop
                                           ; SOURCE LINE # 104
0029 120000      E     LCALL   UART_RS485_Start
                                           ; SOURCE LINE # 105
002C 120000      E     LCALL   UART_RS485_Init
                                           ; SOURCE LINE # 107
002F 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 108
0032 120000      E     LCALL   UART_RS485_ClearTxBuffer
                                           ; SOURCE LINE # 110
0035 7E00        E     MOV     R6,#HIGH ISR_RS485_RX_ExInterrupt
0037 7F00        E     MOV     R7,#LOW ISR_RS485_RX_ExInterrupt
0039 120000      E     LCALL   _ISR_RS485_RX_StartEx
                                           ; SOURCE LINE # 114
003C 120000      E     LCALL   PWM_MOTORS_Start
                                           ; SOURCE LINE # 115
003F E4                CLR     A
0040 FF                MOV     R7,A
0041 120000      E     LCALL   _PWM_MOTORS_WriteCompare1
                                           ; SOURCE LINE # 116
0044 E4                CLR     A
0045 FF                MOV     R7,A
0046 120000      E     LCALL   _PWM_MOTORS_WriteCompare2
                                           ; SOURCE LINE # 117
0049 E4                CLR     A
004A FF                MOV     R7,A
004B 120000      E     LCALL   _MOTOR_DIR_Write
                                           ; SOURCE LINE # 118
004E E4                CLR     A
C51 COMPILER V9.51   MAIN                                                                  04/20/2018 10:00:44 PAGE 7   

004F FF                MOV     R7,A
0050 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 123
0053 120000      E     LCALL   COUNTER_ENC_Start
                                           ; SOURCE LINE # 125
0056 120000      E     LCALL   SHIFTREG_ENC_1_Start
                                           ; SOURCE LINE # 126
0059 120000      E     LCALL   SHIFTREG_ENC_2_Start
                                           ; SOURCE LINE # 127
005C 120000      E     LCALL   SHIFTREG_ENC_3_Start
                                           ; SOURCE LINE # 131
005F 120000      E     LCALL   ADC_Start
                                           ; SOURCE LINE # 132
0062 7F01              MOV     R7,#01H
0064 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 135
0067 E4                CLR     A
0068 900000      E     MOV     DPTR,#?_DMA_DmaInitialize?BYTE+04H
006B F0                MOVX    @DPTR,A
006C A3                INC     DPTR
006D F0                MOVX    @DPTR,A
006E FB                MOV     R3,A
006F FA                MOV     R2,A
0070 7D01              MOV     R5,#01H
0072 7F02              MOV     R7,#02H
0074 120000      E     LCALL   _DMA_DmaInitialize
0077 900000      R     MOV     DPTR,#DMA_Chan
007A EF                MOV     A,R7
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
007C 120000      E     LCALL   CyDmaTdAllocate
007F 900000      R     MOV     DPTR,#DMA_TD
0082 EF                MOV     A,R7
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
0084 E0                MOVX    A,@DPTR
0085 FB                MOV     R3,A
0086 FF                MOV     R7,A
0087 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
008A 7486              MOV     A,#086H
008C F0                MOVX    @DPTR,A
008D 7D08              MOV     R5,#08H
008F 7C00              MOV     R4,#00H
0091 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 138
0094 7B01              MOV     R3,#01H
0096 7A00        E     MOV     R2,#HIGH ADC_buf
0098 7900        E     MOV     R1,#LOW ADC_buf
009A E9                MOV     A,R1
009B EA                MOV     A,R2
009C E4                CLR     A
009D AB01              MOV     R3,AR1
009F 900000      R     MOV     DPTR,#DMA_TD
00A2 E0                MOVX    A,@DPTR
00A3 FF                MOV     R7,A
00A4 7D10              MOV     R5,#010H
00A6 7C4E              MOV     R4,#04EH
00A8 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 139
00AB 900000      R     MOV     DPTR,#DMA_Chan
00AE E0                MOVX    A,@DPTR
00AF FF                MOV     R7,A
C51 COMPILER V9.51   MAIN                                                                  04/20/2018 10:00:44 PAGE 8   

00B0 A3                INC     DPTR
00B1 E0                MOVX    A,@DPTR
00B2 FD                MOV     R5,A
00B3 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 141
00B6 900000      R     MOV     DPTR,#DMA_Chan
00B9 E0                MOVX    A,@DPTR
00BA FF                MOV     R7,A
00BB 7D01              MOV     R5,#01H
00BD 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 143
00C0 E4                CLR     A
00C1 FF                MOV     R7,A
00C2 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 147
00C5 120000      E     LCALL   MY_TIMER_Start
                                           ; SOURCE LINE # 148
00C8 120000      E     LCALL   PACER_TIMER_Start
                                           ; SOURCE LINE # 150
00CB D2AF              SETB    EA
00CD 9044F4            MOV     DPTR,#044F4H
00D0 74FD              MOV     A,#0FDH
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
00D3 E4                CLR     A
00D4 FF                MOV     R7,A
00D5 120000      E     LCALL   _RESET_COUNTERS_Write
                                           ; SOURCE LINE # 156
00D8 E4                CLR     A
00D9 7F0A              MOV     R7,#0AH
00DB FE                MOV     R6,A
00DC FD                MOV     R5,A
00DD FC                MOV     R4,A
00DE 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 159
;---- Variable 'i' assigned to Register 'R3' ----
00E1 7B02              MOV     R3,#02H
00E3         ?C0001:
00E3 AF03              MOV     R7,AR3
00E5 1B                DEC     R3
00E6 EF                MOV     A,R7
00E7 6018              JZ      ?C0002
                                           ; SOURCE LINE # 160
00E9 E4                CLR     A
00EA FF                MOV     R7,A
00EB FE                MOV     R6,A
00EC FD                MOV     R5,A
00ED FC                MOV     R4,A
00EE EB                MOV     A,R3
00EF 25E0              ADD     A,ACC
00F1 25E0              ADD     A,ACC
00F3 2400        E     ADD     A,#LOW g_ref
00F5 F582              MOV     DPL,A
00F7 E4                CLR     A
00F8 3400        E     ADDC    A,#HIGH g_ref
00FA F583              MOV     DPH,A
00FC 120000      E     LCALL   ?C?LSTXDATA
00FF 80E2              SJMP    ?C0001
0101         ?C0002:
                                           ; SOURCE LINE # 163
0101 900000      E     MOV     DPTR,#c_mem+048H
0104 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   MAIN                                                                  04/20/2018 10:00:44 PAGE 9   

0105 6028              JZ      ?C0003
                                           ; SOURCE LINE # 164
0107 900000      E     MOV     DPTR,#c_mem+0FH
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C 6402              XRL     A,#02H
010E 600E              JZ      ?C0005
0110 EF                MOV     A,R7
0111 6403              XRL     A,#03H
0113 6009              JZ      ?C0005
0115 EF                MOV     A,R7
0116 6404              XRL     A,#04H
0118 6004              JZ      ?C0005
011A EF                MOV     A,R7
011B B40507            CJNE    A,#05H,?C0004
011E         ?C0005:
                                           ; SOURCE LINE # 168
011E E4                CLR     A
011F 900000      E     MOV     DPTR,#g_ref+018H
0122 F0                MOVX    @DPTR,A
0123 8012              SJMP    ?C0007
0125         ?C0004:
                                           ; SOURCE LINE # 170
0125 900000      E     MOV     DPTR,#c_mem+0EH
0128 E0                MOVX    A,@DPTR
0129 900000      E     MOV     DPTR,#g_ref+018H
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
012D 8008              SJMP    ?C0007
012F         ?C0003:
                                           ; SOURCE LINE # 173
012F 900000      E     MOV     DPTR,#c_mem+0EH
0132 E0                MOVX    A,@DPTR
0133 900000      E     MOV     DPTR,#g_ref+018H
0136 F0                MOVX    @DPTR,A
0137         ?C0007:
                                           ; SOURCE LINE # 176
0137 7B03              MOV     R3,#03H
0139         ?C0008:
0139 AF03              MOV     R7,AR3
013B 1B                DEC     R3
013C EF                MOV     A,R7
013D 6024              JZ      ?C0009
                                           ; SOURCE LINE # 177
013F E4                CLR     A
0140 FF                MOV     R7,A
0141 FE                MOV     R6,A
0142 FD                MOV     R5,A
0143 FC                MOV     R4,A
0144 EB                MOV     A,R3
0145 25E0              ADD     A,ACC
0147 25E0              ADD     A,ACC
0149 2400        E     ADD     A,#LOW g_meas
014B F582              MOV     DPL,A
014D E4                CLR     A
014E 3400        E     ADDC    A,#HIGH g_meas
0150 F583              MOV     DPH,A
0152 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 178
0155 7400        E     MOV     A,#LOW g_meas+0CH
0157 2B                ADD     A,R3
0158 F582              MOV     DPL,A
C51 COMPILER V9.51   MAIN                                                                  04/20/2018 10:00:44 PAGE 10  

015A E4                CLR     A
015B 3400        E     ADDC    A,#HIGH g_meas+0CH
015D F583              MOV     DPH,A
015F E4                CLR     A
0160 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0161 80D6              SJMP    ?C0008
0163         ?C0009:
                                           ; SOURCE LINE # 181
0163 7800        E     MOV     R0,#LOW g_refNew
0165 7C00        E     MOV     R4,#HIGH g_refNew
0167 7D01              MOV     R5,#01H
0169 7B01              MOV     R3,#01H
016B 7A00        E     MOV     R2,#HIGH g_ref
016D 7900        E     MOV     R1,#LOW g_ref
016F 7E00              MOV     R6,#00H
0171 7F19              MOV     R7,#019H
0173 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 183
0176 900000      E     MOV     DPTR,#c_mem+0EH
0179 E0                MOVX    A,@DPTR
017A FF                MOV     R7,A
017B 900000      E     MOV     DPTR,#g_ref+018H
017E F0                MOVX    @DPTR,A
017F FB                MOV     R3,A
                                           ; SOURCE LINE # 186
0180 E4                CLR     A
0181 FF                MOV     R7,A
0182 FE                MOV     R6,A
0183 FD                MOV     R5,A
0184 FC                MOV     R4,A
0185 900000      E     MOV     DPTR,#g_meas+0FH
0188 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 187
018B E4                CLR     A
018C FF                MOV     R7,A
018D FE                MOV     R6,A
018E FD                MOV     R5,A
018F FC                MOV     R4,A
0190 900000      E     MOV     DPTR,#g_meas+013H
0193 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 189
0196 AF03              MOV     R7,AR3
0198 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 191
019B E4                CLR     A
019C 900000      E     MOV     DPTR,#dev_pwm_limit
019F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
01A0 7FE0              MOV     R7,#0E0H
01A2 7E2E              MOV     R6,#02EH
01A4 FD                MOV     R5,A
01A5 FC                MOV     R4,A
01A6 900000      E     MOV     DPTR,#pow_tension
01A9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 193
01AC C200        E     CLR     tension_valid
                                           ; SOURCE LINE # 194
01AE 900000      E     MOV     DPTR,#first_tension_valid
01B1 7401              MOV     A,#01H
01B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
C51 COMPILER V9.51   MAIN                                                                  04/20/2018 10:00:44 PAGE 11  

01B4 C200        E     CLR     reset_last_value_flag
                                           ; SOURCE LINE # 199
01B6 E4                CLR     A
01B7 900000      E     MOV     DPTR,#g_rx+080H
01BA F0                MOVX    @DPTR,A
01BB A3                INC     DPTR
01BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
01BD 900000      E     MOV     DPTR,#g_rx+084H
01C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
01C1 900000      E     MOV     DPTR,#master_mode
01C4 04                INC     A
01C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
01C6 E4                CLR     A
01C7 FF                MOV     R7,A
01C8 FE                MOV     R6,A
01C9 FD                MOV     R5,A
01CA FC                MOV     R4,A
01CB 900000      E     MOV     DPTR,#count_tension_valid
01CE 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 209
01D1         ?C0010:
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 212
01D1 E4                CLR     A
01D2 FF                MOV     R7,A
01D3 120000      E     LCALL   _RESET_FF_Write
                                           ; SOURCE LINE # 215
01D6 120000      E     LCALL   function_scheduler
01D9         ?C0012:
                                           ; SOURCE LINE # 218
01D9 120000      E     LCALL   FF_STATUS_Read
01DC EF                MOV     A,R7
01DD 700A              JNZ     ?C0013
                                           ; SOURCE LINE # 220
01DF 3000F7            JNB     interrupt_flag,?C0012
                                           ; SOURCE LINE # 222
01E2 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 224
01E4 120000      E     LCALL   interrupt_manager
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
01E7 80F0              SJMP    ?C0012
01E9         ?C0013:
                                           ; SOURCE LINE # 229
01E9 7F01              MOV     R7,#01H
01EB 120000      E     LCALL   _RESET_FF_Write
01EE         ?C0015:
                                           ; SOURCE LINE # 232
01EE 120000      E     LCALL   FF_STATUS_Read
01F1 EF                MOV     A,R7
01F2 6401              XRL     A,#01H
01F4 60F8              JZ      ?C0015
01F6         ?C0016:
                                           ; SOURCE LINE # 234
01F6 120000      E     LCALL   UART_RS485_ReadRxStatus
01F9 EF                MOV     A,R7
01FA 30E7D4            JNB     ACC.7,?C0010
                                           ; SOURCE LINE # 235
01FD 120000      E     LCALL   UART_RS485_ClearRxBuffer
C51 COMPILER V9.51   MAIN                                                                  04/20/2018 10:00:44 PAGE 12  

                                           ; SOURCE LINE # 236
0200 80CF              SJMP    ?C0010
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
0202         ?C0018:
0202 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    515    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
